// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_ACCOUNTS_H
#define XIDB_ACCOUNTS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace accounts_
  {
    struct id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct login
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "login";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T login;
            T& operator()() { return login; }
            const T& operator()() const { return login; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct current_email
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "current_email";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T current_email;
            T& operator()() { return current_email; }
            const T& operator()() const { return current_email; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct registration_email
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "registration_email";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T registration_email;
            T& operator()() { return registration_email; }
            const T& operator()() const { return registration_email; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct timecreate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timecreate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timecreate;
            T& operator()() { return timecreate; }
            const T& operator()() const { return timecreate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct timelastmodify
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timelastmodify";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timelastmodify;
            T& operator()() { return timelastmodify; }
            const T& operator()() const { return timelastmodify; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct content_ids
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "content_ids";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T content_ids;
            T& operator()() { return content_ids; }
            const T& operator()() const { return content_ids; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct expansions
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "expansions";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T expansions;
            T& operator()() { return expansions; }
            const T& operator()() const { return expansions; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct features
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "features";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T features;
            T& operator()() { return features; }
            const T& operator()() const { return features; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct priv
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "priv";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T priv;
            T& operator()() { return priv; }
            const T& operator()() const { return priv; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace accounts_

  struct accounts: sqlpp::table_t<accounts,
               accounts_::id,
               accounts_::login,
               accounts_::password,
               accounts_::current_email,
               accounts_::registration_email,
               accounts_::timecreate,
               accounts_::timelastmodify,
               accounts_::content_ids,
               accounts_::expansions,
               accounts_::features,
               accounts_::status,
               accounts_::priv>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "accounts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accounts;
        T& operator()() { return accounts; }
        const T& operator()() const { return accounts; }
      };
    };
  };
} // namespace xidb
#endif
