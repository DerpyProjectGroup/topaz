// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_ACCOUNTS_PARTIES_H
#define XIDB_ACCOUNTS_PARTIES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace accounts_parties_
  {
    struct charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct partyid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "partyid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T partyid;
            T& operator()() { return partyid; }
            const T& operator()() const { return partyid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct partyflag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "partyflag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T partyflag;
            T& operator()() { return partyflag; }
            const T& operator()() const { return partyflag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct allianceid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "allianceid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceid;
            T& operator()() { return allianceid; }
            const T& operator()() const { return allianceid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
  } // namespace accounts_parties_

  struct accounts_parties: sqlpp::table_t<accounts_parties,
               accounts_parties_::charid,
               accounts_parties_::partyid,
               accounts_parties_::partyflag,
               accounts_parties_::allianceid,
               accounts_parties_::timestamp>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "accounts_parties";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accounts_parties;
        T& operator()() { return accounts_parties; }
        const T& operator()() const { return accounts_parties; }
      };
    };
  };
} // namespace xidb
#endif
