// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_ACCOUNTS_SESSIONS_H
#define XIDB_ACCOUNTS_SESSIONS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace accounts_sessions_
  {
    struct accid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "accid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accid;
            T& operator()() { return accid; }
            const T& operator()() const { return accid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct targid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "targid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T targid;
            T& operator()() { return targid; }
            const T& operator()() const { return targid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct unitychat
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unitychat";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unitychat;
            T& operator()() { return unitychat; }
            const T& operator()() const { return unitychat; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct linkshellid1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "linkshellid1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T linkshellid1;
            T& operator()() { return linkshellid1; }
            const T& operator()() const { return linkshellid1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct linkshellrank1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "linkshellrank1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T linkshellrank1;
            T& operator()() { return linkshellrank1; }
            const T& operator()() const { return linkshellrank1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct linkshellid2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "linkshellid2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T linkshellid2;
            T& operator()() { return linkshellid2; }
            const T& operator()() const { return linkshellid2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct linkshellrank2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "linkshellrank2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T linkshellrank2;
            T& operator()() { return linkshellrank2; }
            const T& operator()() const { return linkshellrank2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct session_key
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "session_key";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T session_key;
            T& operator()() { return session_key; }
            const T& operator()() const { return session_key; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob>;
    };
    struct server_addr
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "server_addr";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T server_addr;
            T& operator()() { return server_addr; }
            const T& operator()() const { return server_addr; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct server_port
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "server_port";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T server_port;
            T& operator()() { return server_port; }
            const T& operator()() const { return server_port; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct client_addr
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "client_addr";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T client_addr;
            T& operator()() { return client_addr; }
            const T& operator()() const { return client_addr; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct client_port
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "client_port";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T client_port;
            T& operator()() { return client_port; }
            const T& operator()() const { return client_port; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct version_mismatch
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "version_mismatch";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T version_mismatch;
            T& operator()() { return version_mismatch; }
            const T& operator()() const { return version_mismatch; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct seacom_type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "seacom_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seacom_type;
            T& operator()() { return seacom_type; }
            const T& operator()() const { return seacom_type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct seacom_message
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "seacom_message";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seacom_message;
            T& operator()() { return seacom_message; }
            const T& operator()() const { return seacom_message; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
  } // namespace accounts_sessions_

  struct accounts_sessions: sqlpp::table_t<accounts_sessions,
               accounts_sessions_::accid,
               accounts_sessions_::charid,
               accounts_sessions_::targid,
               accounts_sessions_::unitychat,
               accounts_sessions_::linkshellid1,
               accounts_sessions_::linkshellrank1,
               accounts_sessions_::linkshellid2,
               accounts_sessions_::linkshellrank2,
               accounts_sessions_::session_key,
               accounts_sessions_::server_addr,
               accounts_sessions_::server_port,
               accounts_sessions_::client_addr,
               accounts_sessions_::client_port,
               accounts_sessions_::version_mismatch,
               accounts_sessions_::seacom_type,
               accounts_sessions_::seacom_message>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "accounts_sessions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accounts_sessions;
        T& operator()() { return accounts_sessions; }
        const T& operator()() const { return accounts_sessions; }
      };
    };
  };
} // namespace xidb
#endif
