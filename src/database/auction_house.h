// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_AUCTION_HOUSE_H
#define XIDB_AUCTION_HOUSE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace auction_house_
  {
    struct id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct itemid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemid;
            T& operator()() { return itemid; }
            const T& operator()() const { return itemid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct stack
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stack";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stack;
            T& operator()() { return stack; }
            const T& operator()() const { return stack; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct seller
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "seller";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seller;
            T& operator()() { return seller; }
            const T& operator()() const { return seller; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct seller_name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "seller_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seller_name;
            T& operator()() { return seller_name; }
            const T& operator()() const { return seller_name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct date
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T date;
            T& operator()() { return date; }
            const T& operator()() const { return date; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct price
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "price";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T price;
            T& operator()() { return price; }
            const T& operator()() const { return price; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct buyer_name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "buyer_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T buyer_name;
            T& operator()() { return buyer_name; }
            const T& operator()() const { return buyer_name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct sale
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sale";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sale;
            T& operator()() { return sale; }
            const T& operator()() const { return sale; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct sell_date
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sell_date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sell_date;
            T& operator()() { return sell_date; }
            const T& operator()() const { return sell_date; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  } // namespace auction_house_

  struct auction_house: sqlpp::table_t<auction_house,
               auction_house_::id,
               auction_house_::itemid,
               auction_house_::stack,
               auction_house_::seller,
               auction_house_::seller_name,
               auction_house_::date,
               auction_house_::price,
               auction_house_::buyer_name,
               auction_house_::sale,
               auction_house_::sell_date>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "auction_house";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T auction_house;
        T& operator()() { return auction_house; }
        const T& operator()() const { return auction_house; }
      };
    };
  };
} // namespace xidb
#endif
