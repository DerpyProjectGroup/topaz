// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_AUGMENTS_H
#define XIDB_AUGMENTS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace augments_
  {
    struct augmentId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "augmentId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T augmentId;
            T& operator()() { return augmentId; }
            const T& operator()() const { return augmentId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct multiplier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "multiplier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T multiplier;
            T& operator()() { return multiplier; }
            const T& operator()() const { return multiplier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct modId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "modId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modId;
            T& operator()() { return modId; }
            const T& operator()() const { return modId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct isPet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "isPet";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isPet;
            T& operator()() { return isPet; }
            const T& operator()() const { return isPet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct petType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "petType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T petType;
            T& operator()() { return petType; }
            const T& operator()() const { return petType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace augments_

  struct augments: sqlpp::table_t<augments,
               augments_::augmentId,
               augments_::multiplier,
               augments_::modId,
               augments_::value,
               augments_::isPet,
               augments_::petType>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "augments";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T augments;
        T& operator()() { return augments; }
        const T& operator()() const { return augments; }
      };
    };
  };
} // namespace xidb
#endif
