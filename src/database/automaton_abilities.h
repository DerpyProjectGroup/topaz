// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_AUTOMATON_ABILITIES_H
#define XIDB_AUTOMATON_ABILITIES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace automaton_abilities_
  {
    struct abilityid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abilityid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abilityid;
            T& operator()() { return abilityid; }
            const T& operator()() const { return abilityid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct abilityname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abilityname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abilityname;
            T& operator()() { return abilityname; }
            const T& operator()() const { return abilityname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct reqframe
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reqframe";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqframe;
            T& operator()() { return reqframe; }
            const T& operator()() const { return reqframe; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct skilllevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "skilllevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T skilllevel;
            T& operator()() { return skilllevel; }
            const T& operator()() const { return skilllevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace automaton_abilities_

  struct automaton_abilities: sqlpp::table_t<automaton_abilities,
               automaton_abilities_::abilityid,
               automaton_abilities_::abilityname,
               automaton_abilities_::reqframe,
               automaton_abilities_::skilllevel>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "automaton_abilities";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T automaton_abilities;
        T& operator()() { return automaton_abilities; }
        const T& operator()() const { return automaton_abilities; }
      };
    };
  };
} // namespace xidb
#endif
