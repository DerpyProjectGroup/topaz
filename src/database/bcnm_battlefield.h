// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_BCNM_BATTLEFIELD_H
#define XIDB_BCNM_BATTLEFIELD_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace bcnm_battlefield_
  {
    struct bcnmId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bcnmId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bcnmId;
            T& operator()() { return bcnmId; }
            const T& operator()() const { return bcnmId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct battlefieldNumber
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battlefieldNumber";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlefieldNumber;
            T& operator()() { return battlefieldNumber; }
            const T& operator()() const { return battlefieldNumber; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
    struct monsterId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "monsterId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T monsterId;
            T& operator()() { return monsterId; }
            const T& operator()() const { return monsterId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct conditions
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "conditions";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T conditions;
            T& operator()() { return conditions; }
            const T& operator()() const { return conditions; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  } // namespace bcnm_battlefield_

  struct bcnm_battlefield: sqlpp::table_t<bcnm_battlefield,
               bcnm_battlefield_::bcnmId,
               bcnm_battlefield_::battlefieldNumber,
               bcnm_battlefield_::monsterId,
               bcnm_battlefield_::conditions>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "bcnm_battlefield";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T bcnm_battlefield;
        T& operator()() { return bcnm_battlefield; }
        const T& operator()() const { return bcnm_battlefield; }
      };
    };
  };
} // namespace xidb
#endif
