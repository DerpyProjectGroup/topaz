// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_BLUE_SPELL_LIST_H
#define XIDB_BLUE_SPELL_LIST_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace blue_spell_list_
  {
    struct spellid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spellid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellid;
            T& operator()() { return spellid; }
            const T& operator()() const { return spellid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct mob_skill_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mob_skill_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mob_skill_id;
            T& operator()() { return mob_skill_id; }
            const T& operator()() const { return mob_skill_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct set_points
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "set_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T set_points;
            T& operator()() { return set_points; }
            const T& operator()() const { return set_points; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct trait_category
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "trait_category";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T trait_category;
            T& operator()() { return trait_category; }
            const T& operator()() const { return trait_category; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct trait_category_weight
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "trait_category_weight";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T trait_category_weight;
            T& operator()() { return trait_category_weight; }
            const T& operator()() const { return trait_category_weight; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct primary_sc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "primary_sc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T primary_sc;
            T& operator()() { return primary_sc; }
            const T& operator()() const { return primary_sc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct secondary_sc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "secondary_sc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T secondary_sc;
            T& operator()() { return secondary_sc; }
            const T& operator()() const { return secondary_sc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace blue_spell_list_

  struct blue_spell_list: sqlpp::table_t<blue_spell_list,
               blue_spell_list_::spellid,
               blue_spell_list_::mob_skill_id,
               blue_spell_list_::set_points,
               blue_spell_list_::trait_category,
               blue_spell_list_::trait_category_weight,
               blue_spell_list_::primary_sc,
               blue_spell_list_::secondary_sc>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "blue_spell_list";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T blue_spell_list;
        T& operator()() { return blue_spell_list; }
        const T& operator()() const { return blue_spell_list; }
      };
    };
  };
} // namespace xidb
#endif
