// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_BLUE_TRAITS_H
#define XIDB_BLUE_TRAITS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace blue_traits_
  {
    struct trait_category
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "trait_category";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T trait_category;
            T& operator()() { return trait_category; }
            const T& operator()() const { return trait_category; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct trait_points_needed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "trait_points_needed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T trait_points_needed;
            T& operator()() { return trait_points_needed; }
            const T& operator()() const { return trait_points_needed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct traitid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "traitid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T traitid;
            T& operator()() { return traitid; }
            const T& operator()() const { return traitid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct modifier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "modifier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modifier;
            T& operator()() { return modifier; }
            const T& operator()() const { return modifier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace blue_traits_

  struct blue_traits: sqlpp::table_t<blue_traits,
               blue_traits_::trait_category,
               blue_traits_::trait_points_needed,
               blue_traits_::traitid,
               blue_traits_::modifier,
               blue_traits_::value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "blue_traits";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T blue_traits;
        T& operator()() { return blue_traits; }
        const T& operator()() const { return blue_traits; }
      };
    };
  };
} // namespace xidb
#endif
