// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_CAMPAIGN_MAP_H
#define XIDB_CAMPAIGN_MAP_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace campaign_map_
  {
    struct id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct zoneid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zoneid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zoneid;
            T& operator()() { return zoneid; }
            const T& operator()() const { return zoneid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct isbattle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "isbattle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isbattle;
            T& operator()() { return isbattle; }
            const T& operator()() const { return isbattle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct nation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nation;
            T& operator()() { return nation; }
            const T& operator()() const { return nation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct heroism
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "heroism";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T heroism;
            T& operator()() { return heroism; }
            const T& operator()() const { return heroism; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct influence_sandoria
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "influence_sandoria";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T influence_sandoria;
            T& operator()() { return influence_sandoria; }
            const T& operator()() const { return influence_sandoria; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct influence_bastok
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "influence_bastok";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T influence_bastok;
            T& operator()() { return influence_bastok; }
            const T& operator()() const { return influence_bastok; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct influence_windurst
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "influence_windurst";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T influence_windurst;
            T& operator()() { return influence_windurst; }
            const T& operator()() const { return influence_windurst; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct influence_beastman
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "influence_beastman";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T influence_beastman;
            T& operator()() { return influence_beastman; }
            const T& operator()() const { return influence_beastman; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct current_fortifications
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "current_fortifications";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T current_fortifications;
            T& operator()() { return current_fortifications; }
            const T& operator()() const { return current_fortifications; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct current_resources
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "current_resources";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T current_resources;
            T& operator()() { return current_resources; }
            const T& operator()() const { return current_resources; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct max_fortifications
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_fortifications";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T max_fortifications;
            T& operator()() { return max_fortifications; }
            const T& operator()() const { return max_fortifications; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct max_resources
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_resources";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T max_resources;
            T& operator()() { return max_resources; }
            const T& operator()() const { return max_resources; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace campaign_map_

  struct campaign_map: sqlpp::table_t<campaign_map,
               campaign_map_::id,
               campaign_map_::zoneid,
               campaign_map_::isbattle,
               campaign_map_::nation,
               campaign_map_::heroism,
               campaign_map_::influence_sandoria,
               campaign_map_::influence_bastok,
               campaign_map_::influence_windurst,
               campaign_map_::influence_beastman,
               campaign_map_::current_fortifications,
               campaign_map_::current_resources,
               campaign_map_::max_fortifications,
               campaign_map_::max_resources>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "campaign_map";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T campaign_map;
        T& operator()() { return campaign_map; }
        const T& operator()() const { return campaign_map; }
      };
    };
  };
} // namespace xidb
#endif
