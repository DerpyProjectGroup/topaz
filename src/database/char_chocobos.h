// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_CHOCOBOS_H
#define XIDB_CHAR_CHOCOBOS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace char_chocobos_
  {
    struct charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct first_name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "first_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T first_name;
            T& operator()() { return first_name; }
            const T& operator()() const { return first_name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct last_name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T last_name;
            T& operator()() { return last_name; }
            const T& operator()() const { return last_name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct sex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sex;
            T& operator()() { return sex; }
            const T& operator()() const { return sex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
    struct created
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T created;
            T& operator()() { return created; }
            const T& operator()() const { return created; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct last_update
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_update";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T last_update;
            T& operator()() { return last_update; }
            const T& operator()() const { return last_update; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct stage
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stage";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stage;
            T& operator()() { return stage; }
            const T& operator()() const { return stage; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct location
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "location";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T location;
            T& operator()() { return location; }
            const T& operator()() const { return location; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct colour
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "colour";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T colour;
            T& operator()() { return colour; }
            const T& operator()() const { return colour; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct dominant_gene
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dominant_gene";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dominant_gene;
            T& operator()() { return dominant_gene; }
            const T& operator()() const { return dominant_gene; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct recessive_gene
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "recessive_gene";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T recessive_gene;
            T& operator()() { return recessive_gene; }
            const T& operator()() const { return recessive_gene; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct strength
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "strength";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T strength;
            T& operator()() { return strength; }
            const T& operator()() const { return strength; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct endurance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "endurance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T endurance;
            T& operator()() { return endurance; }
            const T& operator()() const { return endurance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct discernment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "discernment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T discernment;
            T& operator()() { return discernment; }
            const T& operator()() const { return discernment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct receptivity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "receptivity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T receptivity;
            T& operator()() { return receptivity; }
            const T& operator()() const { return receptivity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct affection
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "affection";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T affection;
            T& operator()() { return affection; }
            const T& operator()() const { return affection; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct energy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "energy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T energy;
            T& operator()() { return energy; }
            const T& operator()() const { return energy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct satisfaction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "satisfaction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T satisfaction;
            T& operator()() { return satisfaction; }
            const T& operator()() const { return satisfaction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct conditions
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "conditions";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T conditions;
            T& operator()() { return conditions; }
            const T& operator()() const { return conditions; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ability1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ability1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ability1;
            T& operator()() { return ability1; }
            const T& operator()() const { return ability1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ability2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ability2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ability2;
            T& operator()() { return ability2; }
            const T& operator()() const { return ability2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct personality
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "personality";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T personality;
            T& operator()() { return personality; }
            const T& operator()() const { return personality; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct weather_preference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "weather_preference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T weather_preference;
            T& operator()() { return weather_preference; }
            const T& operator()() const { return weather_preference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct hunger
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hunger";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hunger;
            T& operator()() { return hunger; }
            const T& operator()() const { return hunger; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct care_plan_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "care_plan_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T care_plan_1;
            T& operator()() { return care_plan_1; }
            const T& operator()() const { return care_plan_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct care_plan_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "care_plan_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T care_plan_2;
            T& operator()() { return care_plan_2; }
            const T& operator()() const { return care_plan_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct care_plan_3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "care_plan_3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T care_plan_3;
            T& operator()() { return care_plan_3; }
            const T& operator()() const { return care_plan_3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct care_plan_4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "care_plan_4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T care_plan_4;
            T& operator()() { return care_plan_4; }
            const T& operator()() const { return care_plan_4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
  } // namespace char_chocobos_

  struct char_chocobos: sqlpp::table_t<char_chocobos,
               char_chocobos_::charid,
               char_chocobos_::first_name,
               char_chocobos_::last_name,
               char_chocobos_::sex,
               char_chocobos_::created,
               char_chocobos_::last_update,
               char_chocobos_::stage,
               char_chocobos_::location,
               char_chocobos_::colour,
               char_chocobos_::dominant_gene,
               char_chocobos_::recessive_gene,
               char_chocobos_::strength,
               char_chocobos_::endurance,
               char_chocobos_::discernment,
               char_chocobos_::receptivity,
               char_chocobos_::affection,
               char_chocobos_::energy,
               char_chocobos_::satisfaction,
               char_chocobos_::conditions,
               char_chocobos_::ability1,
               char_chocobos_::ability2,
               char_chocobos_::personality,
               char_chocobos_::weather_preference,
               char_chocobos_::hunger,
               char_chocobos_::care_plan_1,
               char_chocobos_::care_plan_2,
               char_chocobos_::care_plan_3,
               char_chocobos_::care_plan_4>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_chocobos";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T char_chocobos;
        T& operator()() { return char_chocobos; }
        const T& operator()() const { return char_chocobos; }
      };
    };
  };
} // namespace xidb
#endif
