// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_HISTORY_H
#define XIDB_CHAR_HISTORY_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace char_history_
  {
    struct charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct enemies_defeated
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "enemies_defeated";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T enemies_defeated;
            T& operator()() { return enemies_defeated; }
            const T& operator()() const { return enemies_defeated; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct times_knocked_out
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "times_knocked_out";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T times_knocked_out;
            T& operator()() { return times_knocked_out; }
            const T& operator()() const { return times_knocked_out; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct mh_entrances
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mh_entrances";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mh_entrances;
            T& operator()() { return mh_entrances; }
            const T& operator()() const { return mh_entrances; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct joined_parties
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "joined_parties";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joined_parties;
            T& operator()() { return joined_parties; }
            const T& operator()() const { return joined_parties; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct joined_alliances
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "joined_alliances";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joined_alliances;
            T& operator()() { return joined_alliances; }
            const T& operator()() const { return joined_alliances; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct spells_cast
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spells_cast";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spells_cast;
            T& operator()() { return spells_cast; }
            const T& operator()() const { return spells_cast; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct abilities_used
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abilities_used";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abilities_used;
            T& operator()() { return abilities_used; }
            const T& operator()() const { return abilities_used; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ws_used
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ws_used";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ws_used;
            T& operator()() { return ws_used; }
            const T& operator()() const { return ws_used; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct items_used
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "items_used";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T items_used;
            T& operator()() { return items_used; }
            const T& operator()() const { return items_used; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct chats_sent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chats_sent";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chats_sent;
            T& operator()() { return chats_sent; }
            const T& operator()() const { return chats_sent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct npc_interactions
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "npc_interactions";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T npc_interactions;
            T& operator()() { return npc_interactions; }
            const T& operator()() const { return npc_interactions; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct battles_fought
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battles_fought";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battles_fought;
            T& operator()() { return battles_fought; }
            const T& operator()() const { return battles_fought; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct gm_calls
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gm_calls";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gm_calls;
            T& operator()() { return gm_calls; }
            const T& operator()() const { return gm_calls; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct distance_travelled
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "distance_travelled";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T distance_travelled;
            T& operator()() { return distance_travelled; }
            const T& operator()() const { return distance_travelled; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  } // namespace char_history_

  struct char_history: sqlpp::table_t<char_history,
               char_history_::charid,
               char_history_::enemies_defeated,
               char_history_::times_knocked_out,
               char_history_::mh_entrances,
               char_history_::joined_parties,
               char_history_::joined_alliances,
               char_history_::spells_cast,
               char_history_::abilities_used,
               char_history_::ws_used,
               char_history_::items_used,
               char_history_::chats_sent,
               char_history_::npc_interactions,
               char_history_::battles_fought,
               char_history_::gm_calls,
               char_history_::distance_travelled>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_history";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T char_history;
        T& operator()() { return char_history; }
        const T& operator()() const { return char_history; }
      };
    };
  };
} // namespace xidb
#endif
