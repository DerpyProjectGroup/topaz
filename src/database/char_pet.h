// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_PET_H
#define XIDB_CHAR_PET_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace char_pet_
  {
    struct charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct wyvernid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wyvernid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wyvernid;
            T& operator()() { return wyvernid; }
            const T& operator()() const { return wyvernid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct automatonid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "automatonid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T automatonid;
            T& operator()() { return automatonid; }
            const T& operator()() const { return automatonid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct unlocked_attachments
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unlocked_attachments";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unlocked_attachments;
            T& operator()() { return unlocked_attachments; }
            const T& operator()() const { return unlocked_attachments; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct equipped_attachments
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "equipped_attachments";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T equipped_attachments;
            T& operator()() { return equipped_attachments; }
            const T& operator()() const { return equipped_attachments; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct adventuringfellowid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "adventuringfellowid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T adventuringfellowid;
            T& operator()() { return adventuringfellowid; }
            const T& operator()() const { return adventuringfellowid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct chocoboid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chocoboid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chocoboid;
            T& operator()() { return chocoboid; }
            const T& operator()() const { return chocoboid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct field_chocobo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "field_chocobo";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T field_chocobo;
            T& operator()() { return field_chocobo; }
            const T& operator()() const { return field_chocobo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  } // namespace char_pet_

  struct char_pet: sqlpp::table_t<char_pet,
               char_pet_::charid,
               char_pet_::wyvernid,
               char_pet_::automatonid,
               char_pet_::unlocked_attachments,
               char_pet_::equipped_attachments,
               char_pet_::adventuringfellowid,
               char_pet_::chocoboid,
               char_pet_::field_chocobo>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_pet";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T char_pet;
        T& operator()() { return char_pet; }
        const T& operator()() const { return char_pet; }
      };
    };
  };
} // namespace xidb
#endif
