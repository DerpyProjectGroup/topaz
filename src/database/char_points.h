// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_POINTS_H
#define XIDB_CHAR_POINTS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace char_points_
  {
    struct charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct sandoria_cp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sandoria_cp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sandoria_cp;
            T& operator()() { return sandoria_cp; }
            const T& operator()() const { return sandoria_cp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct bastok_cp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bastok_cp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bastok_cp;
            T& operator()() { return bastok_cp; }
            const T& operator()() const { return bastok_cp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct windurst_cp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "windurst_cp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T windurst_cp;
            T& operator()() { return windurst_cp; }
            const T& operator()() const { return windurst_cp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct beastman_seal
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "beastman_seal";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T beastman_seal;
            T& operator()() { return beastman_seal; }
            const T& operator()() const { return beastman_seal; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct kindred_seal
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "kindred_seal";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T kindred_seal;
            T& operator()() { return kindred_seal; }
            const T& operator()() const { return kindred_seal; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct kindred_crest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "kindred_crest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T kindred_crest;
            T& operator()() { return kindred_crest; }
            const T& operator()() const { return kindred_crest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct high_kindred_crest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "high_kindred_crest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T high_kindred_crest;
            T& operator()() { return high_kindred_crest; }
            const T& operator()() const { return high_kindred_crest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct sacred_kindred_crest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sacred_kindred_crest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sacred_kindred_crest;
            T& operator()() { return sacred_kindred_crest; }
            const T& operator()() const { return sacred_kindred_crest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ancient_beastcoin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ancient_beastcoin";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ancient_beastcoin;
            T& operator()() { return ancient_beastcoin; }
            const T& operator()() const { return ancient_beastcoin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct valor_point
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "valor_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T valor_point;
            T& operator()() { return valor_point; }
            const T& operator()() const { return valor_point; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct scyld
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "scyld";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scyld;
            T& operator()() { return scyld; }
            const T& operator()() const { return scyld; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct guild_fishing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_fishing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guild_fishing;
            T& operator()() { return guild_fishing; }
            const T& operator()() const { return guild_fishing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct guild_woodworking
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_woodworking";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guild_woodworking;
            T& operator()() { return guild_woodworking; }
            const T& operator()() const { return guild_woodworking; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct guild_smithing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_smithing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guild_smithing;
            T& operator()() { return guild_smithing; }
            const T& operator()() const { return guild_smithing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct guild_goldsmithing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_goldsmithing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guild_goldsmithing;
            T& operator()() { return guild_goldsmithing; }
            const T& operator()() const { return guild_goldsmithing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct guild_weaving
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_weaving";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guild_weaving;
            T& operator()() { return guild_weaving; }
            const T& operator()() const { return guild_weaving; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct guild_leathercraft
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_leathercraft";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guild_leathercraft;
            T& operator()() { return guild_leathercraft; }
            const T& operator()() const { return guild_leathercraft; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct guild_bonecraft
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_bonecraft";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guild_bonecraft;
            T& operator()() { return guild_bonecraft; }
            const T& operator()() const { return guild_bonecraft; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct guild_alchemy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_alchemy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guild_alchemy;
            T& operator()() { return guild_alchemy; }
            const T& operator()() const { return guild_alchemy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct guild_cooking
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_cooking";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guild_cooking;
            T& operator()() { return guild_cooking; }
            const T& operator()() const { return guild_cooking; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct cinder
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cinder";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cinder;
            T& operator()() { return cinder; }
            const T& operator()() const { return cinder; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct fire_fewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fire_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fire_fewell;
            T& operator()() { return fire_fewell; }
            const T& operator()() const { return fire_fewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ice_fewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ice_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ice_fewell;
            T& operator()() { return ice_fewell; }
            const T& operator()() const { return ice_fewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct wind_fewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wind_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wind_fewell;
            T& operator()() { return wind_fewell; }
            const T& operator()() const { return wind_fewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct earth_fewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "earth_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T earth_fewell;
            T& operator()() { return earth_fewell; }
            const T& operator()() const { return earth_fewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct lightning_fewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lightning_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lightning_fewell;
            T& operator()() { return lightning_fewell; }
            const T& operator()() const { return lightning_fewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct water_fewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "water_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T water_fewell;
            T& operator()() { return water_fewell; }
            const T& operator()() const { return water_fewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct light_fewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "light_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T light_fewell;
            T& operator()() { return light_fewell; }
            const T& operator()() const { return light_fewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct dark_fewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dark_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dark_fewell;
            T& operator()() { return dark_fewell; }
            const T& operator()() const { return dark_fewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ballista_point
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ballista_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ballista_point;
            T& operator()() { return ballista_point; }
            const T& operator()() const { return ballista_point; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct fellow_point
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fellow_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fellow_point;
            T& operator()() { return fellow_point; }
            const T& operator()() const { return fellow_point; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct daily_tally
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "daily_tally";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T daily_tally;
            T& operator()() { return daily_tally; }
            const T& operator()() const { return daily_tally; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct chocobuck_sandoria
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chocobuck_sandoria";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chocobuck_sandoria;
            T& operator()() { return chocobuck_sandoria; }
            const T& operator()() const { return chocobuck_sandoria; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct chocobuck_bastok
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chocobuck_bastok";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chocobuck_bastok;
            T& operator()() { return chocobuck_bastok; }
            const T& operator()() const { return chocobuck_bastok; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct chocobuck_windurst
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chocobuck_windurst";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chocobuck_windurst;
            T& operator()() { return chocobuck_windurst; }
            const T& operator()() const { return chocobuck_windurst; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct research_mark
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "research_mark";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T research_mark;
            T& operator()() { return research_mark; }
            const T& operator()() const { return research_mark; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct tunnel_worm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tunnel_worm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tunnel_worm;
            T& operator()() { return tunnel_worm; }
            const T& operator()() const { return tunnel_worm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct morion_worm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "morion_worm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T morion_worm;
            T& operator()() { return morion_worm; }
            const T& operator()() const { return morion_worm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct phantom_worm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phantom_worm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phantom_worm;
            T& operator()() { return phantom_worm; }
            const T& operator()() const { return phantom_worm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct moblin_marble
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "moblin_marble";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T moblin_marble;
            T& operator()() { return moblin_marble; }
            const T& operator()() const { return moblin_marble; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct infamy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "infamy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T infamy;
            T& operator()() { return infamy; }
            const T& operator()() const { return infamy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct prestige
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "prestige";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T prestige;
            T& operator()() { return prestige; }
            const T& operator()() const { return prestige; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct legion_point
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "legion_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T legion_point;
            T& operator()() { return legion_point; }
            const T& operator()() const { return legion_point; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct spark_of_eminence
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spark_of_eminence";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spark_of_eminence;
            T& operator()() { return spark_of_eminence; }
            const T& operator()() const { return spark_of_eminence; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct shining_star
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "shining_star";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shining_star;
            T& operator()() { return shining_star; }
            const T& operator()() const { return shining_star; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct imperial_standing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "imperial_standing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T imperial_standing;
            T& operator()() { return imperial_standing; }
            const T& operator()() const { return imperial_standing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct leujaoam_assault_point
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leujaoam_assault_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leujaoam_assault_point;
            T& operator()() { return leujaoam_assault_point; }
            const T& operator()() const { return leujaoam_assault_point; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct mamool_assault_point
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mamool_assault_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mamool_assault_point;
            T& operator()() { return mamool_assault_point; }
            const T& operator()() const { return mamool_assault_point; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct lebros_assault_point
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lebros_assault_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lebros_assault_point;
            T& operator()() { return lebros_assault_point; }
            const T& operator()() const { return lebros_assault_point; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct periqia_assault_point
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "periqia_assault_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T periqia_assault_point;
            T& operator()() { return periqia_assault_point; }
            const T& operator()() const { return periqia_assault_point; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ilrusi_assault_point
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ilrusi_assault_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ilrusi_assault_point;
            T& operator()() { return ilrusi_assault_point; }
            const T& operator()() const { return ilrusi_assault_point; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct nyzul_isle_assault_point
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nyzul_isle_assault_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nyzul_isle_assault_point;
            T& operator()() { return nyzul_isle_assault_point; }
            const T& operator()() const { return nyzul_isle_assault_point; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct zeni_point
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zeni_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zeni_point;
            T& operator()() { return zeni_point; }
            const T& operator()() const { return zeni_point; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct jetton
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jetton";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jetton;
            T& operator()() { return jetton; }
            const T& operator()() const { return jetton; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct therion_ichor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "therion_ichor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T therion_ichor;
            T& operator()() { return therion_ichor; }
            const T& operator()() const { return therion_ichor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct allied_notes
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "allied_notes";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allied_notes;
            T& operator()() { return allied_notes; }
            const T& operator()() const { return allied_notes; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct aman_vouchers
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "aman_vouchers";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T aman_vouchers;
            T& operator()() { return aman_vouchers; }
            const T& operator()() const { return aman_vouchers; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct login_points
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "login_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T login_points;
            T& operator()() { return login_points; }
            const T& operator()() const { return login_points; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct bayld
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bayld";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bayld;
            T& operator()() { return bayld; }
            const T& operator()() const { return bayld; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct kinetic_unit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "kinetic_unit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T kinetic_unit;
            T& operator()() { return kinetic_unit; }
            const T& operator()() const { return kinetic_unit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct obsidian_fragment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "obsidian_fragment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T obsidian_fragment;
            T& operator()() { return obsidian_fragment; }
            const T& operator()() const { return obsidian_fragment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct lebondopt_wing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lebondopt_wing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lebondopt_wing;
            T& operator()() { return lebondopt_wing; }
            const T& operator()() const { return lebondopt_wing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct pulchridopt_wing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pulchridopt_wing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pulchridopt_wing;
            T& operator()() { return pulchridopt_wing; }
            const T& operator()() const { return pulchridopt_wing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct mweya_plasm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mweya_plasm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mweya_plasm;
            T& operator()() { return mweya_plasm; }
            const T& operator()() const { return mweya_plasm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct cruor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cruor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cruor;
            T& operator()() { return cruor; }
            const T& operator()() const { return cruor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct resistance_credit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resistance_credit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resistance_credit;
            T& operator()() { return resistance_credit; }
            const T& operator()() const { return resistance_credit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct dominion_note
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dominion_note";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dominion_note;
            T& operator()() { return dominion_note; }
            const T& operator()() const { return dominion_note; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct fifth_echelon_trophy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fifth_echelon_trophy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fifth_echelon_trophy;
            T& operator()() { return fifth_echelon_trophy; }
            const T& operator()() const { return fifth_echelon_trophy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct fourth_echelon_trophy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fourth_echelon_trophy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fourth_echelon_trophy;
            T& operator()() { return fourth_echelon_trophy; }
            const T& operator()() const { return fourth_echelon_trophy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct third_echelon_trophy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "third_echelon_trophy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T third_echelon_trophy;
            T& operator()() { return third_echelon_trophy; }
            const T& operator()() const { return third_echelon_trophy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct second_echelon_trophy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "second_echelon_trophy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T second_echelon_trophy;
            T& operator()() { return second_echelon_trophy; }
            const T& operator()() const { return second_echelon_trophy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct first_echelon_trophy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "first_echelon_trophy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T first_echelon_trophy;
            T& operator()() { return first_echelon_trophy; }
            const T& operator()() const { return first_echelon_trophy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct cave_points
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cave_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cave_points;
            T& operator()() { return cave_points; }
            const T& operator()() const { return cave_points; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct id_tags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id_tags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id_tags;
            T& operator()() { return id_tags; }
            const T& operator()() const { return id_tags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct op_credits
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "op_credits";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T op_credits;
            T& operator()() { return op_credits; }
            const T& operator()() const { return op_credits; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct traverser_stones
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "traverser_stones";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T traverser_stones;
            T& operator()() { return traverser_stones; }
            const T& operator()() const { return traverser_stones; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct voidstones
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "voidstones";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T voidstones;
            T& operator()() { return voidstones; }
            const T& operator()() const { return voidstones; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct kupofried_corundums
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "kupofried_corundums";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T kupofried_corundums;
            T& operator()() { return kupofried_corundums; }
            const T& operator()() const { return kupofried_corundums; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct imprimaturs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "imprimaturs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T imprimaturs;
            T& operator()() { return imprimaturs; }
            const T& operator()() const { return imprimaturs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct pheromone_sacks
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pheromone_sacks";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pheromone_sacks;
            T& operator()() { return pheromone_sacks; }
            const T& operator()() const { return pheromone_sacks; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct rems_ch1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rems_ch1;
            T& operator()() { return rems_ch1; }
            const T& operator()() const { return rems_ch1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct rems_ch2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rems_ch2;
            T& operator()() { return rems_ch2; }
            const T& operator()() const { return rems_ch2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct rems_ch3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rems_ch3;
            T& operator()() { return rems_ch3; }
            const T& operator()() const { return rems_ch3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct rems_ch4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rems_ch4;
            T& operator()() { return rems_ch4; }
            const T& operator()() const { return rems_ch4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct rems_ch5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rems_ch5;
            T& operator()() { return rems_ch5; }
            const T& operator()() const { return rems_ch5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct rems_ch6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rems_ch6;
            T& operator()() { return rems_ch6; }
            const T& operator()() const { return rems_ch6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct rems_ch7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rems_ch7;
            T& operator()() { return rems_ch7; }
            const T& operator()() const { return rems_ch7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct rems_ch8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rems_ch8;
            T& operator()() { return rems_ch8; }
            const T& operator()() const { return rems_ch8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct rems_ch9
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch9";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rems_ch9;
            T& operator()() { return rems_ch9; }
            const T& operator()() const { return rems_ch9; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct rems_ch10
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch10";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rems_ch10;
            T& operator()() { return rems_ch10; }
            const T& operator()() const { return rems_ch10; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct reclamation_marks
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reclamation_marks";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reclamation_marks;
            T& operator()() { return reclamation_marks; }
            const T& operator()() const { return reclamation_marks; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct unity_accolades
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unity_accolades";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unity_accolades;
            T& operator()() { return unity_accolades; }
            const T& operator()() const { return unity_accolades; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct fire_crystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fire_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fire_crystals;
            T& operator()() { return fire_crystals; }
            const T& operator()() const { return fire_crystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ice_crystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ice_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ice_crystals;
            T& operator()() { return ice_crystals; }
            const T& operator()() const { return ice_crystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct wind_crystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wind_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wind_crystals;
            T& operator()() { return wind_crystals; }
            const T& operator()() const { return wind_crystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct earth_crystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "earth_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T earth_crystals;
            T& operator()() { return earth_crystals; }
            const T& operator()() const { return earth_crystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct lightning_crystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lightning_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lightning_crystals;
            T& operator()() { return lightning_crystals; }
            const T& operator()() const { return lightning_crystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct water_crystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "water_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T water_crystals;
            T& operator()() { return water_crystals; }
            const T& operator()() const { return water_crystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct light_crystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "light_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T light_crystals;
            T& operator()() { return light_crystals; }
            const T& operator()() const { return light_crystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct dark_crystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dark_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dark_crystals;
            T& operator()() { return dark_crystals; }
            const T& operator()() const { return dark_crystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct deeds
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deeds";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deeds;
            T& operator()() { return deeds; }
            const T& operator()() const { return deeds; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct current_accolades
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "current_accolades";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T current_accolades;
            T& operator()() { return current_accolades; }
            const T& operator()() const { return current_accolades; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct prev_accolades
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "prev_accolades";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T prev_accolades;
            T& operator()() { return prev_accolades; }
            const T& operator()() const { return prev_accolades; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct mystical_canteen
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mystical_canteen";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mystical_canteen;
            T& operator()() { return mystical_canteen; }
            const T& operator()() const { return mystical_canteen; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ghastly_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ghastly_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ghastly_stone;
            T& operator()() { return ghastly_stone; }
            const T& operator()() const { return ghastly_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ghastly_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ghastly_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ghastly_stone_1;
            T& operator()() { return ghastly_stone_1; }
            const T& operator()() const { return ghastly_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ghastly_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ghastly_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ghastly_stone_2;
            T& operator()() { return ghastly_stone_2; }
            const T& operator()() const { return ghastly_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct verdigris_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "verdigris_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T verdigris_stone;
            T& operator()() { return verdigris_stone; }
            const T& operator()() const { return verdigris_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct verdigris_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "verdigris_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T verdigris_stone_1;
            T& operator()() { return verdigris_stone_1; }
            const T& operator()() const { return verdigris_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct verdigris_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "verdigris_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T verdigris_stone_2;
            T& operator()() { return verdigris_stone_2; }
            const T& operator()() const { return verdigris_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct wailing_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wailing_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wailing_stone;
            T& operator()() { return wailing_stone; }
            const T& operator()() const { return wailing_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct wailing_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wailing_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wailing_stone_1;
            T& operator()() { return wailing_stone_1; }
            const T& operator()() const { return wailing_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct wailing_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wailing_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wailing_stone_2;
            T& operator()() { return wailing_stone_2; }
            const T& operator()() const { return wailing_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct snowslit_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowslit_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowslit_stone;
            T& operator()() { return snowslit_stone; }
            const T& operator()() const { return snowslit_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct snowslit_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowslit_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowslit_stone_1;
            T& operator()() { return snowslit_stone_1; }
            const T& operator()() const { return snowslit_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct snowslit_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowslit_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowslit_stone_2;
            T& operator()() { return snowslit_stone_2; }
            const T& operator()() const { return snowslit_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct snowtip_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowtip_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowtip_stone;
            T& operator()() { return snowtip_stone; }
            const T& operator()() const { return snowtip_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct snowtip_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowtip_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowtip_stone_1;
            T& operator()() { return snowtip_stone_1; }
            const T& operator()() const { return snowtip_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct snowtip_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowtip_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowtip_stone_2;
            T& operator()() { return snowtip_stone_2; }
            const T& operator()() const { return snowtip_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct snowdim_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowdim_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowdim_stone;
            T& operator()() { return snowdim_stone; }
            const T& operator()() const { return snowdim_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct snowdim_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowdim_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowdim_stone_1;
            T& operator()() { return snowdim_stone_1; }
            const T& operator()() const { return snowdim_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct snowdim_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowdim_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowdim_stone_2;
            T& operator()() { return snowdim_stone_2; }
            const T& operator()() const { return snowdim_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct snoworb_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snoworb_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snoworb_stone;
            T& operator()() { return snoworb_stone; }
            const T& operator()() const { return snoworb_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct snoworb_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snoworb_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snoworb_stone_1;
            T& operator()() { return snoworb_stone_1; }
            const T& operator()() const { return snoworb_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct snoworb_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snoworb_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snoworb_stone_2;
            T& operator()() { return snoworb_stone_2; }
            const T& operator()() const { return snoworb_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct leafslit_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leafslit_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leafslit_stone;
            T& operator()() { return leafslit_stone; }
            const T& operator()() const { return leafslit_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct leafslit_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leafslit_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leafslit_stone_1;
            T& operator()() { return leafslit_stone_1; }
            const T& operator()() const { return leafslit_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct leafslit_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leafslit_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leafslit_stone_2;
            T& operator()() { return leafslit_stone_2; }
            const T& operator()() const { return leafslit_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct leaftip_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaftip_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaftip_stone;
            T& operator()() { return leaftip_stone; }
            const T& operator()() const { return leaftip_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct leaftip_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaftip_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaftip_stone_1;
            T& operator()() { return leaftip_stone_1; }
            const T& operator()() const { return leaftip_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct leaftip_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaftip_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaftip_stone_2;
            T& operator()() { return leaftip_stone_2; }
            const T& operator()() const { return leaftip_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct leafdim_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leafdim_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leafdim_stone;
            T& operator()() { return leafdim_stone; }
            const T& operator()() const { return leafdim_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct leafdim_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leafdim_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leafdim_stone_1;
            T& operator()() { return leafdim_stone_1; }
            const T& operator()() const { return leafdim_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct leafdim_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leafdim_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leafdim_stone_2;
            T& operator()() { return leafdim_stone_2; }
            const T& operator()() const { return leafdim_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct leaforb_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaforb_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaforb_stone;
            T& operator()() { return leaforb_stone; }
            const T& operator()() const { return leaforb_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct leaforb_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaforb_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaforb_stone_1;
            T& operator()() { return leaforb_stone_1; }
            const T& operator()() const { return leaforb_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct leaforb_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaforb_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaforb_stone_2;
            T& operator()() { return leaforb_stone_2; }
            const T& operator()() const { return leaforb_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct duskslit_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskslit_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskslit_stone;
            T& operator()() { return duskslit_stone; }
            const T& operator()() const { return duskslit_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct duskslit_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskslit_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskslit_stone_1;
            T& operator()() { return duskslit_stone_1; }
            const T& operator()() const { return duskslit_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct duskslit_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskslit_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskslit_stone_2;
            T& operator()() { return duskslit_stone_2; }
            const T& operator()() const { return duskslit_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct dusktip_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dusktip_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dusktip_stone;
            T& operator()() { return dusktip_stone; }
            const T& operator()() const { return dusktip_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct dusktip_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dusktip_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dusktip_stone_1;
            T& operator()() { return dusktip_stone_1; }
            const T& operator()() const { return dusktip_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct dusktip_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dusktip_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dusktip_stone_2;
            T& operator()() { return dusktip_stone_2; }
            const T& operator()() const { return dusktip_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct duskdim_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskdim_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskdim_stone;
            T& operator()() { return duskdim_stone; }
            const T& operator()() const { return duskdim_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct duskdim_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskdim_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskdim_stone_1;
            T& operator()() { return duskdim_stone_1; }
            const T& operator()() const { return duskdim_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct duskdim_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskdim_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskdim_stone_2;
            T& operator()() { return duskdim_stone_2; }
            const T& operator()() const { return duskdim_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct duskorb_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskorb_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskorb_stone;
            T& operator()() { return duskorb_stone; }
            const T& operator()() const { return duskorb_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct duskorb_stone_1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskorb_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskorb_stone_1;
            T& operator()() { return duskorb_stone_1; }
            const T& operator()() const { return duskorb_stone_1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct duskorb_stone_2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskorb_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskorb_stone_2;
            T& operator()() { return duskorb_stone_2; }
            const T& operator()() const { return duskorb_stone_2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct pellucid_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pellucid_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pellucid_stone;
            T& operator()() { return pellucid_stone; }
            const T& operator()() const { return pellucid_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct fern_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fern_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fern_stone;
            T& operator()() { return fern_stone; }
            const T& operator()() const { return fern_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct taupe_stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "taupe_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T taupe_stone;
            T& operator()() { return taupe_stone; }
            const T& operator()() const { return taupe_stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct escha_beads
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "escha_beads";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T escha_beads;
            T& operator()() { return escha_beads; }
            const T& operator()() const { return escha_beads; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct escha_silt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "escha_silt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T escha_silt;
            T& operator()() { return escha_silt; }
            const T& operator()() const { return escha_silt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct potpourri
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "potpourri";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T potpourri;
            T& operator()() { return potpourri; }
            const T& operator()() const { return potpourri; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct current_hallmarks
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "current_hallmarks";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T current_hallmarks;
            T& operator()() { return current_hallmarks; }
            const T& operator()() const { return current_hallmarks; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct total_hallmarks
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "total_hallmarks";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T total_hallmarks;
            T& operator()() { return total_hallmarks; }
            const T& operator()() const { return total_hallmarks; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct gallantry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gallantry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gallantry;
            T& operator()() { return gallantry; }
            const T& operator()() const { return gallantry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct crafter_points
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "crafter_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T crafter_points;
            T& operator()() { return crafter_points; }
            const T& operator()() const { return crafter_points; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct fire_crystal_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fire_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fire_crystal_set;
            T& operator()() { return fire_crystal_set; }
            const T& operator()() const { return fire_crystal_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ice_crystal_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ice_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ice_crystal_set;
            T& operator()() { return ice_crystal_set; }
            const T& operator()() const { return ice_crystal_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct wind_crystal_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wind_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wind_crystal_set;
            T& operator()() { return wind_crystal_set; }
            const T& operator()() const { return wind_crystal_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct earth_crystal_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "earth_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T earth_crystal_set;
            T& operator()() { return earth_crystal_set; }
            const T& operator()() const { return earth_crystal_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct lightning_crystal_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lightning_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lightning_crystal_set;
            T& operator()() { return lightning_crystal_set; }
            const T& operator()() const { return lightning_crystal_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct water_crystal_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "water_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T water_crystal_set;
            T& operator()() { return water_crystal_set; }
            const T& operator()() const { return water_crystal_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct light_crystal_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "light_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T light_crystal_set;
            T& operator()() { return light_crystal_set; }
            const T& operator()() const { return light_crystal_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct dark_crystal_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dark_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dark_crystal_set;
            T& operator()() { return dark_crystal_set; }
            const T& operator()() const { return dark_crystal_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct mc_s_sr01_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mc_s_sr01_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mc_s_sr01_set;
            T& operator()() { return mc_s_sr01_set; }
            const T& operator()() const { return mc_s_sr01_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct mc_s_sr02_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mc_s_sr02_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mc_s_sr02_set;
            T& operator()() { return mc_s_sr02_set; }
            const T& operator()() const { return mc_s_sr02_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct mc_s_sr03_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mc_s_sr03_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mc_s_sr03_set;
            T& operator()() { return mc_s_sr03_set; }
            const T& operator()() const { return mc_s_sr03_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct liquefaction_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "liquefaction_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T liquefaction_spheres_set;
            T& operator()() { return liquefaction_spheres_set; }
            const T& operator()() const { return liquefaction_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct induration_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "induration_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T induration_spheres_set;
            T& operator()() { return induration_spheres_set; }
            const T& operator()() const { return induration_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct detonation_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "detonation_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T detonation_spheres_set;
            T& operator()() { return detonation_spheres_set; }
            const T& operator()() const { return detonation_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct scission_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "scission_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scission_spheres_set;
            T& operator()() { return scission_spheres_set; }
            const T& operator()() const { return scission_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct impaction_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "impaction_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T impaction_spheres_set;
            T& operator()() { return impaction_spheres_set; }
            const T& operator()() const { return impaction_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct reverberation_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reverberation_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reverberation_spheres_set;
            T& operator()() { return reverberation_spheres_set; }
            const T& operator()() const { return reverberation_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct transfixion_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "transfixion_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T transfixion_spheres_set;
            T& operator()() { return transfixion_spheres_set; }
            const T& operator()() const { return transfixion_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct compression_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "compression_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T compression_spheres_set;
            T& operator()() { return compression_spheres_set; }
            const T& operator()() const { return compression_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct fusion_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fusion_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fusion_spheres_set;
            T& operator()() { return fusion_spheres_set; }
            const T& operator()() const { return fusion_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct distortion_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "distortion_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T distortion_spheres_set;
            T& operator()() { return distortion_spheres_set; }
            const T& operator()() const { return distortion_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct fragmentation_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fragmentation_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fragmentation_spheres_set;
            T& operator()() { return fragmentation_spheres_set; }
            const T& operator()() const { return fragmentation_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct gravitation_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gravitation_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gravitation_spheres_set;
            T& operator()() { return gravitation_spheres_set; }
            const T& operator()() const { return gravitation_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct light_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "light_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T light_spheres_set;
            T& operator()() { return light_spheres_set; }
            const T& operator()() const { return light_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct darkness_spheres_set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "darkness_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T darkness_spheres_set;
            T& operator()() { return darkness_spheres_set; }
            const T& operator()() const { return darkness_spheres_set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct silver_aman_voucher
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "silver_aman_voucher";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T silver_aman_voucher;
            T& operator()() { return silver_aman_voucher; }
            const T& operator()() const { return silver_aman_voucher; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  } // namespace char_points_

  struct char_points: sqlpp::table_t<char_points,
               char_points_::charid,
               char_points_::sandoria_cp,
               char_points_::bastok_cp,
               char_points_::windurst_cp,
               char_points_::beastman_seal,
               char_points_::kindred_seal,
               char_points_::kindred_crest,
               char_points_::high_kindred_crest,
               char_points_::sacred_kindred_crest,
               char_points_::ancient_beastcoin,
               char_points_::valor_point,
               char_points_::scyld,
               char_points_::guild_fishing,
               char_points_::guild_woodworking,
               char_points_::guild_smithing,
               char_points_::guild_goldsmithing,
               char_points_::guild_weaving,
               char_points_::guild_leathercraft,
               char_points_::guild_bonecraft,
               char_points_::guild_alchemy,
               char_points_::guild_cooking,
               char_points_::cinder,
               char_points_::fire_fewell,
               char_points_::ice_fewell,
               char_points_::wind_fewell,
               char_points_::earth_fewell,
               char_points_::lightning_fewell,
               char_points_::water_fewell,
               char_points_::light_fewell,
               char_points_::dark_fewell,
               char_points_::ballista_point,
               char_points_::fellow_point,
               char_points_::daily_tally,
               char_points_::chocobuck_sandoria,
               char_points_::chocobuck_bastok,
               char_points_::chocobuck_windurst,
               char_points_::research_mark,
               char_points_::tunnel_worm,
               char_points_::morion_worm,
               char_points_::phantom_worm,
               char_points_::moblin_marble,
               char_points_::infamy,
               char_points_::prestige,
               char_points_::legion_point,
               char_points_::spark_of_eminence,
               char_points_::shining_star,
               char_points_::imperial_standing,
               char_points_::leujaoam_assault_point,
               char_points_::mamool_assault_point,
               char_points_::lebros_assault_point,
               char_points_::periqia_assault_point,
               char_points_::ilrusi_assault_point,
               char_points_::nyzul_isle_assault_point,
               char_points_::zeni_point,
               char_points_::jetton,
               char_points_::therion_ichor,
               char_points_::allied_notes,
               char_points_::aman_vouchers,
               char_points_::login_points,
               char_points_::bayld,
               char_points_::kinetic_unit,
               char_points_::obsidian_fragment,
               char_points_::lebondopt_wing,
               char_points_::pulchridopt_wing,
               char_points_::mweya_plasm,
               char_points_::cruor,
               char_points_::resistance_credit,
               char_points_::dominion_note,
               char_points_::fifth_echelon_trophy,
               char_points_::fourth_echelon_trophy,
               char_points_::third_echelon_trophy,
               char_points_::second_echelon_trophy,
               char_points_::first_echelon_trophy,
               char_points_::cave_points,
               char_points_::id_tags,
               char_points_::op_credits,
               char_points_::traverser_stones,
               char_points_::voidstones,
               char_points_::kupofried_corundums,
               char_points_::imprimaturs,
               char_points_::pheromone_sacks,
               char_points_::rems_ch1,
               char_points_::rems_ch2,
               char_points_::rems_ch3,
               char_points_::rems_ch4,
               char_points_::rems_ch5,
               char_points_::rems_ch6,
               char_points_::rems_ch7,
               char_points_::rems_ch8,
               char_points_::rems_ch9,
               char_points_::rems_ch10,
               char_points_::reclamation_marks,
               char_points_::unity_accolades,
               char_points_::fire_crystals,
               char_points_::ice_crystals,
               char_points_::wind_crystals,
               char_points_::earth_crystals,
               char_points_::lightning_crystals,
               char_points_::water_crystals,
               char_points_::light_crystals,
               char_points_::dark_crystals,
               char_points_::deeds,
               char_points_::current_accolades,
               char_points_::prev_accolades,
               char_points_::mystical_canteen,
               char_points_::ghastly_stone,
               char_points_::ghastly_stone_1,
               char_points_::ghastly_stone_2,
               char_points_::verdigris_stone,
               char_points_::verdigris_stone_1,
               char_points_::verdigris_stone_2,
               char_points_::wailing_stone,
               char_points_::wailing_stone_1,
               char_points_::wailing_stone_2,
               char_points_::snowslit_stone,
               char_points_::snowslit_stone_1,
               char_points_::snowslit_stone_2,
               char_points_::snowtip_stone,
               char_points_::snowtip_stone_1,
               char_points_::snowtip_stone_2,
               char_points_::snowdim_stone,
               char_points_::snowdim_stone_1,
               char_points_::snowdim_stone_2,
               char_points_::snoworb_stone,
               char_points_::snoworb_stone_1,
               char_points_::snoworb_stone_2,
               char_points_::leafslit_stone,
               char_points_::leafslit_stone_1,
               char_points_::leafslit_stone_2,
               char_points_::leaftip_stone,
               char_points_::leaftip_stone_1,
               char_points_::leaftip_stone_2,
               char_points_::leafdim_stone,
               char_points_::leafdim_stone_1,
               char_points_::leafdim_stone_2,
               char_points_::leaforb_stone,
               char_points_::leaforb_stone_1,
               char_points_::leaforb_stone_2,
               char_points_::duskslit_stone,
               char_points_::duskslit_stone_1,
               char_points_::duskslit_stone_2,
               char_points_::dusktip_stone,
               char_points_::dusktip_stone_1,
               char_points_::dusktip_stone_2,
               char_points_::duskdim_stone,
               char_points_::duskdim_stone_1,
               char_points_::duskdim_stone_2,
               char_points_::duskorb_stone,
               char_points_::duskorb_stone_1,
               char_points_::duskorb_stone_2,
               char_points_::pellucid_stone,
               char_points_::fern_stone,
               char_points_::taupe_stone,
               char_points_::escha_beads,
               char_points_::escha_silt,
               char_points_::potpourri,
               char_points_::current_hallmarks,
               char_points_::total_hallmarks,
               char_points_::gallantry,
               char_points_::crafter_points,
               char_points_::fire_crystal_set,
               char_points_::ice_crystal_set,
               char_points_::wind_crystal_set,
               char_points_::earth_crystal_set,
               char_points_::lightning_crystal_set,
               char_points_::water_crystal_set,
               char_points_::light_crystal_set,
               char_points_::dark_crystal_set,
               char_points_::mc_s_sr01_set,
               char_points_::mc_s_sr02_set,
               char_points_::mc_s_sr03_set,
               char_points_::liquefaction_spheres_set,
               char_points_::induration_spheres_set,
               char_points_::detonation_spheres_set,
               char_points_::scission_spheres_set,
               char_points_::impaction_spheres_set,
               char_points_::reverberation_spheres_set,
               char_points_::transfixion_spheres_set,
               char_points_::compression_spheres_set,
               char_points_::fusion_spheres_set,
               char_points_::distortion_spheres_set,
               char_points_::fragmentation_spheres_set,
               char_points_::gravitation_spheres_set,
               char_points_::light_spheres_set,
               char_points_::darkness_spheres_set,
               char_points_::silver_aman_voucher>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_points";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T char_points;
        T& operator()() { return char_points; }
        const T& operator()() const { return char_points; }
      };
    };
  };
} // namespace xidb
#endif
