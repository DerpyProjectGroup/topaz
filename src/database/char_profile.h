// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_PROFILE_H
#define XIDB_CHAR_PROFILE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace char_profile_
  {
    struct charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct rank_points
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rank_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rank_points;
            T& operator()() { return rank_points; }
            const T& operator()() const { return rank_points; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct rank_sandoria
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rank_sandoria";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rank_sandoria;
            T& operator()() { return rank_sandoria; }
            const T& operator()() const { return rank_sandoria; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct rank_bastok
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rank_bastok";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rank_bastok;
            T& operator()() { return rank_bastok; }
            const T& operator()() const { return rank_bastok; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct rank_windurst
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rank_windurst";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rank_windurst;
            T& operator()() { return rank_windurst; }
            const T& operator()() const { return rank_windurst; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct fame_sandoria
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_sandoria";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_sandoria;
            T& operator()() { return fame_sandoria; }
            const T& operator()() const { return fame_sandoria; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_bastok
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_bastok";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_bastok;
            T& operator()() { return fame_bastok; }
            const T& operator()() const { return fame_bastok; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_windurst
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_windurst";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_windurst;
            T& operator()() { return fame_windurst; }
            const T& operator()() const { return fame_windurst; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_norg
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_norg";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_norg;
            T& operator()() { return fame_norg; }
            const T& operator()() const { return fame_norg; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_jeuno
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_jeuno";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_jeuno;
            T& operator()() { return fame_jeuno; }
            const T& operator()() const { return fame_jeuno; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_aby_konschtat
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_konschtat";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_aby_konschtat;
            T& operator()() { return fame_aby_konschtat; }
            const T& operator()() const { return fame_aby_konschtat; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_aby_tahrongi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_tahrongi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_aby_tahrongi;
            T& operator()() { return fame_aby_tahrongi; }
            const T& operator()() const { return fame_aby_tahrongi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_aby_latheine
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_latheine";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_aby_latheine;
            T& operator()() { return fame_aby_latheine; }
            const T& operator()() const { return fame_aby_latheine; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_aby_misareaux
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_misareaux";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_aby_misareaux;
            T& operator()() { return fame_aby_misareaux; }
            const T& operator()() const { return fame_aby_misareaux; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_aby_vunkerl
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_vunkerl";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_aby_vunkerl;
            T& operator()() { return fame_aby_vunkerl; }
            const T& operator()() const { return fame_aby_vunkerl; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_aby_attohwa
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_attohwa";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_aby_attohwa;
            T& operator()() { return fame_aby_attohwa; }
            const T& operator()() const { return fame_aby_attohwa; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_aby_altepa
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_altepa";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_aby_altepa;
            T& operator()() { return fame_aby_altepa; }
            const T& operator()() const { return fame_aby_altepa; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_aby_grauberg
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_grauberg";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_aby_grauberg;
            T& operator()() { return fame_aby_grauberg; }
            const T& operator()() const { return fame_aby_grauberg; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_aby_uleguerand
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_uleguerand";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_aby_uleguerand;
            T& operator()() { return fame_aby_uleguerand; }
            const T& operator()() const { return fame_aby_uleguerand; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct fame_adoulin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_adoulin";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame_adoulin;
            T& operator()() { return fame_adoulin; }
            const T& operator()() const { return fame_adoulin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct unity_leader
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unity_leader";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unity_leader;
            T& operator()() { return unity_leader; }
            const T& operator()() const { return unity_leader; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace char_profile_

  struct char_profile: sqlpp::table_t<char_profile,
               char_profile_::charid,
               char_profile_::rank_points,
               char_profile_::rank_sandoria,
               char_profile_::rank_bastok,
               char_profile_::rank_windurst,
               char_profile_::fame_sandoria,
               char_profile_::fame_bastok,
               char_profile_::fame_windurst,
               char_profile_::fame_norg,
               char_profile_::fame_jeuno,
               char_profile_::fame_aby_konschtat,
               char_profile_::fame_aby_tahrongi,
               char_profile_::fame_aby_latheine,
               char_profile_::fame_aby_misareaux,
               char_profile_::fame_aby_vunkerl,
               char_profile_::fame_aby_attohwa,
               char_profile_::fame_aby_altepa,
               char_profile_::fame_aby_grauberg,
               char_profile_::fame_aby_uleguerand,
               char_profile_::fame_adoulin,
               char_profile_::unity_leader>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_profile";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T char_profile;
        T& operator()() { return char_profile; }
        const T& operator()() const { return char_profile; }
      };
    };
  };
} // namespace xidb
#endif
