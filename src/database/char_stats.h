// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_STATS_H
#define XIDB_CHAR_STATS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace char_stats_
  {
    struct charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct hp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hp;
            T& operator()() { return hp; }
            const T& operator()() const { return hp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct mp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mp;
            T& operator()() { return mp; }
            const T& operator()() const { return mp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct nameflags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nameflags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nameflags;
            T& operator()() { return nameflags; }
            const T& operator()() const { return nameflags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct mhflag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mhflag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mhflag;
            T& operator()() { return mhflag; }
            const T& operator()() const { return mhflag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct mjob
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mjob";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mjob;
            T& operator()() { return mjob; }
            const T& operator()() const { return mjob; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct sjob
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sjob";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sjob;
            T& operator()() { return sjob; }
            const T& operator()() const { return sjob; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct death
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "death";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T death;
            T& operator()() { return death; }
            const T& operator()() const { return death; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct 2h
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "2h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T 2h;
            T& operator()() { return 2h; }
            const T& operator()() const { return 2h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T title;
            T& operator()() { return title; }
            const T& operator()() const { return title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct bazaar_message
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bazaar_message";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bazaar_message;
            T& operator()() { return bazaar_message; }
            const T& operator()() const { return bazaar_message; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct zoning
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zoning";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zoning;
            T& operator()() { return zoning; }
            const T& operator()() const { return zoning; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct mlvl
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mlvl";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mlvl;
            T& operator()() { return mlvl; }
            const T& operator()() const { return mlvl; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct slvl
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slvl";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slvl;
            T& operator()() { return slvl; }
            const T& operator()() const { return slvl; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct pet_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pet_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pet_id;
            T& operator()() { return pet_id; }
            const T& operator()() const { return pet_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct pet_type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pet_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pet_type;
            T& operator()() { return pet_type; }
            const T& operator()() const { return pet_type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct pet_hp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pet_hp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pet_hp;
            T& operator()() { return pet_hp; }
            const T& operator()() const { return pet_hp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct pet_mp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pet_mp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pet_mp;
            T& operator()() { return pet_mp; }
            const T& operator()() const { return pet_mp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace char_stats_

  struct char_stats: sqlpp::table_t<char_stats,
               char_stats_::charid,
               char_stats_::hp,
               char_stats_::mp,
               char_stats_::nameflags,
               char_stats_::mhflag,
               char_stats_::mjob,
               char_stats_::sjob,
               char_stats_::death,
               char_stats_::2h,
               char_stats_::title,
               char_stats_::bazaar_message,
               char_stats_::zoning,
               char_stats_::mlvl,
               char_stats_::slvl,
               char_stats_::pet_id,
               char_stats_::pet_type,
               char_stats_::pet_hp,
               char_stats_::pet_mp>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_stats";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T char_stats;
        T& operator()() { return char_stats; }
        const T& operator()() const { return char_stats; }
      };
    };
  };
} // namespace xidb
#endif
