// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_UNLOCKS_H
#define XIDB_CHAR_UNLOCKS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace char_unlocks_
  {
    struct charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct outpost_sandy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "outpost_sandy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T outpost_sandy;
            T& operator()() { return outpost_sandy; }
            const T& operator()() const { return outpost_sandy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct outpost_bastok
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "outpost_bastok";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T outpost_bastok;
            T& operator()() { return outpost_bastok; }
            const T& operator()() const { return outpost_bastok; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct outpost_windy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "outpost_windy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T outpost_windy;
            T& operator()() { return outpost_windy; }
            const T& operator()() const { return outpost_windy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct mog_locker
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mog_locker";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mog_locker;
            T& operator()() { return mog_locker; }
            const T& operator()() const { return mog_locker; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct runic_portal
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "runic_portal";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T runic_portal;
            T& operator()() { return runic_portal; }
            const T& operator()() const { return runic_portal; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct maw
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maw";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maw;
            T& operator()() { return maw; }
            const T& operator()() const { return maw; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct campaign_sandy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "campaign_sandy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T campaign_sandy;
            T& operator()() { return campaign_sandy; }
            const T& operator()() const { return campaign_sandy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct campaign_bastok
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "campaign_bastok";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T campaign_bastok;
            T& operator()() { return campaign_bastok; }
            const T& operator()() const { return campaign_bastok; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct campaign_windy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "campaign_windy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T campaign_windy;
            T& operator()() { return campaign_windy; }
            const T& operator()() const { return campaign_windy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct homepoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "homepoints";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T homepoints;
            T& operator()() { return homepoints; }
            const T& operator()() const { return homepoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct survivals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "survivals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T survivals;
            T& operator()() { return survivals; }
            const T& operator()() const { return survivals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
  } // namespace char_unlocks_

  struct char_unlocks: sqlpp::table_t<char_unlocks,
               char_unlocks_::charid,
               char_unlocks_::outpost_sandy,
               char_unlocks_::outpost_bastok,
               char_unlocks_::outpost_windy,
               char_unlocks_::mog_locker,
               char_unlocks_::runic_portal,
               char_unlocks_::maw,
               char_unlocks_::campaign_sandy,
               char_unlocks_::campaign_bastok,
               char_unlocks_::campaign_windy,
               char_unlocks_::homepoints,
               char_unlocks_::survivals>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_unlocks";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T char_unlocks;
        T& operator()() { return char_unlocks; }
        const T& operator()() const { return char_unlocks; }
      };
    };
  };
} // namespace xidb
#endif
