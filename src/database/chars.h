// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_CHARS_H
#define XIDB_CHARS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace chars_
  {
    struct charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct accid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "accid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accid;
            T& operator()() { return accid; }
            const T& operator()() const { return accid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct charname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charname;
            T& operator()() { return charname; }
            const T& operator()() const { return charname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct nation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nation;
            T& operator()() { return nation; }
            const T& operator()() const { return nation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct pos_zone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_zone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_zone;
            T& operator()() { return pos_zone; }
            const T& operator()() const { return pos_zone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct pos_prevzone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_prevzone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_prevzone;
            T& operator()() { return pos_prevzone; }
            const T& operator()() const { return pos_prevzone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct pos_rot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_rot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_rot;
            T& operator()() { return pos_rot; }
            const T& operator()() const { return pos_rot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct pos_x
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_x;
            T& operator()() { return pos_x; }
            const T& operator()() const { return pos_x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct pos_y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_y;
            T& operator()() { return pos_y; }
            const T& operator()() const { return pos_y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct pos_z
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_z;
            T& operator()() { return pos_z; }
            const T& operator()() const { return pos_z; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct moghouse
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "moghouse";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T moghouse;
            T& operator()() { return moghouse; }
            const T& operator()() const { return moghouse; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct boundary
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "boundary";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boundary;
            T& operator()() { return boundary; }
            const T& operator()() const { return boundary; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct home_zone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "home_zone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T home_zone;
            T& operator()() { return home_zone; }
            const T& operator()() const { return home_zone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct home_rot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "home_rot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T home_rot;
            T& operator()() { return home_rot; }
            const T& operator()() const { return home_rot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct home_x
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "home_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T home_x;
            T& operator()() { return home_x; }
            const T& operator()() const { return home_x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct home_y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "home_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T home_y;
            T& operator()() { return home_y; }
            const T& operator()() const { return home_y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct home_z
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "home_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T home_z;
            T& operator()() { return home_z; }
            const T& operator()() const { return home_z; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct missions
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "missions";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T missions;
            T& operator()() { return missions; }
            const T& operator()() const { return missions; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct assault
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "assault";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T assault;
            T& operator()() { return assault; }
            const T& operator()() const { return assault; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct campaign
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "campaign";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T campaign;
            T& operator()() { return campaign; }
            const T& operator()() const { return campaign; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct eminence
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "eminence";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eminence;
            T& operator()() { return eminence; }
            const T& operator()() const { return eminence; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct quests
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quests";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quests;
            T& operator()() { return quests; }
            const T& operator()() const { return quests; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct keyitems
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "keyitems";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T keyitems;
            T& operator()() { return keyitems; }
            const T& operator()() const { return keyitems; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct set_blue_spells
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "set_blue_spells";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T set_blue_spells;
            T& operator()() { return set_blue_spells; }
            const T& operator()() const { return set_blue_spells; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct abilities
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abilities";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abilities;
            T& operator()() { return abilities; }
            const T& operator()() const { return abilities; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct weaponskills
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "weaponskills";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T weaponskills;
            T& operator()() { return weaponskills; }
            const T& operator()() const { return weaponskills; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct titles
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "titles";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T titles;
            T& operator()() { return titles; }
            const T& operator()() const { return titles; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct zones
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zones";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zones;
            T& operator()() { return zones; }
            const T& operator()() const { return zones; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct playtime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "playtime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playtime;
            T& operator()() { return playtime; }
            const T& operator()() const { return playtime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct unlocked_weapons
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unlocked_weapons";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unlocked_weapons;
            T& operator()() { return unlocked_weapons; }
            const T& operator()() const { return unlocked_weapons; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct gmlevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gmlevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gmlevel;
            T& operator()() { return gmlevel; }
            const T& operator()() const { return gmlevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct languages
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "languages";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T languages;
            T& operator()() { return languages; }
            const T& operator()() const { return languages; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct mentor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mentor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mentor;
            T& operator()() { return mentor; }
            const T& operator()() const { return mentor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct job_master
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "job_master";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T job_master;
            T& operator()() { return job_master; }
            const T& operator()() const { return job_master; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct campaign_allegiance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "campaign_allegiance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T campaign_allegiance;
            T& operator()() { return campaign_allegiance; }
            const T& operator()() const { return campaign_allegiance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct isstylelocked
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "isstylelocked";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isstylelocked;
            T& operator()() { return isstylelocked; }
            const T& operator()() const { return isstylelocked; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct nnameflags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nnameflags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nnameflags;
            T& operator()() { return nnameflags; }
            const T& operator()() const { return nnameflags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct moghancement
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "moghancement";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T moghancement;
            T& operator()() { return moghancement; }
            const T& operator()() const { return moghancement; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct timecreated
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timecreated";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timecreated;
            T& operator()() { return timecreated; }
            const T& operator()() const { return timecreated; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct lastupdate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lastupdate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastupdate;
            T& operator()() { return lastupdate; }
            const T& operator()() const { return lastupdate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
  } // namespace chars_

  struct chars: sqlpp::table_t<chars,
               chars_::charid,
               chars_::accid,
               chars_::charname,
               chars_::nation,
               chars_::pos_zone,
               chars_::pos_prevzone,
               chars_::pos_rot,
               chars_::pos_x,
               chars_::pos_y,
               chars_::pos_z,
               chars_::moghouse,
               chars_::boundary,
               chars_::home_zone,
               chars_::home_rot,
               chars_::home_x,
               chars_::home_y,
               chars_::home_z,
               chars_::missions,
               chars_::assault,
               chars_::campaign,
               chars_::eminence,
               chars_::quests,
               chars_::keyitems,
               chars_::set_blue_spells,
               chars_::abilities,
               chars_::weaponskills,
               chars_::titles,
               chars_::zones,
               chars_::playtime,
               chars_::unlocked_weapons,
               chars_::gmlevel,
               chars_::languages,
               chars_::mentor,
               chars_::job_master,
               chars_::campaign_allegiance,
               chars_::isstylelocked,
               chars_::nnameflags,
               chars_::moghancement,
               chars_::timecreated,
               chars_::lastupdate>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "chars";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T chars;
        T& operator()() { return chars; }
        const T& operator()() const { return chars; }
      };
    };
  };
} // namespace xidb
#endif
