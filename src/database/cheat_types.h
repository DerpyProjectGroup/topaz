// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_CHEAT_TYPES_H
#define XIDB_CHEAT_TYPES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace cheat_types_
  {
    struct cheatid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cheatid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cheatid;
            T& operator()() { return cheatid; }
            const T& operator()() const { return cheatid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct argument
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "argument";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T argument;
            T& operator()() { return argument; }
            const T& operator()() const { return argument; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct action_bitmask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "action_bitmask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T action_bitmask;
            T& operator()() { return action_bitmask; }
            const T& operator()() const { return action_bitmask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct warning_message
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "warning_message";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T warning_message;
            T& operator()() { return warning_message; }
            const T& operator()() const { return warning_message; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace cheat_types_

  struct cheat_types: sqlpp::table_t<cheat_types,
               cheat_types_::cheatid,
               cheat_types_::name,
               cheat_types_::description,
               cheat_types_::argument,
               cheat_types_::action_bitmask,
               cheat_types_::warning_message>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "cheat_types";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T cheat_types;
        T& operator()() { return cheat_types; }
        const T& operator()() const { return cheat_types; }
      };
    };
  };
} // namespace xidb
#endif
