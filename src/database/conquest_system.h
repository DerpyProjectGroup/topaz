// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_CONQUEST_SYSTEM_H
#define XIDB_CONQUEST_SYSTEM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace conquest_system_
  {
    struct region_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "region_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T region_id;
            T& operator()() { return region_id; }
            const T& operator()() const { return region_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct region_control
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "region_control";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T region_control;
            T& operator()() { return region_control; }
            const T& operator()() const { return region_control; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct region_control_prev
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "region_control_prev";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T region_control_prev;
            T& operator()() { return region_control_prev; }
            const T& operator()() const { return region_control_prev; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct sandoria_influence
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sandoria_influence";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sandoria_influence;
            T& operator()() { return sandoria_influence; }
            const T& operator()() const { return sandoria_influence; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct bastok_influence
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bastok_influence";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bastok_influence;
            T& operator()() { return bastok_influence; }
            const T& operator()() const { return bastok_influence; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct windurst_influence
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "windurst_influence";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T windurst_influence;
            T& operator()() { return windurst_influence; }
            const T& operator()() const { return windurst_influence; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct beastmen_influence
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "beastmen_influence";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T beastmen_influence;
            T& operator()() { return beastmen_influence; }
            const T& operator()() const { return beastmen_influence; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  } // namespace conquest_system_

  struct conquest_system: sqlpp::table_t<conquest_system,
               conquest_system_::region_id,
               conquest_system_::region_control,
               conquest_system_::region_control_prev,
               conquest_system_::sandoria_influence,
               conquest_system_::bastok_influence,
               conquest_system_::windurst_influence,
               conquest_system_::beastmen_influence>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "conquest_system";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T conquest_system;
        T& operator()() { return conquest_system; }
        const T& operator()() const { return conquest_system; }
      };
    };
  };
} // namespace xidb
#endif
