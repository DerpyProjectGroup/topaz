// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_ENUM_TEST_H
#define XIDB_ENUM_TEST_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace enum_test_
  {
    struct enum_fld
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "enum_fld";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T enum_fld;
            T& operator()() { return enum_fld; }
            const T& operator()() const { return enum_fld; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace enum_test_

  struct enum_test: sqlpp::table_t<enum_test,
               enum_test_::enum_fld>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "enum_test";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T enum_test;
        T& operator()() { return enum_test; }
        const T& operator()() const { return enum_test; }
      };
    };
  };
} // namespace xidb
#endif
