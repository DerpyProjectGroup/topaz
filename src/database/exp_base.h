// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_EXP_BASE_H
#define XIDB_EXP_BASE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace exp_base_
  {
    struct level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct exp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "exp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T exp;
            T& operator()() { return exp; }
            const T& operator()() const { return exp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  } // namespace exp_base_

  struct exp_base: sqlpp::table_t<exp_base,
               exp_base_::level,
               exp_base_::exp>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "exp_base";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T exp_base;
        T& operator()() { return exp_base; }
        const T& operator()() const { return exp_base; }
      };
    };
  };
} // namespace xidb
#endif
