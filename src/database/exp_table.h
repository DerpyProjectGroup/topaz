// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_EXP_TABLE_H
#define XIDB_EXP_TABLE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace exp_table_
  {
    struct level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
    struct r1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r1;
            T& operator()() { return r1; }
            const T& operator()() const { return r1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r2;
            T& operator()() { return r2; }
            const T& operator()() const { return r2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r3;
            T& operator()() { return r3; }
            const T& operator()() const { return r3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r4;
            T& operator()() { return r4; }
            const T& operator()() const { return r4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r5;
            T& operator()() { return r5; }
            const T& operator()() const { return r5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r6;
            T& operator()() { return r6; }
            const T& operator()() const { return r6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r7;
            T& operator()() { return r7; }
            const T& operator()() const { return r7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r8;
            T& operator()() { return r8; }
            const T& operator()() const { return r8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r9
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r9";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r9;
            T& operator()() { return r9; }
            const T& operator()() const { return r9; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r10
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r10";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r10;
            T& operator()() { return r10; }
            const T& operator()() const { return r10; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r11
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r11";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r11;
            T& operator()() { return r11; }
            const T& operator()() const { return r11; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r12
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r12";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r12;
            T& operator()() { return r12; }
            const T& operator()() const { return r12; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r13
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r13";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r13;
            T& operator()() { return r13; }
            const T& operator()() const { return r13; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r14
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r14";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r14;
            T& operator()() { return r14; }
            const T& operator()() const { return r14; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r15
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r15";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r15;
            T& operator()() { return r15; }
            const T& operator()() const { return r15; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r16
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r16";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r16;
            T& operator()() { return r16; }
            const T& operator()() const { return r16; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r17
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r17";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r17;
            T& operator()() { return r17; }
            const T& operator()() const { return r17; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r18
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r18";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r18;
            T& operator()() { return r18; }
            const T& operator()() const { return r18; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r19
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r19";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r19;
            T& operator()() { return r19; }
            const T& operator()() const { return r19; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct r20
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "r20";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T r20;
            T& operator()() { return r20; }
            const T& operator()() const { return r20; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace exp_table_

  struct exp_table: sqlpp::table_t<exp_table,
               exp_table_::level,
               exp_table_::r1,
               exp_table_::r2,
               exp_table_::r3,
               exp_table_::r4,
               exp_table_::r5,
               exp_table_::r6,
               exp_table_::r7,
               exp_table_::r8,
               exp_table_::r9,
               exp_table_::r10,
               exp_table_::r11,
               exp_table_::r12,
               exp_table_::r13,
               exp_table_::r14,
               exp_table_::r15,
               exp_table_::r16,
               exp_table_::r17,
               exp_table_::r18,
               exp_table_::r19,
               exp_table_::r20>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "exp_table";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T exp_table;
        T& operator()() { return exp_table; }
        const T& operator()() const { return exp_table; }
      };
    };
  };
} // namespace xidb
#endif
