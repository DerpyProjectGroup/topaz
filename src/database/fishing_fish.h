// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_FISHING_FISH_H
#define XIDB_FISHING_FISH_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace fishing_fish_
  {
    struct fishid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fishid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fishid;
            T& operator()() { return fishid; }
            const T& operator()() const { return fishid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct min
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "min";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T min;
            T& operator()() { return min; }
            const T& operator()() const { return min; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct max
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T max;
            T& operator()() { return max; }
            const T& operator()() const { return max; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct watertype
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "watertype";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T watertype;
            T& operator()() { return watertype; }
            const T& operator()() const { return watertype; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct size
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "size";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T size;
            T& operator()() { return size; }
            const T& operator()() const { return size; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct stamina
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stamina";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stamina;
            T& operator()() { return stamina; }
            const T& operator()() const { return stamina; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct log
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "log";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T log;
            T& operator()() { return log; }
            const T& operator()() const { return log; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace fishing_fish_

  struct fishing_fish: sqlpp::table_t<fishing_fish,
               fishing_fish_::fishid,
               fishing_fish_::name,
               fishing_fish_::min,
               fishing_fish_::max,
               fishing_fish_::watertype,
               fishing_fish_::size,
               fishing_fish_::stamina,
               fishing_fish_::log,
               fishing_fish_::quest>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "fishing_fish";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T fishing_fish;
        T& operator()() { return fishing_fish; }
        const T& operator()() const { return fishing_fish; }
      };
    };
  };
} // namespace xidb
#endif
