// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_GARDENING_RESULTS_H
#define XIDB_GARDENING_RESULTS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace gardening_results_
  {
    struct resultId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resultId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resultId;
            T& operator()() { return resultId; }
            const T& operator()() const { return resultId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct seed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "seed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seed;
            T& operator()() { return seed; }
            const T& operator()() const { return seed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct element1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "element1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T element1;
            T& operator()() { return element1; }
            const T& operator()() const { return element1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct element2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "element2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T element2;
            T& operator()() { return element2; }
            const T& operator()() const { return element2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct result
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "result";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T result;
            T& operator()() { return result; }
            const T& operator()() const { return result; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct min_quantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "min_quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T min_quantity;
            T& operator()() { return min_quantity; }
            const T& operator()() const { return min_quantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct max_quantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T max_quantity;
            T& operator()() { return max_quantity; }
            const T& operator()() const { return max_quantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct weight
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "weight";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T weight;
            T& operator()() { return weight; }
            const T& operator()() const { return weight; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace gardening_results_

  struct gardening_results: sqlpp::table_t<gardening_results,
               gardening_results_::resultId,
               gardening_results_::seed,
               gardening_results_::element1,
               gardening_results_::element2,
               gardening_results_::result,
               gardening_results_::min_quantity,
               gardening_results_::max_quantity,
               gardening_results_::weight>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gardening_results";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gardening_results;
        T& operator()() { return gardening_results; }
        const T& operator()() const { return gardening_results; }
      };
    };
  };
} // namespace xidb
#endif
