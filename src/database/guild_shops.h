// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_GUILD_SHOPS_H
#define XIDB_GUILD_SHOPS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace guild_shops_
  {
    struct guildid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildid;
            T& operator()() { return guildid; }
            const T& operator()() const { return guildid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct itemid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemid;
            T& operator()() { return itemid; }
            const T& operator()() const { return itemid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct min_price
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "min_price";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T min_price;
            T& operator()() { return min_price; }
            const T& operator()() const { return min_price; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct max_price
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_price";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T max_price;
            T& operator()() { return max_price; }
            const T& operator()() const { return max_price; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct max_quantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T max_quantity;
            T& operator()() { return max_quantity; }
            const T& operator()() const { return max_quantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct daily_increase
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "daily_increase";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T daily_increase;
            T& operator()() { return daily_increase; }
            const T& operator()() const { return daily_increase; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct initial_quantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "initial_quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T initial_quantity;
            T& operator()() { return initial_quantity; }
            const T& operator()() const { return initial_quantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace guild_shops_

  struct guild_shops: sqlpp::table_t<guild_shops,
               guild_shops_::guildid,
               guild_shops_::itemid,
               guild_shops_::min_price,
               guild_shops_::max_price,
               guild_shops_::max_quantity,
               guild_shops_::daily_increase,
               guild_shops_::initial_quantity>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_shops";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guild_shops;
        T& operator()() { return guild_shops; }
        const T& operator()() const { return guild_shops; }
      };
    };
  };
} // namespace xidb
#endif
