// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_ITEM_BASIC_H
#define XIDB_ITEM_BASIC_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace item_basic_
  {
    struct itemid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemid;
            T& operator()() { return itemid; }
            const T& operator()() const { return itemid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct subid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "subid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subid;
            T& operator()() { return subid; }
            const T& operator()() const { return subid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct sortname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sortname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sortname;
            T& operator()() { return sortname; }
            const T& operator()() const { return sortname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct stackSize
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stackSize";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stackSize;
            T& operator()() { return stackSize; }
            const T& operator()() const { return stackSize; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct aH
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "aH";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T aH;
            T& operator()() { return aH; }
            const T& operator()() const { return aH; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct NoSale
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "NoSale";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T NoSale;
            T& operator()() { return NoSale; }
            const T& operator()() const { return NoSale; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct BaseSell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "BaseSell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BaseSell;
            T& operator()() { return BaseSell; }
            const T& operator()() const { return BaseSell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  } // namespace item_basic_

  struct item_basic: sqlpp::table_t<item_basic,
               item_basic_::itemid,
               item_basic_::subid,
               item_basic_::name,
               item_basic_::sortname,
               item_basic_::stackSize,
               item_basic_::flags,
               item_basic_::aH,
               item_basic_::NoSale,
               item_basic_::BaseSell>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_basic";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T item_basic;
        T& operator()() { return item_basic; }
        const T& operator()() const { return item_basic; }
      };
    };
  };
} // namespace xidb
#endif
