// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_ITEM_USABLE_H
#define XIDB_ITEM_USABLE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace item_usable_
  {
    struct itemid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemid;
            T& operator()() { return itemid; }
            const T& operator()() const { return itemid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct validTargets
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "validTargets";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T validTargets;
            T& operator()() { return validTargets; }
            const T& operator()() const { return validTargets; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct activation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "activation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T activation;
            T& operator()() { return activation; }
            const T& operator()() const { return activation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct animation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animation;
            T& operator()() { return animation; }
            const T& operator()() const { return animation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct animationTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animationTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animationTime;
            T& operator()() { return animationTime; }
            const T& operator()() const { return animationTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct maxCharges
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maxCharges";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxCharges;
            T& operator()() { return maxCharges; }
            const T& operator()() const { return maxCharges; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct useDelay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "useDelay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T useDelay;
            T& operator()() { return useDelay; }
            const T& operator()() const { return useDelay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct reuseDelay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reuseDelay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reuseDelay;
            T& operator()() { return reuseDelay; }
            const T& operator()() const { return reuseDelay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct aoe
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "aoe";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T aoe;
            T& operator()() { return aoe; }
            const T& operator()() const { return aoe; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace item_usable_

  struct item_usable: sqlpp::table_t<item_usable,
               item_usable_::itemid,
               item_usable_::name,
               item_usable_::validTargets,
               item_usable_::activation,
               item_usable_::animation,
               item_usable_::animationTime,
               item_usable_::maxCharges,
               item_usable_::useDelay,
               item_usable_::reuseDelay,
               item_usable_::aoe>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_usable";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T item_usable;
        T& operator()() { return item_usable; }
        const T& operator()() const { return item_usable; }
      };
    };
  };
} // namespace xidb
#endif
