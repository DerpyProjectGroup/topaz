// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_ITEM_WEAPON_H
#define XIDB_ITEM_WEAPON_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace item_weapon_
  {
    struct itemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemId;
            T& operator()() { return itemId; }
            const T& operator()() const { return itemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct skill
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "skill";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T skill;
            T& operator()() { return skill; }
            const T& operator()() const { return skill; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct subskill
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "subskill";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subskill;
            T& operator()() { return subskill; }
            const T& operator()() const { return subskill; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct ilvl_skill
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ilvl_skill";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ilvl_skill;
            T& operator()() { return ilvl_skill; }
            const T& operator()() const { return ilvl_skill; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct ilvl_parry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ilvl_parry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ilvl_parry;
            T& operator()() { return ilvl_parry; }
            const T& operator()() const { return ilvl_parry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct ilvl_macc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ilvl_macc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ilvl_macc;
            T& operator()() { return ilvl_macc; }
            const T& operator()() const { return ilvl_macc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct dmgType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dmgType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dmgType;
            T& operator()() { return dmgType; }
            const T& operator()() const { return dmgType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct hit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hit;
            T& operator()() { return hit; }
            const T& operator()() const { return hit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct delay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "delay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T delay;
            T& operator()() { return delay; }
            const T& operator()() const { return delay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct dmg
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dmg";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dmg;
            T& operator()() { return dmg; }
            const T& operator()() const { return dmg; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct unlock_points
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unlock_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unlock_points;
            T& operator()() { return unlock_points; }
            const T& operator()() const { return unlock_points; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  } // namespace item_weapon_

  struct item_weapon: sqlpp::table_t<item_weapon,
               item_weapon_::itemId,
               item_weapon_::name,
               item_weapon_::skill,
               item_weapon_::subskill,
               item_weapon_::ilvl_skill,
               item_weapon_::ilvl_parry,
               item_weapon_::ilvl_macc,
               item_weapon_::dmgType,
               item_weapon_::hit,
               item_weapon_::delay,
               item_weapon_::dmg,
               item_weapon_::unlock_points>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_weapon";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T item_weapon;
        T& operator()() { return item_weapon; }
        const T& operator()() const { return item_weapon; }
      };
    };
  };
} // namespace xidb
#endif
