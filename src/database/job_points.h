// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_JOB_POINTS_H
#define XIDB_JOB_POINTS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace job_points_
  {
    struct job_pointid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "job_pointid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T job_pointid;
            T& operator()() { return job_pointid; }
            const T& operator()() const { return job_pointid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct upgrade
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "upgrade";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T upgrade;
            T& operator()() { return upgrade; }
            const T& operator()() const { return upgrade; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct jobs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jobs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jobs;
            T& operator()() { return jobs; }
            const T& operator()() const { return jobs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  } // namespace job_points_

  struct job_points: sqlpp::table_t<job_points,
               job_points_::job_pointid,
               job_points_::name,
               job_points_::upgrade,
               job_points_::jobs>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "job_points";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T job_points;
        T& operator()() { return job_points; }
        const T& operator()() const { return job_points; }
      };
    };
  };
} // namespace xidb
#endif
