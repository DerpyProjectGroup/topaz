// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_LINKSHELLS_H
#define XIDB_LINKSHELLS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace linkshells_
  {
    struct linkshellid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "linkshellid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T linkshellid;
            T& operator()() { return linkshellid; }
            const T& operator()() const { return linkshellid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct color
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "color";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T color;
            T& operator()() { return color; }
            const T& operator()() const { return color; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct poster
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "poster";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T poster;
            T& operator()() { return poster; }
            const T& operator()() const { return poster; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct message
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "message";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T message;
            T& operator()() { return message; }
            const T& operator()() const { return message; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct messagetime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "messagetime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T messagetime;
            T& operator()() { return messagetime; }
            const T& operator()() const { return messagetime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct postrights
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "postrights";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T postrights;
            T& operator()() { return postrights; }
            const T& operator()() const { return postrights; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct broken
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "broken";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T broken;
            T& operator()() { return broken; }
            const T& operator()() const { return broken; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace linkshells_

  struct linkshells: sqlpp::table_t<linkshells,
               linkshells_::linkshellid,
               linkshells_::name,
               linkshells_::color,
               linkshells_::poster,
               linkshells_::message,
               linkshells_::messagetime,
               linkshells_::postrights,
               linkshells_::broken>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "linkshells";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T linkshells;
        T& operator()() { return linkshells; }
        const T& operator()() const { return linkshells; }
      };
    };
  };
} // namespace xidb
#endif
