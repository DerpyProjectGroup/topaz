// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_MAGIAN_H
#define XIDB_MAGIAN_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace magian_
  {
    struct trialId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "trialId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T trialId;
            T& operator()() { return trialId; }
            const T& operator()() const { return trialId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct reqItem
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reqItem";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqItem;
            T& operator()() { return reqItem; }
            const T& operator()() const { return reqItem; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct reqItemAug1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reqItemAug1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqItemAug1;
            T& operator()() { return reqItemAug1; }
            const T& operator()() const { return reqItemAug1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct reqItemAug2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reqItemAug2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqItemAug2;
            T& operator()() { return reqItemAug2; }
            const T& operator()() const { return reqItemAug2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct reqItemAug3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reqItemAug3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqItemAug3;
            T& operator()() { return reqItemAug3; }
            const T& operator()() const { return reqItemAug3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct reqItemAug4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reqItemAug4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqItemAug4;
            T& operator()() { return reqItemAug4; }
            const T& operator()() const { return reqItemAug4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct reqItemAugValue1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reqItemAugValue1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqItemAugValue1;
            T& operator()() { return reqItemAugValue1; }
            const T& operator()() const { return reqItemAugValue1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct reqItemAugValue2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reqItemAugValue2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqItemAugValue2;
            T& operator()() { return reqItemAugValue2; }
            const T& operator()() const { return reqItemAugValue2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct reqItemAugValue3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reqItemAugValue3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqItemAugValue3;
            T& operator()() { return reqItemAugValue3; }
            const T& operator()() const { return reqItemAugValue3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct reqItemAugValue4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reqItemAugValue4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqItemAugValue4;
            T& operator()() { return reqItemAugValue4; }
            const T& operator()() const { return reqItemAugValue4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct rewardItem
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rewardItem";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rewardItem;
            T& operator()() { return rewardItem; }
            const T& operator()() const { return rewardItem; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct rewardItemAug1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rewardItemAug1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rewardItemAug1;
            T& operator()() { return rewardItemAug1; }
            const T& operator()() const { return rewardItemAug1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct rewardItemAug2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rewardItemAug2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rewardItemAug2;
            T& operator()() { return rewardItemAug2; }
            const T& operator()() const { return rewardItemAug2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct rewardItemAug3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rewardItemAug3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rewardItemAug3;
            T& operator()() { return rewardItemAug3; }
            const T& operator()() const { return rewardItemAug3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct rewardItemAug4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rewardItemAug4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rewardItemAug4;
            T& operator()() { return rewardItemAug4; }
            const T& operator()() const { return rewardItemAug4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct rewardItemAugValue1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rewardItemAugValue1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rewardItemAugValue1;
            T& operator()() { return rewardItemAugValue1; }
            const T& operator()() const { return rewardItemAugValue1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct rewardItemAugValue2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rewardItemAugValue2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rewardItemAugValue2;
            T& operator()() { return rewardItemAugValue2; }
            const T& operator()() const { return rewardItemAugValue2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct rewardItemAugValue3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rewardItemAugValue3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rewardItemAugValue3;
            T& operator()() { return rewardItemAugValue3; }
            const T& operator()() const { return rewardItemAugValue3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct rewardItemAugValue4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rewardItemAugValue4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rewardItemAugValue4;
            T& operator()() { return rewardItemAugValue4; }
            const T& operator()() const { return rewardItemAugValue4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct trialTarget
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "trialTarget";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T trialTarget;
            T& operator()() { return trialTarget; }
            const T& operator()() const { return trialTarget; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct objectiveItem
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "objectiveItem";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T objectiveItem;
            T& operator()() { return objectiveItem; }
            const T& operator()() const { return objectiveItem; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct objectiveTotal
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "objectiveTotal";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T objectiveTotal;
            T& operator()() { return objectiveTotal; }
            const T& operator()() const { return objectiveTotal; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct element
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "element";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T element;
            T& operator()() { return element; }
            const T& operator()() const { return element; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct previousTrial
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "previousTrial";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T previousTrial;
            T& operator()() { return previousTrial; }
            const T& operator()() const { return previousTrial; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
  } // namespace magian_

  struct magian: sqlpp::table_t<magian,
               magian_::trialId,
               magian_::reqItem,
               magian_::reqItemAug1,
               magian_::reqItemAug2,
               magian_::reqItemAug3,
               magian_::reqItemAug4,
               magian_::reqItemAugValue1,
               magian_::reqItemAugValue2,
               magian_::reqItemAugValue3,
               magian_::reqItemAugValue4,
               magian_::rewardItem,
               magian_::rewardItemAug1,
               magian_::rewardItemAug2,
               magian_::rewardItemAug3,
               magian_::rewardItemAug4,
               magian_::rewardItemAugValue1,
               magian_::rewardItemAugValue2,
               magian_::rewardItemAugValue3,
               magian_::rewardItemAugValue4,
               magian_::trialTarget,
               magian_::objectiveItem,
               magian_::objectiveTotal,
               magian_::element,
               magian_::previousTrial>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "magian";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T magian;
        T& operator()() { return magian; }
        const T& operator()() const { return magian; }
      };
    };
  };
} // namespace xidb
#endif
