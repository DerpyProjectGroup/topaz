// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_MOB_POOLS_H
#define XIDB_MOB_POOLS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace mob_pools_
  {
    struct poolid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "poolid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T poolid;
            T& operator()() { return poolid; }
            const T& operator()() const { return poolid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct packet_name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "packet_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T packet_name;
            T& operator()() { return packet_name; }
            const T& operator()() const { return packet_name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct familyid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "familyid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T familyid;
            T& operator()() { return familyid; }
            const T& operator()() const { return familyid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct modelid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "modelid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modelid;
            T& operator()() { return modelid; }
            const T& operator()() const { return modelid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct mJob
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mJob";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mJob;
            T& operator()() { return mJob; }
            const T& operator()() const { return mJob; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct sJob
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sJob";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sJob;
            T& operator()() { return sJob; }
            const T& operator()() const { return sJob; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct cmbSkill
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cmbSkill";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cmbSkill;
            T& operator()() { return cmbSkill; }
            const T& operator()() const { return cmbSkill; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct cmbDelay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cmbDelay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cmbDelay;
            T& operator()() { return cmbDelay; }
            const T& operator()() const { return cmbDelay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct cmbDmgMult
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cmbDmgMult";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cmbDmgMult;
            T& operator()() { return cmbDmgMult; }
            const T& operator()() const { return cmbDmgMult; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct behavior
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "behavior";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T behavior;
            T& operator()() { return behavior; }
            const T& operator()() const { return behavior; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct aggro
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "aggro";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T aggro;
            T& operator()() { return aggro; }
            const T& operator()() const { return aggro; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct true_detection
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "true_detection";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T true_detection;
            T& operator()() { return true_detection; }
            const T& operator()() const { return true_detection; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct links
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "links";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T links;
            T& operator()() { return links; }
            const T& operator()() const { return links; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct mobType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mobType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mobType;
            T& operator()() { return mobType; }
            const T& operator()() const { return mobType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct immunity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "immunity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T immunity;
            T& operator()() { return immunity; }
            const T& operator()() const { return immunity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct name_prefix
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name_prefix";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name_prefix;
            T& operator()() { return name_prefix; }
            const T& operator()() const { return name_prefix; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct flag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "flag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flag;
            T& operator()() { return flag; }
            const T& operator()() const { return flag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct entityFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entityFlags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityFlags;
            T& operator()() { return entityFlags; }
            const T& operator()() const { return entityFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct animationsub
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animationsub";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animationsub;
            T& operator()() { return animationsub; }
            const T& operator()() const { return animationsub; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct hasSpellScript
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hasSpellScript";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasSpellScript;
            T& operator()() { return hasSpellScript; }
            const T& operator()() const { return hasSpellScript; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct spellList
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spellList";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellList;
            T& operator()() { return spellList; }
            const T& operator()() const { return spellList; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct namevis
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "namevis";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T namevis;
            T& operator()() { return namevis; }
            const T& operator()() const { return namevis; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct roamflag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "roamflag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T roamflag;
            T& operator()() { return roamflag; }
            const T& operator()() const { return roamflag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct skill_list_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "skill_list_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T skill_list_id;
            T& operator()() { return skill_list_id; }
            const T& operator()() const { return skill_list_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct resist_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resist_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resist_id;
            T& operator()() { return resist_id; }
            const T& operator()() const { return resist_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace mob_pools_

  struct mob_pools: sqlpp::table_t<mob_pools,
               mob_pools_::poolid,
               mob_pools_::name,
               mob_pools_::packet_name,
               mob_pools_::familyid,
               mob_pools_::modelid,
               mob_pools_::mJob,
               mob_pools_::sJob,
               mob_pools_::cmbSkill,
               mob_pools_::cmbDelay,
               mob_pools_::cmbDmgMult,
               mob_pools_::behavior,
               mob_pools_::aggro,
               mob_pools_::true_detection,
               mob_pools_::links,
               mob_pools_::mobType,
               mob_pools_::immunity,
               mob_pools_::name_prefix,
               mob_pools_::flag,
               mob_pools_::entityFlags,
               mob_pools_::animationsub,
               mob_pools_::hasSpellScript,
               mob_pools_::spellList,
               mob_pools_::namevis,
               mob_pools_::roamflag,
               mob_pools_::skill_list_id,
               mob_pools_::resist_id>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mob_pools";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mob_pools;
        T& operator()() { return mob_pools; }
        const T& operator()() const { return mob_pools; }
      };
    };
  };
} // namespace xidb
#endif
