// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_MOB_RESISTANCES_H
#define XIDB_MOB_RESISTANCES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace mob_resistances_
  {
    struct resist_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resist_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resist_id;
            T& operator()() { return resist_id; }
            const T& operator()() const { return resist_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct slash_sdt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slash_sdt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slash_sdt;
            T& operator()() { return slash_sdt; }
            const T& operator()() const { return slash_sdt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct pierce_sdt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pierce_sdt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pierce_sdt;
            T& operator()() { return pierce_sdt; }
            const T& operator()() const { return pierce_sdt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct h2h_sdt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h2h_sdt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h2h_sdt;
            T& operator()() { return h2h_sdt; }
            const T& operator()() const { return h2h_sdt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct impact_sdt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "impact_sdt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T impact_sdt;
            T& operator()() { return impact_sdt; }
            const T& operator()() const { return impact_sdt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct fire_sdt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fire_sdt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fire_sdt;
            T& operator()() { return fire_sdt; }
            const T& operator()() const { return fire_sdt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct ice_sdt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ice_sdt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ice_sdt;
            T& operator()() { return ice_sdt; }
            const T& operator()() const { return ice_sdt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct wind_sdt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wind_sdt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wind_sdt;
            T& operator()() { return wind_sdt; }
            const T& operator()() const { return wind_sdt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct earth_sdt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "earth_sdt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T earth_sdt;
            T& operator()() { return earth_sdt; }
            const T& operator()() const { return earth_sdt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct lightning_sdt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lightning_sdt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lightning_sdt;
            T& operator()() { return lightning_sdt; }
            const T& operator()() const { return lightning_sdt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct water_sdt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "water_sdt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T water_sdt;
            T& operator()() { return water_sdt; }
            const T& operator()() const { return water_sdt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct light_sdt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "light_sdt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T light_sdt;
            T& operator()() { return light_sdt; }
            const T& operator()() const { return light_sdt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct dark_sdt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dark_sdt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dark_sdt;
            T& operator()() { return dark_sdt; }
            const T& operator()() const { return dark_sdt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct fire_res
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fire_res";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fire_res;
            T& operator()() { return fire_res; }
            const T& operator()() const { return fire_res; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct ice_res
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ice_res";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ice_res;
            T& operator()() { return ice_res; }
            const T& operator()() const { return ice_res; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct wind_res
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wind_res";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wind_res;
            T& operator()() { return wind_res; }
            const T& operator()() const { return wind_res; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct earth_res
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "earth_res";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T earth_res;
            T& operator()() { return earth_res; }
            const T& operator()() const { return earth_res; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct lightning_res
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lightning_res";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lightning_res;
            T& operator()() { return lightning_res; }
            const T& operator()() const { return lightning_res; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct water_res
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "water_res";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T water_res;
            T& operator()() { return water_res; }
            const T& operator()() const { return water_res; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct light_res
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "light_res";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T light_res;
            T& operator()() { return light_res; }
            const T& operator()() const { return light_res; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct dark_res
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dark_res";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dark_res;
            T& operator()() { return dark_res; }
            const T& operator()() const { return dark_res; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  } // namespace mob_resistances_

  struct mob_resistances: sqlpp::table_t<mob_resistances,
               mob_resistances_::resist_id,
               mob_resistances_::name,
               mob_resistances_::slash_sdt,
               mob_resistances_::pierce_sdt,
               mob_resistances_::h2h_sdt,
               mob_resistances_::impact_sdt,
               mob_resistances_::fire_sdt,
               mob_resistances_::ice_sdt,
               mob_resistances_::wind_sdt,
               mob_resistances_::earth_sdt,
               mob_resistances_::lightning_sdt,
               mob_resistances_::water_sdt,
               mob_resistances_::light_sdt,
               mob_resistances_::dark_sdt,
               mob_resistances_::fire_res,
               mob_resistances_::ice_res,
               mob_resistances_::wind_res,
               mob_resistances_::earth_res,
               mob_resistances_::lightning_res,
               mob_resistances_::water_res,
               mob_resistances_::light_res,
               mob_resistances_::dark_res>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mob_resistances";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mob_resistances;
        T& operator()() { return mob_resistances; }
        const T& operator()() const { return mob_resistances; }
      };
    };
  };
} // namespace xidb
#endif
