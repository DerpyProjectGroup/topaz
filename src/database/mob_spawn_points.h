// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_MOB_SPAWN_POINTS_H
#define XIDB_MOB_SPAWN_POINTS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace mob_spawn_points_
  {
    struct mobid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mobid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mobid;
            T& operator()() { return mobid; }
            const T& operator()() const { return mobid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct mobname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mobname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mobname;
            T& operator()() { return mobname; }
            const T& operator()() const { return mobname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct polutils_name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "polutils_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T polutils_name;
            T& operator()() { return polutils_name; }
            const T& operator()() const { return polutils_name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct groupid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "groupid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupid;
            T& operator()() { return groupid; }
            const T& operator()() const { return groupid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct pos_x
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_x;
            T& operator()() { return pos_x; }
            const T& operator()() const { return pos_x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct pos_y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_y;
            T& operator()() { return pos_y; }
            const T& operator()() const { return pos_y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct pos_z
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_z;
            T& operator()() { return pos_z; }
            const T& operator()() const { return pos_z; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct pos_rot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_rot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_rot;
            T& operator()() { return pos_rot; }
            const T& operator()() const { return pos_rot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace mob_spawn_points_

  struct mob_spawn_points: sqlpp::table_t<mob_spawn_points,
               mob_spawn_points_::mobid,
               mob_spawn_points_::mobname,
               mob_spawn_points_::polutils_name,
               mob_spawn_points_::groupid,
               mob_spawn_points_::pos_x,
               mob_spawn_points_::pos_y,
               mob_spawn_points_::pos_z,
               mob_spawn_points_::pos_rot>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mob_spawn_points";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mob_spawn_points;
        T& operator()() { return mob_spawn_points; }
        const T& operator()() const { return mob_spawn_points; }
      };
    };
  };
} // namespace xidb
#endif
