// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_MOB_SPELL_LISTS_H
#define XIDB_MOB_SPELL_LISTS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace mob_spell_lists_
  {
    struct spell_list_name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell_list_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell_list_name;
            T& operator()() { return spell_list_name; }
            const T& operator()() const { return spell_list_name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct spell_list_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell_list_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell_list_id;
            T& operator()() { return spell_list_id; }
            const T& operator()() const { return spell_list_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct spell_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell_id;
            T& operator()() { return spell_id; }
            const T& operator()() const { return spell_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct min_level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "min_level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T min_level;
            T& operator()() { return min_level; }
            const T& operator()() const { return min_level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct max_level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T max_level;
            T& operator()() { return max_level; }
            const T& operator()() const { return max_level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
  } // namespace mob_spell_lists_

  struct mob_spell_lists: sqlpp::table_t<mob_spell_lists,
               mob_spell_lists_::spell_list_name,
               mob_spell_lists_::spell_list_id,
               mob_spell_lists_::spell_id,
               mob_spell_lists_::min_level,
               mob_spell_lists_::max_level>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mob_spell_lists";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mob_spell_lists;
        T& operator()() { return mob_spell_lists; }
        const T& operator()() const { return mob_spell_lists; }
      };
    };
  };
} // namespace xidb
#endif
