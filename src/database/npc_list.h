// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_NPC_LIST_H
#define XIDB_NPC_LIST_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace npc_list_
  {
    struct npcid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "npcid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T npcid;
            T& operator()() { return npcid; }
            const T& operator()() const { return npcid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct polutils_name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "polutils_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T polutils_name;
            T& operator()() { return polutils_name; }
            const T& operator()() const { return polutils_name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct pos_rot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_rot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_rot;
            T& operator()() { return pos_rot; }
            const T& operator()() const { return pos_rot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct pos_x
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_x;
            T& operator()() { return pos_x; }
            const T& operator()() const { return pos_x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct pos_y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_y;
            T& operator()() { return pos_y; }
            const T& operator()() const { return pos_y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct pos_z
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_z;
            T& operator()() { return pos_z; }
            const T& operator()() const { return pos_z; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct flag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "flag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flag;
            T& operator()() { return flag; }
            const T& operator()() const { return flag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct speed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "speed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speed;
            T& operator()() { return speed; }
            const T& operator()() const { return speed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct speedsub
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "speedsub";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speedsub;
            T& operator()() { return speedsub; }
            const T& operator()() const { return speedsub; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct animation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animation;
            T& operator()() { return animation; }
            const T& operator()() const { return animation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct animationsub
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animationsub";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animationsub;
            T& operator()() { return animationsub; }
            const T& operator()() const { return animationsub; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct namevis
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "namevis";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T namevis;
            T& operator()() { return namevis; }
            const T& operator()() const { return namevis; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct entityFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entityFlags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityFlags;
            T& operator()() { return entityFlags; }
            const T& operator()() const { return entityFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct look
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "look";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T look;
            T& operator()() { return look; }
            const T& operator()() const { return look; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct name_prefix
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name_prefix";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name_prefix;
            T& operator()() { return name_prefix; }
            const T& operator()() const { return name_prefix; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct content_tag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "content_tag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T content_tag;
            T& operator()() { return content_tag; }
            const T& operator()() const { return content_tag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct widescan
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "widescan";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T widescan;
            T& operator()() { return widescan; }
            const T& operator()() const { return widescan; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace npc_list_

  struct npc_list: sqlpp::table_t<npc_list,
               npc_list_::npcid,
               npc_list_::name,
               npc_list_::polutils_name,
               npc_list_::pos_rot,
               npc_list_::pos_x,
               npc_list_::pos_y,
               npc_list_::pos_z,
               npc_list_::flag,
               npc_list_::speed,
               npc_list_::speedsub,
               npc_list_::animation,
               npc_list_::animationsub,
               npc_list_::namevis,
               npc_list_::status,
               npc_list_::entityFlags,
               npc_list_::look,
               npc_list_::name_prefix,
               npc_list_::content_tag,
               npc_list_::widescan>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "npc_list";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T npc_list;
        T& operator()() { return npc_list; }
        const T& operator()() const { return npc_list; }
      };
    };
  };
} // namespace xidb
#endif
