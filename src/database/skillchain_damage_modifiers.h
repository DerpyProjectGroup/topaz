// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_SKILLCHAIN_DAMAGE_MODIFIERS_H
#define XIDB_SKILLCHAIN_DAMAGE_MODIFIERS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace skillchain_damage_modifiers_
  {
    struct chain_level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chain_level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chain_level;
            T& operator()() { return chain_level; }
            const T& operator()() const { return chain_level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
    struct chain_count
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chain_count";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chain_count;
            T& operator()() { return chain_count; }
            const T& operator()() const { return chain_count; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
    struct initial_modifier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "initial_modifier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T initial_modifier;
            T& operator()() { return initial_modifier; }
            const T& operator()() const { return initial_modifier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct magic_burst_modifier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "magic_burst_modifier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T magic_burst_modifier;
            T& operator()() { return magic_burst_modifier; }
            const T& operator()() const { return magic_burst_modifier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  } // namespace skillchain_damage_modifiers_

  struct skillchain_damage_modifiers: sqlpp::table_t<skillchain_damage_modifiers,
               skillchain_damage_modifiers_::chain_level,
               skillchain_damage_modifiers_::chain_count,
               skillchain_damage_modifiers_::initial_modifier,
               skillchain_damage_modifiers_::magic_burst_modifier>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "skillchain_damage_modifiers";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T skillchain_damage_modifiers;
        T& operator()() { return skillchain_damage_modifiers; }
        const T& operator()() const { return skillchain_damage_modifiers; }
      };
    };
  };
} // namespace xidb
#endif
