// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_TEST_ENUM_H
#define XIDB_TEST_ENUM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace test_enum_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Name;
            T& operator()() { return Name; }
            const T& operator()() const { return Name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct IsActive
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "IsActive";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T IsActive;
            T& operator()() { return IsActive; }
            const T& operator()() const { return IsActive; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
  } // namespace test_enum_

  struct test_enum: sqlpp::table_t<test_enum,
               test_enum_::ID,
               test_enum_::Name,
               test_enum_::IsActive>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "test_enum";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T test_enum;
        T& operator()() { return test_enum; }
        const T& operator()() const { return test_enum; }
      };
    };
  };
} // namespace xidb
#endif
