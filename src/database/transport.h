// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_TRANSPORT_H
#define XIDB_TRANSPORT_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace transport_
  {
    struct id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct transport
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "transport";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T transport;
            T& operator()() { return transport; }
            const T& operator()() const { return transport; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct door
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "door";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T door;
            T& operator()() { return door; }
            const T& operator()() const { return door; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct dock_x
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dock_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dock_x;
            T& operator()() { return dock_x; }
            const T& operator()() const { return dock_x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct dock_y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dock_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dock_y;
            T& operator()() { return dock_y; }
            const T& operator()() const { return dock_y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct dock_z
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dock_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dock_z;
            T& operator()() { return dock_z; }
            const T& operator()() const { return dock_z; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct dock_rot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dock_rot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dock_rot;
            T& operator()() { return dock_rot; }
            const T& operator()() const { return dock_rot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct boundary
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "boundary";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boundary;
            T& operator()() { return boundary; }
            const T& operator()() const { return boundary; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct anim_arrive
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "anim_arrive";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T anim_arrive;
            T& operator()() { return anim_arrive; }
            const T& operator()() const { return anim_arrive; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct anim_depart
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "anim_depart";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T anim_depart;
            T& operator()() { return anim_depart; }
            const T& operator()() const { return anim_depart; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct time_offset
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_offset";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time_offset;
            T& operator()() { return time_offset; }
            const T& operator()() const { return time_offset; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct time_interval
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_interval";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time_interval;
            T& operator()() { return time_interval; }
            const T& operator()() const { return time_interval; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct time_anim_arrive
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_anim_arrive";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time_anim_arrive;
            T& operator()() { return time_anim_arrive; }
            const T& operator()() const { return time_anim_arrive; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct time_waiting
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_waiting";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time_waiting;
            T& operator()() { return time_waiting; }
            const T& operator()() const { return time_waiting; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct time_anim_depart
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_anim_depart";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time_anim_depart;
            T& operator()() { return time_anim_depart; }
            const T& operator()() const { return time_anim_depart; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct zone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zone;
            T& operator()() { return zone; }
            const T& operator()() const { return zone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace transport_

  struct transport: sqlpp::table_t<transport,
               transport_::id,
               transport_::name,
               transport_::transport,
               transport_::door,
               transport_::dock_x,
               transport_::dock_y,
               transport_::dock_z,
               transport_::dock_rot,
               transport_::boundary,
               transport_::anim_arrive,
               transport_::anim_depart,
               transport_::time_offset,
               transport_::time_interval,
               transport_::time_anim_arrive,
               transport_::time_waiting,
               transport_::time_anim_depart,
               transport_::zone>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "transport";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T transport;
        T& operator()() { return transport; }
        const T& operator()() const { return transport; }
      };
    };
  };
} // namespace xidb
#endif
