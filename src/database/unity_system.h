// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_UNITY_SYSTEM_H
#define XIDB_UNITY_SYSTEM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace unity_system_
  {
    struct leader
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leader";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leader;
            T& operator()() { return leader; }
            const T& operator()() const { return leader; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
    struct members_current
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "members_current";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T members_current;
            T& operator()() { return members_current; }
            const T& operator()() const { return members_current; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct points_current
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "points_current";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T points_current;
            T& operator()() { return points_current; }
            const T& operator()() const { return points_current; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct members_prev
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "members_prev";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T members_prev;
            T& operator()() { return members_prev; }
            const T& operator()() const { return members_prev; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct points_prev
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "points_prev";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T points_prev;
            T& operator()() { return points_prev; }
            const T& operator()() const { return points_prev; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  } // namespace unity_system_

  struct unity_system: sqlpp::table_t<unity_system,
               unity_system_::leader,
               unity_system_::members_current,
               unity_system_::points_current,
               unity_system_::members_prev,
               unity_system_::points_prev>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "unity_system";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T unity_system;
        T& operator()() { return unity_system; }
        const T& operator()() const { return unity_system; }
      };
    };
  };
} // namespace xidb
#endif
