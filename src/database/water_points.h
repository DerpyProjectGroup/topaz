// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_WATER_POINTS_H
#define XIDB_WATER_POINTS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace water_points_
  {
    struct waterid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "waterid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T waterid;
            T& operator()() { return waterid; }
            const T& operator()() const { return waterid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct zoneid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zoneid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zoneid;
            T& operator()() { return zoneid; }
            const T& operator()() const { return zoneid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct pointid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pointid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pointid;
            T& operator()() { return pointid; }
            const T& operator()() const { return pointid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct pos_x
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_x;
            T& operator()() { return pos_x; }
            const T& operator()() const { return pos_x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct pos_y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_y;
            T& operator()() { return pos_y; }
            const T& operator()() const { return pos_y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct pos_z
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pos_z;
            T& operator()() { return pos_z; }
            const T& operator()() const { return pos_z; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  } // namespace water_points_

  struct water_points: sqlpp::table_t<water_points,
               water_points_::waterid,
               water_points_::zoneid,
               water_points_::type,
               water_points_::pointid,
               water_points_::pos_x,
               water_points_::pos_y,
               water_points_::pos_z>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "water_points";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T water_points;
        T& operator()() { return water_points; }
        const T& operator()() const { return water_points; }
      };
    };
  };
} // namespace xidb
#endif
