// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_WEAPON_SKILLS_H
#define XIDB_WEAPON_SKILLS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace weapon_skills_
  {
    struct weaponskillid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "weaponskillid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T weaponskillid;
            T& operator()() { return weaponskillid; }
            const T& operator()() const { return weaponskillid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct jobs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jobs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jobs;
            T& operator()() { return jobs; }
            const T& operator()() const { return jobs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct skilllevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "skilllevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T skilllevel;
            T& operator()() { return skilllevel; }
            const T& operator()() const { return skilllevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct element
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "element";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T element;
            T& operator()() { return element; }
            const T& operator()() const { return element; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct animation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animation;
            T& operator()() { return animation; }
            const T& operator()() const { return animation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct animationTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animationTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animationTime;
            T& operator()() { return animationTime; }
            const T& operator()() const { return animationTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct range
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "range";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T range;
            T& operator()() { return range; }
            const T& operator()() const { return range; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct aoe
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "aoe";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T aoe;
            T& operator()() { return aoe; }
            const T& operator()() const { return aoe; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct primary_sc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "primary_sc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T primary_sc;
            T& operator()() { return primary_sc; }
            const T& operator()() const { return primary_sc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct secondary_sc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "secondary_sc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T secondary_sc;
            T& operator()() { return secondary_sc; }
            const T& operator()() const { return secondary_sc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct tertiary_sc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tertiary_sc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tertiary_sc;
            T& operator()() { return tertiary_sc; }
            const T& operator()() const { return tertiary_sc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct main_only
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "main_only";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T main_only;
            T& operator()() { return main_only; }
            const T& operator()() const { return main_only; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct unlock_id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unlock_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unlock_id;
            T& operator()() { return unlock_id; }
            const T& operator()() const { return unlock_id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  } // namespace weapon_skills_

  struct weapon_skills: sqlpp::table_t<weapon_skills,
               weapon_skills_::weaponskillid,
               weapon_skills_::name,
               weapon_skills_::jobs,
               weapon_skills_::type,
               weapon_skills_::skilllevel,
               weapon_skills_::element,
               weapon_skills_::animation,
               weapon_skills_::animationTime,
               weapon_skills_::range,
               weapon_skills_::aoe,
               weapon_skills_::primary_sc,
               weapon_skills_::secondary_sc,
               weapon_skills_::tertiary_sc,
               weapon_skills_::main_only,
               weapon_skills_::unlock_id>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "weapon_skills";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T weapon_skills;
        T& operator()() { return weapon_skills; }
        const T& operator()() const { return weapon_skills; }
      };
    };
  };
} // namespace xidb
#endif
