// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp xidb.sql ../src/database/xidb xidb
#ifndef XIDB_XIDB_H
#define XIDB_XIDB_H

#include <sqlpp11/char_sequence.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/table.h>

namespace xidb
{
    namespace Abilities_
    {
        struct AbilityId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "abilityId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  abilityId;
                    T& operator()()
                    {
                        return abilityId;
                    }
                    const T& operator()() const
                    {
                        return abilityId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
        struct Job
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "job";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  job;
                    T& operator()()
                    {
                        return job;
                    }
                    const T& operator()() const
                    {
                        return job;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Level
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "level";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  level;
                    T& operator()()
                    {
                        return level;
                    }
                    const T& operator()() const
                    {
                        return level;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct ValidTarget
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "validTarget";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  validTarget;
                    T& operator()()
                    {
                        return validTarget;
                    }
                    const T& operator()() const
                    {
                        return validTarget;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct RecastTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "recastTime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  recastTime;
                    T& operator()()
                    {
                        return recastTime;
                    }
                    const T& operator()() const
                    {
                        return recastTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct RecastId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "recastId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  recastId;
                    T& operator()()
                    {
                        return recastId;
                    }
                    const T& operator()() const
                    {
                        return recastId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Message1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "message1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  message1;
                    T& operator()()
                    {
                        return message1;
                    }
                    const T& operator()() const
                    {
                        return message1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Message2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "message2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  message2;
                    T& operator()()
                    {
                        return message2;
                    }
                    const T& operator()() const
                    {
                        return message2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Animation
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "animation";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animation;
                    T& operator()()
                    {
                        return animation;
                    }
                    const T& operator()() const
                    {
                        return animation;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct AnimationTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "animationTime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animationTime;
                    T& operator()()
                    {
                        return animationTime;
                    }
                    const T& operator()() const
                    {
                        return animationTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct CastTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "castTime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  castTime;
                    T& operator()()
                    {
                        return castTime;
                    }
                    const T& operator()() const
                    {
                        return castTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ActionType
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "actionType";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  actionType;
                    T& operator()()
                    {
                        return actionType;
                    }
                    const T& operator()() const
                    {
                        return actionType;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Range
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "range";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  range;
                    T& operator()()
                    {
                        return range;
                    }
                    const T& operator()() const
                    {
                        return range;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct IsAOE
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "isAOE";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  isAOE;
                    T& operator()()
                    {
                        return isAOE;
                    }
                    const T& operator()() const
                    {
                        return isAOE;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct CE
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "CE";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  CE;
                    T& operator()()
                    {
                        return CE;
                    }
                    const T& operator()() const
                    {
                        return CE;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct VE
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "VE";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  VE;
                    T& operator()()
                    {
                        return VE;
                    }
                    const T& operator()() const
                    {
                        return VE;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct MeritModID
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "meritModID";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  meritModID;
                    T& operator()()
                    {
                        return meritModID;
                    }
                    const T& operator()() const
                    {
                        return meritModID;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct AddType
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "addType";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  addType;
                    T& operator()()
                    {
                        return addType;
                    }
                    const T& operator()() const
                    {
                        return addType;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct ContentTag
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "content_tag";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  contentTag;
                    T& operator()()
                    {
                        return contentTag;
                    }
                    const T& operator()() const
                    {
                        return contentTag;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
    } // namespace Abilities_

    struct Abilities : sqlpp::table_t<Abilities,
                                      Abilities_::AbilityId,
                                      Abilities_::Name,
                                      Abilities_::Job,
                                      Abilities_::Level,
                                      Abilities_::ValidTarget,
                                      Abilities_::RecastTime,
                                      Abilities_::RecastId,
                                      Abilities_::Message1,
                                      Abilities_::Message2,
                                      Abilities_::Animation,
                                      Abilities_::AnimationTime,
                                      Abilities_::CastTime,
                                      Abilities_::ActionType,
                                      Abilities_::Range,
                                      Abilities_::IsAOE,
                                      Abilities_::CE,
                                      Abilities_::VE,
                                      Abilities_::MeritModID,
                                      Abilities_::AddType,
                                      Abilities_::ContentTag>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "abilities";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  abilities;
                T& operator()()
                {
                    return abilities;
                }
                const T& operator()() const
                {
                    return abilities;
                }
            };
        };
    };
    namespace AbilitiesCharges_
    {
        struct RecastId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "recastId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  recastId;
                    T& operator()()
                    {
                        return recastId;
                    }
                    const T& operator()() const
                    {
                        return recastId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Job
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "job";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  job;
                    T& operator()()
                    {
                        return job;
                    }
                    const T& operator()() const
                    {
                        return job;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Level
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "level";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  level;
                    T& operator()()
                    {
                        return level;
                    }
                    const T& operator()() const
                    {
                        return level;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct MaxCharges
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "maxCharges";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  maxCharges;
                    T& operator()()
                    {
                        return maxCharges;
                    }
                    const T& operator()() const
                    {
                        return maxCharges;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct ChargeTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "chargeTime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  chargeTime;
                    T& operator()()
                    {
                        return chargeTime;
                    }
                    const T& operator()() const
                    {
                        return chargeTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct MeritModID
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "meritModID";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  meritModID;
                    T& operator()()
                    {
                        return meritModID;
                    }
                    const T& operator()() const
                    {
                        return meritModID;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace AbilitiesCharges_

    struct AbilitiesCharges : sqlpp::table_t<AbilitiesCharges,
                                             AbilitiesCharges_::RecastId,
                                             AbilitiesCharges_::Job,
                                             AbilitiesCharges_::Level,
                                             AbilitiesCharges_::MaxCharges,
                                             AbilitiesCharges_::ChargeTime,
                                             AbilitiesCharges_::MeritModID>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "abilities_charges";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  abilitiesCharges;
                T& operator()()
                {
                    return abilitiesCharges;
                }
                const T& operator()() const
                {
                    return abilitiesCharges;
                }
            };
        };
    };
    namespace AccountIpRecord_
    {
        struct LoginTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "login_time";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  loginTime;
                    T& operator()()
                    {
                        return loginTime;
                    }
                    const T& operator()() const
                    {
                        return loginTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::time_point>;
        };
        struct Accid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "accid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  accid;
                    T& operator()()
                    {
                        return accid;
                    }
                    const T& operator()() const
                    {
                        return accid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
        struct ClientIp
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "client_ip";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  clientIp;
                    T& operator()()
                    {
                        return clientIp;
                    }
                    const T& operator()() const
                    {
                        return clientIp;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
    } // namespace AccountIpRecord_

    struct AccountIpRecord : sqlpp::table_t<AccountIpRecord,
                                            AccountIpRecord_::LoginTime,
                                            AccountIpRecord_::Accid,
                                            AccountIpRecord_::Charid,
                                            AccountIpRecord_::ClientIp>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "account_ip_record";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  accountIpRecord;
                T& operator()()
                {
                    return accountIpRecord;
                }
                const T& operator()() const
                {
                    return accountIpRecord;
                }
            };
        };
    };
    namespace Accounts_
    {
        struct Id
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  id;
                    T& operator()()
                    {
                        return id;
                    }
                    const T& operator()() const
                    {
                        return id;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Login
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "login";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  login;
                    T& operator()()
                    {
                        return login;
                    }
                    const T& operator()() const
                    {
                        return login;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar>;
        };
        struct Password
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "password";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  password;
                    T& operator()()
                    {
                        return password;
                    }
                    const T& operator()() const
                    {
                        return password;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar>;
        };
        struct CurrentEmail
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "current_email";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  currentEmail;
                    T& operator()()
                    {
                        return currentEmail;
                    }
                    const T& operator()() const
                    {
                        return currentEmail;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar>;
        };
        struct RegistrationEmail
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "registration_email";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  registrationEmail;
                    T& operator()()
                    {
                        return registrationEmail;
                    }
                    const T& operator()() const
                    {
                        return registrationEmail;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar>;
        };
        struct Timecreate
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "timecreate";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timecreate;
                    T& operator()()
                    {
                        return timecreate;
                    }
                    const T& operator()() const
                    {
                        return timecreate;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::time_point>;
        };
        struct Timelastmodify
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "timelastmodify";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timelastmodify;
                    T& operator()()
                    {
                        return timelastmodify;
                    }
                    const T& operator()() const
                    {
                        return timelastmodify;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::time_point>;
        };
        struct ContentIds
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "content_ids";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  contentIds;
                    T& operator()()
                    {
                        return contentIds;
                    }
                    const T& operator()() const
                    {
                        return contentIds;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Expansions
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "expansions";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  expansions;
                    T& operator()()
                    {
                        return expansions;
                    }
                    const T& operator()() const
                    {
                        return expansions;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Features
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "features";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  features;
                    T& operator()()
                    {
                        return features;
                    }
                    const T& operator()() const
                    {
                        return features;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Status
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "status";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  status;
                    T& operator()()
                    {
                        return status;
                    }
                    const T& operator()() const
                    {
                        return status;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Priv
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "priv";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  priv;
                    T& operator()()
                    {
                        return priv;
                    }
                    const T& operator()() const
                    {
                        return priv;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace Accounts_

    struct Accounts : sqlpp::table_t<Accounts,
                                     Accounts_::Id,
                                     Accounts_::Login,
                                     Accounts_::Password,
                                     Accounts_::CurrentEmail,
                                     Accounts_::RegistrationEmail,
                                     Accounts_::Timecreate,
                                     Accounts_::Timelastmodify,
                                     Accounts_::ContentIds,
                                     Accounts_::Expansions,
                                     Accounts_::Features,
                                     Accounts_::Status,
                                     Accounts_::Priv>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "accounts";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  accounts;
                T& operator()()
                {
                    return accounts;
                }
                const T& operator()() const
                {
                    return accounts;
                }
            };
        };
    };
    namespace AccountsBanned_
    {
        struct Accid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "accid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  accid;
                    T& operator()()
                    {
                        return accid;
                    }
                    const T& operator()() const
                    {
                        return accid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Timebann
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "timebann";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timebann;
                    T& operator()()
                    {
                        return timebann;
                    }
                    const T& operator()() const
                    {
                        return timebann;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::time_point>;
        };
        struct Timeunbann
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "timeunbann";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timeunbann;
                    T& operator()()
                    {
                        return timeunbann;
                    }
                    const T& operator()() const
                    {
                        return timeunbann;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::time_point>;
        };
        struct Banncomment
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "banncomment";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  banncomment;
                    T& operator()()
                    {
                        return banncomment;
                    }
                    const T& operator()() const
                    {
                        return banncomment;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
    } // namespace AccountsBanned_

    struct AccountsBanned : sqlpp::table_t<AccountsBanned,
                                           AccountsBanned_::Accid,
                                           AccountsBanned_::Timebann,
                                           AccountsBanned_::Timeunbann,
                                           AccountsBanned_::Banncomment>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "accounts_banned";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  accountsBanned;
                T& operator()()
                {
                    return accountsBanned;
                }
                const T& operator()() const
                {
                    return accountsBanned;
                }
            };
        };
    };
    namespace AccountsSessions_
    {
        struct Accid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "accid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  accid;
                    T& operator()()
                    {
                        return accid;
                    }
                    const T& operator()() const
                    {
                        return accid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Targid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "targid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  targid;
                    T& operator()()
                    {
                        return targid;
                    }
                    const T& operator()() const
                    {
                        return targid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Unitychat
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "unitychat";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  unitychat;
                    T& operator()()
                    {
                        return unitychat;
                    }
                    const T& operator()() const
                    {
                        return unitychat;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Linkshellid1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "linkshellid1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  linkshellid1;
                    T& operator()()
                    {
                        return linkshellid1;
                    }
                    const T& operator()() const
                    {
                        return linkshellid1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Linkshellrank1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "linkshellrank1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  linkshellrank1;
                    T& operator()()
                    {
                        return linkshellrank1;
                    }
                    const T& operator()() const
                    {
                        return linkshellrank1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Linkshellid2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "linkshellid2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  linkshellid2;
                    T& operator()()
                    {
                        return linkshellid2;
                    }
                    const T& operator()() const
                    {
                        return linkshellid2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Linkshellrank2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "linkshellrank2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  linkshellrank2;
                    T& operator()()
                    {
                        return linkshellrank2;
                    }
                    const T& operator()() const
                    {
                        return linkshellrank2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct SessionKey
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "session_key";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sessionKey;
                    T& operator()()
                    {
                        return sessionKey;
                    }
                    const T& operator()() const
                    {
                        return sessionKey;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ServerAddr
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "server_addr";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  serverAddr;
                    T& operator()()
                    {
                        return serverAddr;
                    }
                    const T& operator()() const
                    {
                        return serverAddr;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct ServerPort
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "server_port";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  serverPort;
                    T& operator()()
                    {
                        return serverPort;
                    }
                    const T& operator()() const
                    {
                        return serverPort;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ClientAddr
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "client_addr";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  clientAddr;
                    T& operator()()
                    {
                        return clientAddr;
                    }
                    const T& operator()() const
                    {
                        return clientAddr;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct ClientPort
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "client_port";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  clientPort;
                    T& operator()()
                    {
                        return clientPort;
                    }
                    const T& operator()() const
                    {
                        return clientPort;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct VersionMismatch
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "version_mismatch";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  versionMismatch;
                    T& operator()()
                    {
                        return versionMismatch;
                    }
                    const T& operator()() const
                    {
                        return versionMismatch;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SeacomType
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "seacom_type";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  seacomType;
                    T& operator()()
                    {
                        return seacomType;
                    }
                    const T& operator()() const
                    {
                        return seacomType;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SeacomMessage
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "seacom_message";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  seacomMessage;
                    T& operator()()
                    {
                        return seacomMessage;
                    }
                    const T& operator()() const
                    {
                        return seacomMessage;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
        };
    } // namespace AccountsSessions_

    struct AccountsSessions : sqlpp::table_t<AccountsSessions,
                                             AccountsSessions_::Accid,
                                             AccountsSessions_::Charid,
                                             AccountsSessions_::Targid,
                                             AccountsSessions_::Unitychat,
                                             AccountsSessions_::Linkshellid1,
                                             AccountsSessions_::Linkshellrank1,
                                             AccountsSessions_::Linkshellid2,
                                             AccountsSessions_::Linkshellrank2,
                                             AccountsSessions_::SessionKey,
                                             AccountsSessions_::ServerAddr,
                                             AccountsSessions_::ServerPort,
                                             AccountsSessions_::ClientAddr,
                                             AccountsSessions_::ClientPort,
                                             AccountsSessions_::VersionMismatch,
                                             AccountsSessions_::SeacomType,
                                             AccountsSessions_::SeacomMessage>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "accounts_sessions";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  accountsSessions;
                T& operator()()
                {
                    return accountsSessions;
                }
                const T& operator()() const
                {
                    return accountsSessions;
                }
            };
        };
    };
    namespace AuctionHouse_
    {
        struct Id
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  id;
                    T& operator()()
                    {
                        return id;
                    }
                    const T& operator()() const
                    {
                        return id;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
        };
        struct Itemid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemid;
                    T& operator()()
                    {
                        return itemid;
                    }
                    const T& operator()() const
                    {
                        return itemid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Stack
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "stack";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  stack;
                    T& operator()()
                    {
                        return stack;
                    }
                    const T& operator()() const
                    {
                        return stack;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Seller
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "seller";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  seller;
                    T& operator()()
                    {
                        return seller;
                    }
                    const T& operator()() const
                    {
                        return seller;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct SellerName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "seller_name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sellerName;
                    T& operator()()
                    {
                        return sellerName;
                    }
                    const T& operator()() const
                    {
                        return sellerName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Date
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "date";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  date;
                    T& operator()()
                    {
                        return date;
                    }
                    const T& operator()() const
                    {
                        return date;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Price
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "price";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  price;
                    T& operator()()
                    {
                        return price;
                    }
                    const T& operator()() const
                    {
                        return price;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct BuyerName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "buyer_name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  buyerName;
                    T& operator()()
                    {
                        return buyerName;
                    }
                    const T& operator()() const
                    {
                        return buyerName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Sale
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sale";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sale;
                    T& operator()()
                    {
                        return sale;
                    }
                    const T& operator()() const
                    {
                        return sale;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct SellDate
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sell_date";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sellDate;
                    T& operator()()
                    {
                        return sellDate;
                    }
                    const T& operator()() const
                    {
                        return sellDate;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
    } // namespace AuctionHouse_

    struct AuctionHouse : sqlpp::table_t<AuctionHouse,
                                         AuctionHouse_::Id,
                                         AuctionHouse_::Itemid,
                                         AuctionHouse_::Stack,
                                         AuctionHouse_::Seller,
                                         AuctionHouse_::SellerName,
                                         AuctionHouse_::Date,
                                         AuctionHouse_::Price,
                                         AuctionHouse_::BuyerName,
                                         AuctionHouse_::Sale,
                                         AuctionHouse_::SellDate>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "auction_house";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  auctionHouse;
                T& operator()()
                {
                    return auctionHouse;
                }
                const T& operator()() const
                {
                    return auctionHouse;
                }
            };
        };
    };
    namespace AuditChat_
    {
        struct LineID
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lineID";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lineID;
                    T& operator()()
                    {
                        return lineID;
                    }
                    const T& operator()() const
                    {
                        return lineID;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
        };
        struct Speaker
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "speaker";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  speaker;
                    T& operator()()
                    {
                        return speaker;
                    }
                    const T& operator()() const
                    {
                        return speaker;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert, sqlpp::tag::can_be_null>;
        };
        struct Type
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "type";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  type;
                    T& operator()()
                    {
                        return type;
                    }
                    const T& operator()() const
                    {
                        return type;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
        struct LsName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lsName";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lsName;
                    T& operator()()
                    {
                        return lsName;
                    }
                    const T& operator()() const
                    {
                        return lsName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
        struct Recipient
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "recipient";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  recipient;
                    T& operator()()
                    {
                        return recipient;
                    }
                    const T& operator()() const
                    {
                        return recipient;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
        struct Message
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "message";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  message;
                    T& operator()()
                    {
                        return message;
                    }
                    const T& operator()() const
                    {
                        return message;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
        };
        struct Datetime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "datetime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  datetime;
                    T& operator()()
                    {
                        return datetime;
                    }
                    const T& operator()() const
                    {
                        return datetime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
        };
    } // namespace AuditChat_

    struct AuditChat : sqlpp::table_t<AuditChat,
                                      AuditChat_::LineID,
                                      AuditChat_::Speaker,
                                      AuditChat_::Type,
                                      AuditChat_::LsName,
                                      AuditChat_::Recipient,
                                      AuditChat_::Message,
                                      AuditChat_::Datetime>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "audit_chat";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  auditChat;
                T& operator()()
                {
                    return auditChat;
                }
                const T& operator()() const
                {
                    return auditChat;
                }
            };
        };
    };
    namespace AuditGm_
    {
        struct DateTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "date_time";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dateTime;
                    T& operator()()
                    {
                        return dateTime;
                    }
                    const T& operator()() const
                    {
                        return dateTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
        };
        struct GmName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "gm_name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  gmName;
                    T& operator()()
                    {
                        return gmName;
                    }
                    const T& operator()() const
                    {
                        return gmName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Command
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "command";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  command;
                    T& operator()()
                    {
                        return command;
                    }
                    const T& operator()() const
                    {
                        return command;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct FullString
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "full_string";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fullString;
                    T& operator()()
                    {
                        return fullString;
                    }
                    const T& operator()() const
                    {
                        return fullString;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
    } // namespace AuditGm_

    struct AuditGm : sqlpp::table_t<AuditGm,
                                    AuditGm_::DateTime,
                                    AuditGm_::GmName,
                                    AuditGm_::Command,
                                    AuditGm_::FullString>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "audit_gm";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  auditGm;
                T& operator()()
                {
                    return auditGm;
                }
                const T& operator()() const
                {
                    return auditGm;
                }
            };
        };
    };
    namespace Augments_
    {
        struct AugmentId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "augmentId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  augmentId;
                    T& operator()()
                    {
                        return augmentId;
                    }
                    const T& operator()() const
                    {
                        return augmentId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Multiplier
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "multiplier";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  multiplier;
                    T& operator()()
                    {
                        return multiplier;
                    }
                    const T& operator()() const
                    {
                        return multiplier;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct ModId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "modId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  modId;
                    T& operator()()
                    {
                        return modId;
                    }
                    const T& operator()() const
                    {
                        return modId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct IsPet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "isPet";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  isPet;
                    T& operator()()
                    {
                        return isPet;
                    }
                    const T& operator()() const
                    {
                        return isPet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct PetType
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "petType";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  petType;
                    T& operator()()
                    {
                        return petType;
                    }
                    const T& operator()() const
                    {
                        return petType;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace Augments_

    struct Augments : sqlpp::table_t<Augments,
                                     Augments_::AugmentId,
                                     Augments_::Multiplier,
                                     Augments_::ModId,
                                     Augments_::Value,
                                     Augments_::IsPet,
                                     Augments_::PetType>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "augments";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  augments;
                T& operator()()
                {
                    return augments;
                }
                const T& operator()() const
                {
                    return augments;
                }
            };
        };
    };
    namespace AutomatonAbilities_
    {
        struct Abilityid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "abilityid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  abilityid;
                    T& operator()()
                    {
                        return abilityid;
                    }
                    const T& operator()() const
                    {
                        return abilityid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Abilityname
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "abilityname";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  abilityname;
                    T& operator()()
                    {
                        return abilityname;
                    }
                    const T& operator()() const
                    {
                        return abilityname;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Reqframe
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reqframe";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reqframe;
                    T& operator()()
                    {
                        return reqframe;
                    }
                    const T& operator()() const
                    {
                        return reqframe;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Skilllevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "skilllevel";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  skilllevel;
                    T& operator()()
                    {
                        return skilllevel;
                    }
                    const T& operator()() const
                    {
                        return skilllevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace AutomatonAbilities_

    struct AutomatonAbilities : sqlpp::table_t<AutomatonAbilities,
                                               AutomatonAbilities_::Abilityid,
                                               AutomatonAbilities_::Abilityname,
                                               AutomatonAbilities_::Reqframe,
                                               AutomatonAbilities_::Skilllevel>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "automaton_abilities";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  automatonAbilities;
                T& operator()()
                {
                    return automatonAbilities;
                }
                const T& operator()() const
                {
                    return automatonAbilities;
                }
            };
        };
    };
    namespace AutomatonSpells_
    {
        struct Spellid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spellid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  spellid;
                    T& operator()()
                    {
                        return spellid;
                    }
                    const T& operator()() const
                    {
                        return spellid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Skilllevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "skilllevel";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  skilllevel;
                    T& operator()()
                    {
                        return skilllevel;
                    }
                    const T& operator()() const
                    {
                        return skilllevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Heads
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "heads";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  heads;
                    T& operator()()
                    {
                        return heads;
                    }
                    const T& operator()() const
                    {
                        return heads;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Enfeeble
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "enfeeble";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  enfeeble;
                    T& operator()()
                    {
                        return enfeeble;
                    }
                    const T& operator()() const
                    {
                        return enfeeble;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Immunity
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "immunity";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  immunity;
                    T& operator()()
                    {
                        return immunity;
                    }
                    const T& operator()() const
                    {
                        return immunity;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Removes
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "removes";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  removes;
                    T& operator()()
                    {
                        return removes;
                    }
                    const T& operator()() const
                    {
                        return removes;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
    } // namespace AutomatonSpells_

    struct AutomatonSpells : sqlpp::table_t<AutomatonSpells,
                                            AutomatonSpells_::Spellid,
                                            AutomatonSpells_::Skilllevel,
                                            AutomatonSpells_::Heads,
                                            AutomatonSpells_::Enfeeble,
                                            AutomatonSpells_::Immunity,
                                            AutomatonSpells_::Removes>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "automaton_spells";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  automatonSpells;
                T& operator()()
                {
                    return automatonSpells;
                }
                const T& operator()() const
                {
                    return automatonSpells;
                }
            };
        };
    };
    namespace BcnmBattlefield_
    {
        struct BcnmId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "bcnmId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  bcnmId;
                    T& operator()()
                    {
                        return bcnmId;
                    }
                    const T& operator()() const
                    {
                        return bcnmId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct BattlefieldNumber
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "battlefieldNumber";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  battlefieldNumber;
                    T& operator()()
                    {
                        return battlefieldNumber;
                    }
                    const T& operator()() const
                    {
                        return battlefieldNumber;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct MonsterId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "monsterId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  monsterId;
                    T& operator()()
                    {
                        return monsterId;
                    }
                    const T& operator()() const
                    {
                        return monsterId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
        struct Conditions
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "conditions";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  conditions;
                    T& operator()()
                    {
                        return conditions;
                    }
                    const T& operator()() const
                    {
                        return conditions;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
    } // namespace BcnmBattlefield_

    struct BcnmBattlefield : sqlpp::table_t<BcnmBattlefield,
                                            BcnmBattlefield_::BcnmId,
                                            BcnmBattlefield_::BattlefieldNumber,
                                            BcnmBattlefield_::MonsterId,
                                            BcnmBattlefield_::Conditions>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "bcnm_battlefield";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  bcnmBattlefield;
                T& operator()()
                {
                    return bcnmBattlefield;
                }
                const T& operator()() const
                {
                    return bcnmBattlefield;
                }
            };
        };
    };
    namespace BcnmInfo_
    {
        struct BcnmId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "bcnmId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  bcnmId;
                    T& operator()()
                    {
                        return bcnmId;
                    }
                    const T& operator()() const
                    {
                        return bcnmId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ZoneId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zoneId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zoneId;
                    T& operator()()
                    {
                        return zoneId;
                    }
                    const T& operator()() const
                    {
                        return zoneId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct FastestName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fastestName";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fastestName;
                    T& operator()()
                    {
                        return fastestName;
                    }
                    const T& operator()() const
                    {
                        return fastestName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct FastestPartySize
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fastestPartySize";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fastestPartySize;
                    T& operator()()
                    {
                        return fastestPartySize;
                    }
                    const T& operator()() const
                    {
                        return fastestPartySize;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct FastestTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fastestTime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fastestTime;
                    T& operator()()
                    {
                        return fastestTime;
                    }
                    const T& operator()() const
                    {
                        return fastestTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct TimeLimit
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "timeLimit";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timeLimit;
                    T& operator()()
                    {
                        return timeLimit;
                    }
                    const T& operator()() const
                    {
                        return timeLimit;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct LevelCap
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "levelCap";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  levelCap;
                    T& operator()()
                    {
                        return levelCap;
                    }
                    const T& operator()() const
                    {
                        return levelCap;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct PartySize
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "partySize";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  partySize;
                    T& operator()()
                    {
                        return partySize;
                    }
                    const T& operator()() const
                    {
                        return partySize;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct LootDropId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lootDropId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lootDropId;
                    T& operator()()
                    {
                        return lootDropId;
                    }
                    const T& operator()() const
                    {
                        return lootDropId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Rules
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rules";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rules;
                    T& operator()()
                    {
                        return rules;
                    }
                    const T& operator()() const
                    {
                        return rules;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct IsMission
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "isMission";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  isMission;
                    T& operator()()
                    {
                        return isMission;
                    }
                    const T& operator()() const
                    {
                        return isMission;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace BcnmInfo_

    struct BcnmInfo : sqlpp::table_t<BcnmInfo,
                                     BcnmInfo_::BcnmId,
                                     BcnmInfo_::ZoneId,
                                     BcnmInfo_::Name,
                                     BcnmInfo_::FastestName,
                                     BcnmInfo_::FastestPartySize,
                                     BcnmInfo_::FastestTime,
                                     BcnmInfo_::TimeLimit,
                                     BcnmInfo_::LevelCap,
                                     BcnmInfo_::PartySize,
                                     BcnmInfo_::LootDropId,
                                     BcnmInfo_::Rules,
                                     BcnmInfo_::IsMission>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "bcnm_info";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  bcnmInfo;
                T& operator()()
                {
                    return bcnmInfo;
                }
                const T& operator()() const
                {
                    return bcnmInfo;
                }
            };
        };
    };
    namespace BcnmTreasureChests_
    {
        struct BcnmId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "bcnmId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  bcnmId;
                    T& operator()()
                    {
                        return bcnmId;
                    }
                    const T& operator()() const
                    {
                        return bcnmId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct BattlefieldNumber
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "battlefieldNumber";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  battlefieldNumber;
                    T& operator()()
                    {
                        return battlefieldNumber;
                    }
                    const T& operator()() const
                    {
                        return battlefieldNumber;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct NpcId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "npcId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  npcId;
                    T& operator()()
                    {
                        return npcId;
                    }
                    const T& operator()() const
                    {
                        return npcId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
        };
    } // namespace BcnmTreasureChests_

    struct BcnmTreasureChests : sqlpp::table_t<BcnmTreasureChests,
                                               BcnmTreasureChests_::BcnmId,
                                               BcnmTreasureChests_::BattlefieldNumber,
                                               BcnmTreasureChests_::NpcId>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "bcnm_treasure_chests";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  bcnmTreasureChests;
                T& operator()()
                {
                    return bcnmTreasureChests;
                }
                const T& operator()() const
                {
                    return bcnmTreasureChests;
                }
            };
        };
    };
    namespace BlueSpellList_
    {
        struct Spellid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spellid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  spellid;
                    T& operator()()
                    {
                        return spellid;
                    }
                    const T& operator()() const
                    {
                        return spellid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
        };
        struct MobSkillId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_skill_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobSkillId;
                    T& operator()()
                    {
                        return mobSkillId;
                    }
                    const T& operator()() const
                    {
                        return mobSkillId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct SetPoints
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "set_points";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  setPoints;
                    T& operator()()
                    {
                        return setPoints;
                    }
                    const T& operator()() const
                    {
                        return setPoints;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
        };
        struct TraitCategory
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "trait_category";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  traitCategory;
                    T& operator()()
                    {
                        return traitCategory;
                    }
                    const T& operator()() const
                    {
                        return traitCategory;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
        };
        struct TraitCategoryWeight
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "trait_category_weight";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  traitCategoryWeight;
                    T& operator()()
                    {
                        return traitCategoryWeight;
                    }
                    const T& operator()() const
                    {
                        return traitCategoryWeight;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
        };
        struct PrimarySc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "primary_sc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  primarySc;
                    T& operator()()
                    {
                        return primarySc;
                    }
                    const T& operator()() const
                    {
                        return primarySc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
        };
        struct SecondarySc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "secondary_sc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  secondarySc;
                    T& operator()()
                    {
                        return secondarySc;
                    }
                    const T& operator()() const
                    {
                        return secondarySc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
        };
    } // namespace BlueSpellList_

    struct BlueSpellList : sqlpp::table_t<BlueSpellList,
                                          BlueSpellList_::Spellid,
                                          BlueSpellList_::MobSkillId,
                                          BlueSpellList_::SetPoints,
                                          BlueSpellList_::TraitCategory,
                                          BlueSpellList_::TraitCategoryWeight,
                                          BlueSpellList_::PrimarySc,
                                          BlueSpellList_::SecondarySc>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "blue_spell_list";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  blueSpellList;
                T& operator()()
                {
                    return blueSpellList;
                }
                const T& operator()() const
                {
                    return blueSpellList;
                }
            };
        };
    };
    namespace BlueSpellMods_
    {
        struct SpellId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spellId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  spellId;
                    T& operator()()
                    {
                        return spellId;
                    }
                    const T& operator()() const
                    {
                        return spellId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Modid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "modid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  modid;
                    T& operator()()
                    {
                        return modid;
                    }
                    const T& operator()() const
                    {
                        return modid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
    } // namespace BlueSpellMods_

    struct BlueSpellMods : sqlpp::table_t<BlueSpellMods,
                                          BlueSpellMods_::SpellId,
                                          BlueSpellMods_::Modid,
                                          BlueSpellMods_::Value>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "blue_spell_mods";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  blueSpellMods;
                T& operator()()
                {
                    return blueSpellMods;
                }
                const T& operator()() const
                {
                    return blueSpellMods;
                }
            };
        };
    };
    namespace BlueTraits_
    {
        struct TraitCategory
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "trait_category";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  traitCategory;
                    T& operator()()
                    {
                        return traitCategory;
                    }
                    const T& operator()() const
                    {
                        return traitCategory;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct TraitPointsNeeded
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "trait_points_needed";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  traitPointsNeeded;
                    T& operator()()
                    {
                        return traitPointsNeeded;
                    }
                    const T& operator()() const
                    {
                        return traitPointsNeeded;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Traitid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "traitid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  traitid;
                    T& operator()()
                    {
                        return traitid;
                    }
                    const T& operator()() const
                    {
                        return traitid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Modifier
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "modifier";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  modifier;
                    T& operator()()
                    {
                        return modifier;
                    }
                    const T& operator()() const
                    {
                        return modifier;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
        };
    } // namespace BlueTraits_

    struct BlueTraits : sqlpp::table_t<BlueTraits,
                                       BlueTraits_::TraitCategory,
                                       BlueTraits_::TraitPointsNeeded,
                                       BlueTraits_::Traitid,
                                       BlueTraits_::Modifier,
                                       BlueTraits_::Value>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "blue_traits";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  blueTraits;
                T& operator()()
                {
                    return blueTraits;
                }
                const T& operator()() const
                {
                    return blueTraits;
                }
            };
        };
    };
    namespace CampaignMap_
    {
        struct Id
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  id;
                    T& operator()()
                    {
                        return id;
                    }
                    const T& operator()() const
                    {
                        return id;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Zoneid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zoneid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zoneid;
                    T& operator()()
                    {
                        return zoneid;
                    }
                    const T& operator()() const
                    {
                        return zoneid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Isbattle
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "isbattle";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  isbattle;
                    T& operator()()
                    {
                        return isbattle;
                    }
                    const T& operator()() const
                    {
                        return isbattle;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Nation
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "nation";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  nation;
                    T& operator()()
                    {
                        return nation;
                    }
                    const T& operator()() const
                    {
                        return nation;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Heroism
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "heroism";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  heroism;
                    T& operator()()
                    {
                        return heroism;
                    }
                    const T& operator()() const
                    {
                        return heroism;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct InfluenceSandoria
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "influence_sandoria";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  influenceSandoria;
                    T& operator()()
                    {
                        return influenceSandoria;
                    }
                    const T& operator()() const
                    {
                        return influenceSandoria;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct InfluenceBastok
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "influence_bastok";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  influenceBastok;
                    T& operator()()
                    {
                        return influenceBastok;
                    }
                    const T& operator()() const
                    {
                        return influenceBastok;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct InfluenceWindurst
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "influence_windurst";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  influenceWindurst;
                    T& operator()()
                    {
                        return influenceWindurst;
                    }
                    const T& operator()() const
                    {
                        return influenceWindurst;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct InfluenceBeastman
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "influence_beastman";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  influenceBeastman;
                    T& operator()()
                    {
                        return influenceBeastman;
                    }
                    const T& operator()() const
                    {
                        return influenceBeastman;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct CurrentFortifications
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "current_fortifications";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  currentFortifications;
                    T& operator()()
                    {
                        return currentFortifications;
                    }
                    const T& operator()() const
                    {
                        return currentFortifications;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct CurrentResources
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "current_resources";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  currentResources;
                    T& operator()()
                    {
                        return currentResources;
                    }
                    const T& operator()() const
                    {
                        return currentResources;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct MaxFortifications
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "max_fortifications";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  maxFortifications;
                    T& operator()()
                    {
                        return maxFortifications;
                    }
                    const T& operator()() const
                    {
                        return maxFortifications;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct MaxResources
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "max_resources";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  maxResources;
                    T& operator()()
                    {
                        return maxResources;
                    }
                    const T& operator()() const
                    {
                        return maxResources;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace CampaignMap_

    struct CampaignMap : sqlpp::table_t<CampaignMap,
                                        CampaignMap_::Id,
                                        CampaignMap_::Zoneid,
                                        CampaignMap_::Isbattle,
                                        CampaignMap_::Nation,
                                        CampaignMap_::Heroism,
                                        CampaignMap_::InfluenceSandoria,
                                        CampaignMap_::InfluenceBastok,
                                        CampaignMap_::InfluenceWindurst,
                                        CampaignMap_::InfluenceBeastman,
                                        CampaignMap_::CurrentFortifications,
                                        CampaignMap_::CurrentResources,
                                        CampaignMap_::MaxFortifications,
                                        CampaignMap_::MaxResources>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "campaign_map";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  campaignMap;
                T& operator()()
                {
                    return campaignMap;
                }
                const T& operator()() const
                {
                    return campaignMap;
                }
            };
        };
    };
    namespace CampaignNation_
    {
        struct Id
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  id;
                    T& operator()()
                    {
                        return id;
                    }
                    const T& operator()() const
                    {
                        return id;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Reconnaissance
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reconnaissance";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reconnaissance;
                    T& operator()()
                    {
                        return reconnaissance;
                    }
                    const T& operator()() const
                    {
                        return reconnaissance;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Morale
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "morale";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  morale;
                    T& operator()()
                    {
                        return morale;
                    }
                    const T& operator()() const
                    {
                        return morale;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Prosperity
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "prosperity";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  prosperity;
                    T& operator()()
                    {
                        return prosperity;
                    }
                    const T& operator()() const
                    {
                        return prosperity;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace CampaignNation_

    struct CampaignNation : sqlpp::table_t<CampaignNation,
                                           CampaignNation_::Id,
                                           CampaignNation_::Reconnaissance,
                                           CampaignNation_::Morale,
                                           CampaignNation_::Prosperity>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "campaign_nation";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  campaignNation;
                T& operator()()
                {
                    return campaignNation;
                }
                const T& operator()() const
                {
                    return campaignNation;
                }
            };
        };
    };
    namespace CharBase_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Accid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "accid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  accid;
                    T& operator()()
                    {
                        return accid;
                    }
                    const T& operator()() const
                    {
                        return accid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Charname
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charname";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charname;
                    T& operator()()
                    {
                        return charname;
                    }
                    const T& operator()() const
                    {
                        return charname;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Nation
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "nation";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  nation;
                    T& operator()()
                    {
                        return nation;
                    }
                    const T& operator()() const
                    {
                        return nation;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct PosZone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_zone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posZone;
                    T& operator()()
                    {
                        return posZone;
                    }
                    const T& operator()() const
                    {
                        return posZone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct PosPrevzone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_prevzone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posPrevzone;
                    T& operator()()
                    {
                        return posPrevzone;
                    }
                    const T& operator()() const
                    {
                        return posPrevzone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct PosRot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_rot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posRot;
                    T& operator()()
                    {
                        return posRot;
                    }
                    const T& operator()() const
                    {
                        return posRot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct PosX
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_x";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posX;
                    T& operator()()
                    {
                        return posX;
                    }
                    const T& operator()() const
                    {
                        return posX;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct PosY
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_y";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posY;
                    T& operator()()
                    {
                        return posY;
                    }
                    const T& operator()() const
                    {
                        return posY;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct PosZ
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_z";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posZ;
                    T& operator()()
                    {
                        return posZ;
                    }
                    const T& operator()() const
                    {
                        return posZ;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Moghouse
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "moghouse";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  moghouse;
                    T& operator()()
                    {
                        return moghouse;
                    }
                    const T& operator()() const
                    {
                        return moghouse;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Boundary
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "boundary";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  boundary;
                    T& operator()()
                    {
                        return boundary;
                    }
                    const T& operator()() const
                    {
                        return boundary;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct HomeZone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "home_zone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  homeZone;
                    T& operator()()
                    {
                        return homeZone;
                    }
                    const T& operator()() const
                    {
                        return homeZone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct HomeRot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "home_rot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  homeRot;
                    T& operator()()
                    {
                        return homeRot;
                    }
                    const T& operator()() const
                    {
                        return homeRot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct HomeX
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "home_x";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  homeX;
                    T& operator()()
                    {
                        return homeX;
                    }
                    const T& operator()() const
                    {
                        return homeX;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct HomeY
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "home_y";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  homeY;
                    T& operator()()
                    {
                        return homeY;
                    }
                    const T& operator()() const
                    {
                        return homeY;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct HomeZ
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "home_z";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  homeZ;
                    T& operator()()
                    {
                        return homeZ;
                    }
                    const T& operator()() const
                    {
                        return homeZ;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Missions
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "missions";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  missions;
                    T& operator()()
                    {
                        return missions;
                    }
                    const T& operator()() const
                    {
                        return missions;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Assault
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "assault";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  assault;
                    T& operator()()
                    {
                        return assault;
                    }
                    const T& operator()() const
                    {
                        return assault;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Campaign
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "campaign";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  campaign;
                    T& operator()()
                    {
                        return campaign;
                    }
                    const T& operator()() const
                    {
                        return campaign;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Eminence
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "eminence";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  eminence;
                    T& operator()()
                    {
                        return eminence;
                    }
                    const T& operator()() const
                    {
                        return eminence;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Quests
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "quests";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  quests;
                    T& operator()()
                    {
                        return quests;
                    }
                    const T& operator()() const
                    {
                        return quests;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Keyitems
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "keyitems";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  keyitems;
                    T& operator()()
                    {
                        return keyitems;
                    }
                    const T& operator()() const
                    {
                        return keyitems;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct SetBlueSpells
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "set_blue_spells";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  setBlueSpells;
                    T& operator()()
                    {
                        return setBlueSpells;
                    }
                    const T& operator()() const
                    {
                        return setBlueSpells;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Abilities
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "abilities";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  abilities;
                    T& operator()()
                    {
                        return abilities;
                    }
                    const T& operator()() const
                    {
                        return abilities;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Weaponskills
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "weaponskills";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  weaponskills;
                    T& operator()()
                    {
                        return weaponskills;
                    }
                    const T& operator()() const
                    {
                        return weaponskills;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Titles
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "titles";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  titles;
                    T& operator()()
                    {
                        return titles;
                    }
                    const T& operator()() const
                    {
                        return titles;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Zones
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zones";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zones;
                    T& operator()()
                    {
                        return zones;
                    }
                    const T& operator()() const
                    {
                        return zones;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Playtime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "playtime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  playtime;
                    T& operator()()
                    {
                        return playtime;
                    }
                    const T& operator()() const
                    {
                        return playtime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct UnlockedWeapons
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "unlocked_weapons";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  unlockedWeapons;
                    T& operator()()
                    {
                        return unlockedWeapons;
                    }
                    const T& operator()() const
                    {
                        return unlockedWeapons;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Gmlevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "gmlevel";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  gmlevel;
                    T& operator()()
                    {
                        return gmlevel;
                    }
                    const T& operator()() const
                    {
                        return gmlevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Languages
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "languages";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  languages;
                    T& operator()()
                    {
                        return languages;
                    }
                    const T& operator()() const
                    {
                        return languages;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Mentor
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mentor";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mentor;
                    T& operator()()
                    {
                        return mentor;
                    }
                    const T& operator()() const
                    {
                        return mentor;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct JobMaster
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "job_master";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jobMaster;
                    T& operator()()
                    {
                        return jobMaster;
                    }
                    const T& operator()() const
                    {
                        return jobMaster;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct CampaignAllegiance
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "campaign_allegiance";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  campaignAllegiance;
                    T& operator()()
                    {
                        return campaignAllegiance;
                    }
                    const T& operator()() const
                    {
                        return campaignAllegiance;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Isstylelocked
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "isstylelocked";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  isstylelocked;
                    T& operator()()
                    {
                        return isstylelocked;
                    }
                    const T& operator()() const
                    {
                        return isstylelocked;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Nnameflags
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "nnameflags";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  nnameflags;
                    T& operator()()
                    {
                        return nnameflags;
                    }
                    const T& operator()() const
                    {
                        return nnameflags;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Moghancement
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "moghancement";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  moghancement;
                    T& operator()()
                    {
                        return moghancement;
                    }
                    const T& operator()() const
                    {
                        return moghancement;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Timecreated
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "timecreated";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timecreated;
                    T& operator()()
                    {
                        return timecreated;
                    }
                    const T& operator()() const
                    {
                        return timecreated;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Lastupdate
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lastupdate";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lastupdate;
                    T& operator()()
                    {
                        return lastupdate;
                    }
                    const T& operator()() const
                    {
                        return lastupdate;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
        };
    } // namespace CharBase_

    struct CharBase : sqlpp::table_t<CharBase,
                                     CharBase_::Charid,
                                     CharBase_::Accid,
                                     CharBase_::Charname,
                                     CharBase_::Nation,
                                     CharBase_::PosZone,
                                     CharBase_::PosPrevzone,
                                     CharBase_::PosRot,
                                     CharBase_::PosX,
                                     CharBase_::PosY,
                                     CharBase_::PosZ,
                                     CharBase_::Moghouse,
                                     CharBase_::Boundary,
                                     CharBase_::HomeZone,
                                     CharBase_::HomeRot,
                                     CharBase_::HomeX,
                                     CharBase_::HomeY,
                                     CharBase_::HomeZ,
                                     CharBase_::Missions,
                                     CharBase_::Assault,
                                     CharBase_::Campaign,
                                     CharBase_::Eminence,
                                     CharBase_::Quests,
                                     CharBase_::Keyitems,
                                     CharBase_::SetBlueSpells,
                                     CharBase_::Abilities,
                                     CharBase_::Weaponskills,
                                     CharBase_::Titles,
                                     CharBase_::Zones,
                                     CharBase_::Playtime,
                                     CharBase_::UnlockedWeapons,
                                     CharBase_::Gmlevel,
                                     CharBase_::Languages,
                                     CharBase_::Mentor,
                                     CharBase_::JobMaster,
                                     CharBase_::CampaignAllegiance,
                                     CharBase_::Isstylelocked,
                                     CharBase_::Nnameflags,
                                     CharBase_::Moghancement,
                                     CharBase_::Timecreated,
                                     CharBase_::Lastupdate>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_base";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charBase;
                T& operator()()
                {
                    return charBase;
                }
                const T& operator()() const
                {
                    return charBase;
                }
            };
        };
    };
    namespace CharBlacklist_
    {
        struct CharidOwner
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid_owner";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charidOwner;
                    T& operator()()
                    {
                        return charidOwner;
                    }
                    const T& operator()() const
                    {
                        return charidOwner;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct CharidTarget
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid_target";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charidTarget;
                    T& operator()()
                    {
                        return charidTarget;
                    }
                    const T& operator()() const
                    {
                        return charidTarget;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
    } // namespace CharBlacklist_

    struct CharBlacklist : sqlpp::table_t<CharBlacklist,
                                          CharBlacklist_::CharidOwner,
                                          CharBlacklist_::CharidTarget>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_blacklist";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charBlacklist;
                T& operator()()
                {
                    return charBlacklist;
                }
                const T& operator()() const
                {
                    return charBlacklist;
                }
            };
        };
    };
    namespace CharEffects_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Effectid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "effectid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  effectid;
                    T& operator()()
                    {
                        return effectid;
                    }
                    const T& operator()() const
                    {
                        return effectid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Icon
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "icon";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  icon;
                    T& operator()()
                    {
                        return icon;
                    }
                    const T& operator()() const
                    {
                        return icon;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Power
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "power";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  power;
                    T& operator()()
                    {
                        return power;
                    }
                    const T& operator()() const
                    {
                        return power;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Tick
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "tick";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  tick;
                    T& operator()()
                    {
                        return tick;
                    }
                    const T& operator()() const
                    {
                        return tick;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Duration
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "duration";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  duration;
                    T& operator()()
                    {
                        return duration;
                    }
                    const T& operator()() const
                    {
                        return duration;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Subid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "subid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  subid;
                    T& operator()()
                    {
                        return subid;
                    }
                    const T& operator()() const
                    {
                        return subid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Subpower
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "subpower";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  subpower;
                    T& operator()()
                    {
                        return subpower;
                    }
                    const T& operator()() const
                    {
                        return subpower;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct Tier
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "tier";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  tier;
                    T& operator()()
                    {
                        return tier;
                    }
                    const T& operator()() const
                    {
                        return tier;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Flags
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "flags";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  flags;
                    T& operator()()
                    {
                        return flags;
                    }
                    const T& operator()() const
                    {
                        return flags;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Timestamp
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "timestamp";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timestamp;
                    T& operator()()
                    {
                        return timestamp;
                    }
                    const T& operator()() const
                    {
                        return timestamp;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
    } // namespace CharEffects_

    struct CharEffects : sqlpp::table_t<CharEffects,
                                        CharEffects_::Charid,
                                        CharEffects_::Effectid,
                                        CharEffects_::Icon,
                                        CharEffects_::Power,
                                        CharEffects_::Tick,
                                        CharEffects_::Duration,
                                        CharEffects_::Subid,
                                        CharEffects_::Subpower,
                                        CharEffects_::Tier,
                                        CharEffects_::Flags,
                                        CharEffects_::Timestamp>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_effects";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charEffects;
                T& operator()()
                {
                    return charEffects;
                }
                const T& operator()() const
                {
                    return charEffects;
                }
            };
        };
    };
    namespace CharEquip_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Slotid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "slotid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  slotid;
                    T& operator()()
                    {
                        return slotid;
                    }
                    const T& operator()() const
                    {
                        return slotid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Equipslotid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "equipslotid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  equipslotid;
                    T& operator()()
                    {
                        return equipslotid;
                    }
                    const T& operator()() const
                    {
                        return equipslotid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Containerid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "containerid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  containerid;
                    T& operator()()
                    {
                        return containerid;
                    }
                    const T& operator()() const
                    {
                        return containerid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace CharEquip_

    struct CharEquip : sqlpp::table_t<CharEquip,
                                      CharEquip_::Charid,
                                      CharEquip_::Slotid,
                                      CharEquip_::Equipslotid,
                                      CharEquip_::Containerid>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_equip";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charEquip;
                T& operator()()
                {
                    return charEquip;
                }
                const T& operator()() const
                {
                    return charEquip;
                }
            };
        };
    };
    namespace CharExp_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Mode
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mode";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mode;
                    T& operator()()
                    {
                        return mode;
                    }
                    const T& operator()() const
                    {
                        return mode;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct War
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "war";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  war;
                    T& operator()()
                    {
                        return war;
                    }
                    const T& operator()() const
                    {
                        return war;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Mnk
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mnk";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mnk;
                    T& operator()()
                    {
                        return mnk;
                    }
                    const T& operator()() const
                    {
                        return mnk;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Whm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "whm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  whm;
                    T& operator()()
                    {
                        return whm;
                    }
                    const T& operator()() const
                    {
                        return whm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Blm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "blm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  blm;
                    T& operator()()
                    {
                        return blm;
                    }
                    const T& operator()() const
                    {
                        return blm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Rdm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rdm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rdm;
                    T& operator()()
                    {
                        return rdm;
                    }
                    const T& operator()() const
                    {
                        return rdm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Thf
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "thf";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  thf;
                    T& operator()()
                    {
                        return thf;
                    }
                    const T& operator()() const
                    {
                        return thf;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Pld
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pld";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pld;
                    T& operator()()
                    {
                        return pld;
                    }
                    const T& operator()() const
                    {
                        return pld;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Drk
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "drk";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  drk;
                    T& operator()()
                    {
                        return drk;
                    }
                    const T& operator()() const
                    {
                        return drk;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Bst
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "bst";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  bst;
                    T& operator()()
                    {
                        return bst;
                    }
                    const T& operator()() const
                    {
                        return bst;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Brd
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "brd";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  brd;
                    T& operator()()
                    {
                        return brd;
                    }
                    const T& operator()() const
                    {
                        return brd;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Rng
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rng";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rng;
                    T& operator()()
                    {
                        return rng;
                    }
                    const T& operator()() const
                    {
                        return rng;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Sam
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sam";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sam;
                    T& operator()()
                    {
                        return sam;
                    }
                    const T& operator()() const
                    {
                        return sam;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Nin
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "nin";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  nin;
                    T& operator()()
                    {
                        return nin;
                    }
                    const T& operator()() const
                    {
                        return nin;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Drg
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "drg";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  drg;
                    T& operator()()
                    {
                        return drg;
                    }
                    const T& operator()() const
                    {
                        return drg;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Smn
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "smn";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  smn;
                    T& operator()()
                    {
                        return smn;
                    }
                    const T& operator()() const
                    {
                        return smn;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Blu
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "blu";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  blu;
                    T& operator()()
                    {
                        return blu;
                    }
                    const T& operator()() const
                    {
                        return blu;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Cor
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "cor";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  cor;
                    T& operator()()
                    {
                        return cor;
                    }
                    const T& operator()() const
                    {
                        return cor;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Pup
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pup";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pup;
                    T& operator()()
                    {
                        return pup;
                    }
                    const T& operator()() const
                    {
                        return pup;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Dnc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dnc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dnc;
                    T& operator()()
                    {
                        return dnc;
                    }
                    const T& operator()() const
                    {
                        return dnc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Sch
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sch";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sch;
                    T& operator()()
                    {
                        return sch;
                    }
                    const T& operator()() const
                    {
                        return sch;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Geo
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "geo";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  geo;
                    T& operator()()
                    {
                        return geo;
                    }
                    const T& operator()() const
                    {
                        return geo;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Run
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "run";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  run;
                    T& operator()()
                    {
                        return run;
                    }
                    const T& operator()() const
                    {
                        return run;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Merits
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "merits";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  merits;
                    T& operator()()
                    {
                        return merits;
                    }
                    const T& operator()() const
                    {
                        return merits;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Limits
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "limits";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  limits;
                    T& operator()()
                    {
                        return limits;
                    }
                    const T& operator()() const
                    {
                        return limits;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace CharExp_

    struct CharExp : sqlpp::table_t<CharExp,
                                    CharExp_::Charid,
                                    CharExp_::Mode,
                                    CharExp_::War,
                                    CharExp_::Mnk,
                                    CharExp_::Whm,
                                    CharExp_::Blm,
                                    CharExp_::Rdm,
                                    CharExp_::Thf,
                                    CharExp_::Pld,
                                    CharExp_::Drk,
                                    CharExp_::Bst,
                                    CharExp_::Brd,
                                    CharExp_::Rng,
                                    CharExp_::Sam,
                                    CharExp_::Nin,
                                    CharExp_::Drg,
                                    CharExp_::Smn,
                                    CharExp_::Blu,
                                    CharExp_::Cor,
                                    CharExp_::Pup,
                                    CharExp_::Dnc,
                                    CharExp_::Sch,
                                    CharExp_::Geo,
                                    CharExp_::Run,
                                    CharExp_::Merits,
                                    CharExp_::Limits>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_exp";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charExp;
                T& operator()()
                {
                    return charExp;
                }
                const T& operator()() const
                {
                    return charExp;
                }
            };
        };
    };
    namespace CharHistory_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct EnemiesDefeated
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "enemies_defeated";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  enemiesDefeated;
                    T& operator()()
                    {
                        return enemiesDefeated;
                    }
                    const T& operator()() const
                    {
                        return enemiesDefeated;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct TimesKnockedOut
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "times_knocked_out";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timesKnockedOut;
                    T& operator()()
                    {
                        return timesKnockedOut;
                    }
                    const T& operator()() const
                    {
                        return timesKnockedOut;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct MhEntrances
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mh_entrances";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mhEntrances;
                    T& operator()()
                    {
                        return mhEntrances;
                    }
                    const T& operator()() const
                    {
                        return mhEntrances;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct JoinedParties
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "joined_parties";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  joinedParties;
                    T& operator()()
                    {
                        return joinedParties;
                    }
                    const T& operator()() const
                    {
                        return joinedParties;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct JoinedAlliances
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "joined_alliances";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  joinedAlliances;
                    T& operator()()
                    {
                        return joinedAlliances;
                    }
                    const T& operator()() const
                    {
                        return joinedAlliances;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct SpellsCast
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spells_cast";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  spellsCast;
                    T& operator()()
                    {
                        return spellsCast;
                    }
                    const T& operator()() const
                    {
                        return spellsCast;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct AbilitiesUsed
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "abilities_used";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  abilitiesUsed;
                    T& operator()()
                    {
                        return abilitiesUsed;
                    }
                    const T& operator()() const
                    {
                        return abilitiesUsed;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct WsUsed
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ws_used";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  wsUsed;
                    T& operator()()
                    {
                        return wsUsed;
                    }
                    const T& operator()() const
                    {
                        return wsUsed;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct ItemsUsed
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "items_used";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemsUsed;
                    T& operator()()
                    {
                        return itemsUsed;
                    }
                    const T& operator()() const
                    {
                        return itemsUsed;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct ChatsSent
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "chats_sent";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  chatsSent;
                    T& operator()()
                    {
                        return chatsSent;
                    }
                    const T& operator()() const
                    {
                        return chatsSent;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct NpcInteractions
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "npc_interactions";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  npcInteractions;
                    T& operator()()
                    {
                        return npcInteractions;
                    }
                    const T& operator()() const
                    {
                        return npcInteractions;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct BattlesFought
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "battles_fought";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  battlesFought;
                    T& operator()()
                    {
                        return battlesFought;
                    }
                    const T& operator()() const
                    {
                        return battlesFought;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct GmCalls
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "gm_calls";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  gmCalls;
                    T& operator()()
                    {
                        return gmCalls;
                    }
                    const T& operator()() const
                    {
                        return gmCalls;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct DistanceTravelled
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "distance_travelled";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  distanceTravelled;
                    T& operator()()
                    {
                        return distanceTravelled;
                    }
                    const T& operator()() const
                    {
                        return distanceTravelled;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
    } // namespace CharHistory_

    struct CharHistory : sqlpp::table_t<CharHistory,
                                        CharHistory_::Charid,
                                        CharHistory_::EnemiesDefeated,
                                        CharHistory_::TimesKnockedOut,
                                        CharHistory_::MhEntrances,
                                        CharHistory_::JoinedParties,
                                        CharHistory_::JoinedAlliances,
                                        CharHistory_::SpellsCast,
                                        CharHistory_::AbilitiesUsed,
                                        CharHistory_::WsUsed,
                                        CharHistory_::ItemsUsed,
                                        CharHistory_::ChatsSent,
                                        CharHistory_::NpcInteractions,
                                        CharHistory_::BattlesFought,
                                        CharHistory_::GmCalls,
                                        CharHistory_::DistanceTravelled>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_history";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charHistory;
                T& operator()()
                {
                    return charHistory;
                }
                const T& operator()() const
                {
                    return charHistory;
                }
            };
        };
    };
    namespace CharInventory_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Location
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "location";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  location;
                    T& operator()()
                    {
                        return location;
                    }
                    const T& operator()() const
                    {
                        return location;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Slot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "slot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  slot;
                    T& operator()()
                    {
                        return slot;
                    }
                    const T& operator()() const
                    {
                        return slot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct ItemId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemId;
                    T& operator()()
                    {
                        return itemId;
                    }
                    const T& operator()() const
                    {
                        return itemId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Quantity
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "quantity";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  quantity;
                    T& operator()()
                    {
                        return quantity;
                    }
                    const T& operator()() const
                    {
                        return quantity;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Bazaar
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "bazaar";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  bazaar;
                    T& operator()()
                    {
                        return bazaar;
                    }
                    const T& operator()() const
                    {
                        return bazaar;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Signature
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "signature";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  signature;
                    T& operator()()
                    {
                        return signature;
                    }
                    const T& operator()() const
                    {
                        return signature;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar>;
        };
        struct Extra
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "extra";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  extra;
                    T& operator()()
                    {
                        return extra;
                    }
                    const T& operator()() const
                    {
                        return extra;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
        };
    } // namespace CharInventory_

    struct CharInventory : sqlpp::table_t<CharInventory,
                                          CharInventory_::Charid,
                                          CharInventory_::Location,
                                          CharInventory_::Slot,
                                          CharInventory_::ItemId,
                                          CharInventory_::Quantity,
                                          CharInventory_::Bazaar,
                                          CharInventory_::Signature,
                                          CharInventory_::Extra>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_inventory";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charInventory;
                T& operator()()
                {
                    return charInventory;
                }
                const T& operator()() const
                {
                    return charInventory;
                }
            };
        };
    };
    namespace CharJobPoints_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Jobid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jobid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jobid;
                    T& operator()()
                    {
                        return jobid;
                    }
                    const T& operator()() const
                    {
                        return jobid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct CapacityPoints
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "capacity_points";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  capacityPoints;
                    T& operator()()
                    {
                        return capacityPoints;
                    }
                    const T& operator()() const
                    {
                        return capacityPoints;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct JobPoints
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "job_points";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jobPoints;
                    T& operator()()
                    {
                        return jobPoints;
                    }
                    const T& operator()() const
                    {
                        return jobPoints;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct JobPointsSpent
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "job_points_spent";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jobPointsSpent;
                    T& operator()()
                    {
                        return jobPointsSpent;
                    }
                    const T& operator()() const
                    {
                        return jobPointsSpent;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Jptype0
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jptype0";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jptype0;
                    T& operator()()
                    {
                        return jptype0;
                    }
                    const T& operator()() const
                    {
                        return jptype0;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Jptype1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jptype1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jptype1;
                    T& operator()()
                    {
                        return jptype1;
                    }
                    const T& operator()() const
                    {
                        return jptype1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Jptype2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jptype2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jptype2;
                    T& operator()()
                    {
                        return jptype2;
                    }
                    const T& operator()() const
                    {
                        return jptype2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Jptype3
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jptype3";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jptype3;
                    T& operator()()
                    {
                        return jptype3;
                    }
                    const T& operator()() const
                    {
                        return jptype3;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Jptype4
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jptype4";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jptype4;
                    T& operator()()
                    {
                        return jptype4;
                    }
                    const T& operator()() const
                    {
                        return jptype4;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Jptype5
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jptype5";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jptype5;
                    T& operator()()
                    {
                        return jptype5;
                    }
                    const T& operator()() const
                    {
                        return jptype5;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Jptype6
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jptype6";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jptype6;
                    T& operator()()
                    {
                        return jptype6;
                    }
                    const T& operator()() const
                    {
                        return jptype6;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Jptype7
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jptype7";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jptype7;
                    T& operator()()
                    {
                        return jptype7;
                    }
                    const T& operator()() const
                    {
                        return jptype7;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Jptype8
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jptype8";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jptype8;
                    T& operator()()
                    {
                        return jptype8;
                    }
                    const T& operator()() const
                    {
                        return jptype8;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Jptype9
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jptype9";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jptype9;
                    T& operator()()
                    {
                        return jptype9;
                    }
                    const T& operator()() const
                    {
                        return jptype9;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace CharJobPoints_

    struct CharJobPoints : sqlpp::table_t<CharJobPoints,
                                          CharJobPoints_::Charid,
                                          CharJobPoints_::Jobid,
                                          CharJobPoints_::CapacityPoints,
                                          CharJobPoints_::JobPoints,
                                          CharJobPoints_::JobPointsSpent,
                                          CharJobPoints_::Jptype0,
                                          CharJobPoints_::Jptype1,
                                          CharJobPoints_::Jptype2,
                                          CharJobPoints_::Jptype3,
                                          CharJobPoints_::Jptype4,
                                          CharJobPoints_::Jptype5,
                                          CharJobPoints_::Jptype6,
                                          CharJobPoints_::Jptype7,
                                          CharJobPoints_::Jptype8,
                                          CharJobPoints_::Jptype9>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_job_points";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charJobPoints;
                T& operator()()
                {
                    return charJobPoints;
                }
                const T& operator()() const
                {
                    return charJobPoints;
                }
            };
        };
    };
    namespace CharJobs_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Unlocked
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "unlocked";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  unlocked;
                    T& operator()()
                    {
                        return unlocked;
                    }
                    const T& operator()() const
                    {
                        return unlocked;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Genkai
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "genkai";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  genkai;
                    T& operator()()
                    {
                        return genkai;
                    }
                    const T& operator()() const
                    {
                        return genkai;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct War
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "war";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  war;
                    T& operator()()
                    {
                        return war;
                    }
                    const T& operator()() const
                    {
                        return war;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Mnk
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mnk";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mnk;
                    T& operator()()
                    {
                        return mnk;
                    }
                    const T& operator()() const
                    {
                        return mnk;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Whm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "whm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  whm;
                    T& operator()()
                    {
                        return whm;
                    }
                    const T& operator()() const
                    {
                        return whm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Blm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "blm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  blm;
                    T& operator()()
                    {
                        return blm;
                    }
                    const T& operator()() const
                    {
                        return blm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Rdm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rdm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rdm;
                    T& operator()()
                    {
                        return rdm;
                    }
                    const T& operator()() const
                    {
                        return rdm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Thf
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "thf";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  thf;
                    T& operator()()
                    {
                        return thf;
                    }
                    const T& operator()() const
                    {
                        return thf;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Pld
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pld";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pld;
                    T& operator()()
                    {
                        return pld;
                    }
                    const T& operator()() const
                    {
                        return pld;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Drk
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "drk";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  drk;
                    T& operator()()
                    {
                        return drk;
                    }
                    const T& operator()() const
                    {
                        return drk;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Bst
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "bst";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  bst;
                    T& operator()()
                    {
                        return bst;
                    }
                    const T& operator()() const
                    {
                        return bst;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Brd
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "brd";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  brd;
                    T& operator()()
                    {
                        return brd;
                    }
                    const T& operator()() const
                    {
                        return brd;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Rng
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rng";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rng;
                    T& operator()()
                    {
                        return rng;
                    }
                    const T& operator()() const
                    {
                        return rng;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Sam
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sam";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sam;
                    T& operator()()
                    {
                        return sam;
                    }
                    const T& operator()() const
                    {
                        return sam;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Nin
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "nin";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  nin;
                    T& operator()()
                    {
                        return nin;
                    }
                    const T& operator()() const
                    {
                        return nin;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Drg
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "drg";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  drg;
                    T& operator()()
                    {
                        return drg;
                    }
                    const T& operator()() const
                    {
                        return drg;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Smn
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "smn";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  smn;
                    T& operator()()
                    {
                        return smn;
                    }
                    const T& operator()() const
                    {
                        return smn;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Blu
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "blu";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  blu;
                    T& operator()()
                    {
                        return blu;
                    }
                    const T& operator()() const
                    {
                        return blu;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Cor
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "cor";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  cor;
                    T& operator()()
                    {
                        return cor;
                    }
                    const T& operator()() const
                    {
                        return cor;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Pup
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pup";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pup;
                    T& operator()()
                    {
                        return pup;
                    }
                    const T& operator()() const
                    {
                        return pup;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Dnc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dnc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dnc;
                    T& operator()()
                    {
                        return dnc;
                    }
                    const T& operator()() const
                    {
                        return dnc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Sch
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sch";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sch;
                    T& operator()()
                    {
                        return sch;
                    }
                    const T& operator()() const
                    {
                        return sch;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Geo
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "geo";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  geo;
                    T& operator()()
                    {
                        return geo;
                    }
                    const T& operator()() const
                    {
                        return geo;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Run
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "run";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  run;
                    T& operator()()
                    {
                        return run;
                    }
                    const T& operator()() const
                    {
                        return run;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace CharJobs_

    struct CharJobs : sqlpp::table_t<CharJobs,
                                     CharJobs_::Charid,
                                     CharJobs_::Unlocked,
                                     CharJobs_::Genkai,
                                     CharJobs_::War,
                                     CharJobs_::Mnk,
                                     CharJobs_::Whm,
                                     CharJobs_::Blm,
                                     CharJobs_::Rdm,
                                     CharJobs_::Thf,
                                     CharJobs_::Pld,
                                     CharJobs_::Drk,
                                     CharJobs_::Bst,
                                     CharJobs_::Brd,
                                     CharJobs_::Rng,
                                     CharJobs_::Sam,
                                     CharJobs_::Nin,
                                     CharJobs_::Drg,
                                     CharJobs_::Smn,
                                     CharJobs_::Blu,
                                     CharJobs_::Cor,
                                     CharJobs_::Pup,
                                     CharJobs_::Dnc,
                                     CharJobs_::Sch,
                                     CharJobs_::Geo,
                                     CharJobs_::Run>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_jobs";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charJobs;
                T& operator()()
                {
                    return charJobs;
                }
                const T& operator()() const
                {
                    return charJobs;
                }
            };
        };
    };
    namespace CharLook_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Face
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "face";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  face;
                    T& operator()()
                    {
                        return face;
                    }
                    const T& operator()() const
                    {
                        return face;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Race
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "race";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  race;
                    T& operator()()
                    {
                        return race;
                    }
                    const T& operator()() const
                    {
                        return race;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Size
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "size";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  size;
                    T& operator()()
                    {
                        return size;
                    }
                    const T& operator()() const
                    {
                        return size;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Head
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "head";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  head;
                    T& operator()()
                    {
                        return head;
                    }
                    const T& operator()() const
                    {
                        return head;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Body
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "body";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  body;
                    T& operator()()
                    {
                        return body;
                    }
                    const T& operator()() const
                    {
                        return body;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Hands
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "hands";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  hands;
                    T& operator()()
                    {
                        return hands;
                    }
                    const T& operator()() const
                    {
                        return hands;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Legs
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "legs";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  legs;
                    T& operator()()
                    {
                        return legs;
                    }
                    const T& operator()() const
                    {
                        return legs;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Feet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "feet";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  feet;
                    T& operator()()
                    {
                        return feet;
                    }
                    const T& operator()() const
                    {
                        return feet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Main
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "main";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  main;
                    T& operator()()
                    {
                        return main;
                    }
                    const T& operator()() const
                    {
                        return main;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Sub
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sub";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sub;
                    T& operator()()
                    {
                        return sub;
                    }
                    const T& operator()() const
                    {
                        return sub;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Ranged
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ranged";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ranged;
                    T& operator()()
                    {
                        return ranged;
                    }
                    const T& operator()() const
                    {
                        return ranged;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace CharLook_

    struct CharLook : sqlpp::table_t<CharLook,
                                     CharLook_::Charid,
                                     CharLook_::Face,
                                     CharLook_::Race,
                                     CharLook_::Size,
                                     CharLook_::Head,
                                     CharLook_::Body,
                                     CharLook_::Hands,
                                     CharLook_::Legs,
                                     CharLook_::Feet,
                                     CharLook_::Main,
                                     CharLook_::Sub,
                                     CharLook_::Ranged>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_look";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charLook;
                T& operator()()
                {
                    return charLook;
                }
                const T& operator()() const
                {
                    return charLook;
                }
            };
        };
    };
    namespace CharMerit_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Meritid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "meritid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  meritid;
                    T& operator()()
                    {
                        return meritid;
                    }
                    const T& operator()() const
                    {
                        return meritid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Upgrades
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "upgrades";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  upgrades;
                    T& operator()()
                    {
                        return upgrades;
                    }
                    const T& operator()() const
                    {
                        return upgrades;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
    } // namespace CharMerit_

    struct CharMerit : sqlpp::table_t<CharMerit,
                                      CharMerit_::Charid,
                                      CharMerit_::Meritid,
                                      CharMerit_::Upgrades>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_merit";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charMerit;
                T& operator()()
                {
                    return charMerit;
                }
                const T& operator()() const
                {
                    return charMerit;
                }
            };
        };
    };
    namespace CharPet_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Wyvernid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wyvernid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  wyvernid;
                    T& operator()()
                    {
                        return wyvernid;
                    }
                    const T& operator()() const
                    {
                        return wyvernid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Automatonid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "automatonid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  automatonid;
                    T& operator()()
                    {
                        return automatonid;
                    }
                    const T& operator()() const
                    {
                        return automatonid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct UnlockedAttachments
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "unlocked_attachments";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  unlockedAttachments;
                    T& operator()()
                    {
                        return unlockedAttachments;
                    }
                    const T& operator()() const
                    {
                        return unlockedAttachments;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
        };
        struct EquippedAttachments
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "equipped_attachments";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  equippedAttachments;
                    T& operator()()
                    {
                        return equippedAttachments;
                    }
                    const T& operator()() const
                    {
                        return equippedAttachments;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
        };
        struct Adventuringfellowid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "adventuringfellowid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  adventuringfellowid;
                    T& operator()()
                    {
                        return adventuringfellowid;
                    }
                    const T& operator()() const
                    {
                        return adventuringfellowid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Chocoboid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "chocoboid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  chocoboid;
                    T& operator()()
                    {
                        return chocoboid;
                    }
                    const T& operator()() const
                    {
                        return chocoboid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct FieldChocobo
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "field_chocobo";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fieldChocobo;
                    T& operator()()
                    {
                        return fieldChocobo;
                    }
                    const T& operator()() const
                    {
                        return fieldChocobo;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
    } // namespace CharPet_

    struct CharPet : sqlpp::table_t<CharPet,
                                    CharPet_::Charid,
                                    CharPet_::Wyvernid,
                                    CharPet_::Automatonid,
                                    CharPet_::UnlockedAttachments,
                                    CharPet_::EquippedAttachments,
                                    CharPet_::Adventuringfellowid,
                                    CharPet_::Chocoboid,
                                    CharPet_::FieldChocobo>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_pet";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charPet;
                T& operator()()
                {
                    return charPet;
                }
                const T& operator()() const
                {
                    return charPet;
                }
            };
        };
    };
    namespace CharPoints_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct SandoriaCp
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sandoria_cp";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sandoriaCp;
                    T& operator()()
                    {
                        return sandoriaCp;
                    }
                    const T& operator()() const
                    {
                        return sandoriaCp;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct BastokCp
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "bastok_cp";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  bastokCp;
                    T& operator()()
                    {
                        return bastokCp;
                    }
                    const T& operator()() const
                    {
                        return bastokCp;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct WindurstCp
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "windurst_cp";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  windurstCp;
                    T& operator()()
                    {
                        return windurstCp;
                    }
                    const T& operator()() const
                    {
                        return windurstCp;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct BeastmanSeal
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "beastman_seal";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  beastmanSeal;
                    T& operator()()
                    {
                        return beastmanSeal;
                    }
                    const T& operator()() const
                    {
                        return beastmanSeal;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct KindredSeal
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "kindred_seal";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  kindredSeal;
                    T& operator()()
                    {
                        return kindredSeal;
                    }
                    const T& operator()() const
                    {
                        return kindredSeal;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct KindredCrest
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "kindred_crest";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  kindredCrest;
                    T& operator()()
                    {
                        return kindredCrest;
                    }
                    const T& operator()() const
                    {
                        return kindredCrest;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct HighKindredCrest
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "high_kindred_crest";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  highKindredCrest;
                    T& operator()()
                    {
                        return highKindredCrest;
                    }
                    const T& operator()() const
                    {
                        return highKindredCrest;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct SacredKindredCrest
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sacred_kindred_crest";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sacredKindredCrest;
                    T& operator()()
                    {
                        return sacredKindredCrest;
                    }
                    const T& operator()() const
                    {
                        return sacredKindredCrest;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct AncientBeastcoin
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ancient_beastcoin";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ancientBeastcoin;
                    T& operator()()
                    {
                        return ancientBeastcoin;
                    }
                    const T& operator()() const
                    {
                        return ancientBeastcoin;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ValorPoint
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "valor_point";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  valorPoint;
                    T& operator()()
                    {
                        return valorPoint;
                    }
                    const T& operator()() const
                    {
                        return valorPoint;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Scyld
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "scyld";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  scyld;
                    T& operator()()
                    {
                        return scyld;
                    }
                    const T& operator()() const
                    {
                        return scyld;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct GuildFishing
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "guild_fishing";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  guildFishing;
                    T& operator()()
                    {
                        return guildFishing;
                    }
                    const T& operator()() const
                    {
                        return guildFishing;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct GuildWoodworking
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "guild_woodworking";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  guildWoodworking;
                    T& operator()()
                    {
                        return guildWoodworking;
                    }
                    const T& operator()() const
                    {
                        return guildWoodworking;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct GuildSmithing
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "guild_smithing";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  guildSmithing;
                    T& operator()()
                    {
                        return guildSmithing;
                    }
                    const T& operator()() const
                    {
                        return guildSmithing;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct GuildGoldsmithing
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "guild_goldsmithing";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  guildGoldsmithing;
                    T& operator()()
                    {
                        return guildGoldsmithing;
                    }
                    const T& operator()() const
                    {
                        return guildGoldsmithing;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct GuildWeaving
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "guild_weaving";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  guildWeaving;
                    T& operator()()
                    {
                        return guildWeaving;
                    }
                    const T& operator()() const
                    {
                        return guildWeaving;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct GuildLeathercraft
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "guild_leathercraft";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  guildLeathercraft;
                    T& operator()()
                    {
                        return guildLeathercraft;
                    }
                    const T& operator()() const
                    {
                        return guildLeathercraft;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct GuildBonecraft
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "guild_bonecraft";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  guildBonecraft;
                    T& operator()()
                    {
                        return guildBonecraft;
                    }
                    const T& operator()() const
                    {
                        return guildBonecraft;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct GuildAlchemy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "guild_alchemy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  guildAlchemy;
                    T& operator()()
                    {
                        return guildAlchemy;
                    }
                    const T& operator()() const
                    {
                        return guildAlchemy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct GuildCooking
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "guild_cooking";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  guildCooking;
                    T& operator()()
                    {
                        return guildCooking;
                    }
                    const T& operator()() const
                    {
                        return guildCooking;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Cinder
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "cinder";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  cinder;
                    T& operator()()
                    {
                        return cinder;
                    }
                    const T& operator()() const
                    {
                        return cinder;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct FireFewell
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fire_fewell";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fireFewell;
                    T& operator()()
                    {
                        return fireFewell;
                    }
                    const T& operator()() const
                    {
                        return fireFewell;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct IceFewell
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ice_fewell";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  iceFewell;
                    T& operator()()
                    {
                        return iceFewell;
                    }
                    const T& operator()() const
                    {
                        return iceFewell;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct WindFewell
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wind_fewell";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  windFewell;
                    T& operator()()
                    {
                        return windFewell;
                    }
                    const T& operator()() const
                    {
                        return windFewell;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct EarthFewell
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "earth_fewell";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  earthFewell;
                    T& operator()()
                    {
                        return earthFewell;
                    }
                    const T& operator()() const
                    {
                        return earthFewell;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LightningFewell
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lightning_fewell";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lightningFewell;
                    T& operator()()
                    {
                        return lightningFewell;
                    }
                    const T& operator()() const
                    {
                        return lightningFewell;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct WaterFewell
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "water_fewell";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  waterFewell;
                    T& operator()()
                    {
                        return waterFewell;
                    }
                    const T& operator()() const
                    {
                        return waterFewell;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LightFewell
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "light_fewell";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lightFewell;
                    T& operator()()
                    {
                        return lightFewell;
                    }
                    const T& operator()() const
                    {
                        return lightFewell;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DarkFewell
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dark_fewell";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  darkFewell;
                    T& operator()()
                    {
                        return darkFewell;
                    }
                    const T& operator()() const
                    {
                        return darkFewell;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct BallistaPoint
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ballista_point";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ballistaPoint;
                    T& operator()()
                    {
                        return ballistaPoint;
                    }
                    const T& operator()() const
                    {
                        return ballistaPoint;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct FellowPoint
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fellow_point";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fellowPoint;
                    T& operator()()
                    {
                        return fellowPoint;
                    }
                    const T& operator()() const
                    {
                        return fellowPoint;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct DailyTally
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "daily_tally";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dailyTally;
                    T& operator()()
                    {
                        return dailyTally;
                    }
                    const T& operator()() const
                    {
                        return dailyTally;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
        struct ChocobuckSandoria
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "chocobuck_sandoria";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  chocobuckSandoria;
                    T& operator()()
                    {
                        return chocobuckSandoria;
                    }
                    const T& operator()() const
                    {
                        return chocobuckSandoria;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ChocobuckBastok
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "chocobuck_bastok";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  chocobuckBastok;
                    T& operator()()
                    {
                        return chocobuckBastok;
                    }
                    const T& operator()() const
                    {
                        return chocobuckBastok;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ChocobuckWindurst
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "chocobuck_windurst";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  chocobuckWindurst;
                    T& operator()()
                    {
                        return chocobuckWindurst;
                    }
                    const T& operator()() const
                    {
                        return chocobuckWindurst;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ResearchMark
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "research_mark";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  researchMark;
                    T& operator()()
                    {
                        return researchMark;
                    }
                    const T& operator()() const
                    {
                        return researchMark;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct TunnelWorm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "tunnel_worm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  tunnelWorm;
                    T& operator()()
                    {
                        return tunnelWorm;
                    }
                    const T& operator()() const
                    {
                        return tunnelWorm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MorionWorm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "morion_worm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  morionWorm;
                    T& operator()()
                    {
                        return morionWorm;
                    }
                    const T& operator()() const
                    {
                        return morionWorm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct PhantomWorm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "phantom_worm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  phantomWorm;
                    T& operator()()
                    {
                        return phantomWorm;
                    }
                    const T& operator()() const
                    {
                        return phantomWorm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MoblinMarble
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "moblin_marble";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  moblinMarble;
                    T& operator()()
                    {
                        return moblinMarble;
                    }
                    const T& operator()() const
                    {
                        return moblinMarble;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Infamy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "infamy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  infamy;
                    T& operator()()
                    {
                        return infamy;
                    }
                    const T& operator()() const
                    {
                        return infamy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Prestige
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "prestige";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  prestige;
                    T& operator()()
                    {
                        return prestige;
                    }
                    const T& operator()() const
                    {
                        return prestige;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct LegionPoint
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "legion_point";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  legionPoint;
                    T& operator()()
                    {
                        return legionPoint;
                    }
                    const T& operator()() const
                    {
                        return legionPoint;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct SparkOfEminence
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spark_of_eminence";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sparkOfEminence;
                    T& operator()()
                    {
                        return sparkOfEminence;
                    }
                    const T& operator()() const
                    {
                        return sparkOfEminence;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct ShiningStar
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "shining_star";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  shiningStar;
                    T& operator()()
                    {
                        return shiningStar;
                    }
                    const T& operator()() const
                    {
                        return shiningStar;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct ImperialStanding
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "imperial_standing";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  imperialStanding;
                    T& operator()()
                    {
                        return imperialStanding;
                    }
                    const T& operator()() const
                    {
                        return imperialStanding;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct LeujaoamAssaultPoint
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leujaoam_assault_point";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leujaoamAssaultPoint;
                    T& operator()()
                    {
                        return leujaoamAssaultPoint;
                    }
                    const T& operator()() const
                    {
                        return leujaoamAssaultPoint;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct MamoolAssaultPoint
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mamool_assault_point";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mamoolAssaultPoint;
                    T& operator()()
                    {
                        return mamoolAssaultPoint;
                    }
                    const T& operator()() const
                    {
                        return mamoolAssaultPoint;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct LebrosAssaultPoint
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lebros_assault_point";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lebrosAssaultPoint;
                    T& operator()()
                    {
                        return lebrosAssaultPoint;
                    }
                    const T& operator()() const
                    {
                        return lebrosAssaultPoint;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct PeriqiaAssaultPoint
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "periqia_assault_point";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  periqiaAssaultPoint;
                    T& operator()()
                    {
                        return periqiaAssaultPoint;
                    }
                    const T& operator()() const
                    {
                        return periqiaAssaultPoint;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct IlrusiAssaultPoint
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ilrusi_assault_point";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ilrusiAssaultPoint;
                    T& operator()()
                    {
                        return ilrusiAssaultPoint;
                    }
                    const T& operator()() const
                    {
                        return ilrusiAssaultPoint;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct NyzulIsleAssaultPoint
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "nyzul_isle_assault_point";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  nyzulIsleAssaultPoint;
                    T& operator()()
                    {
                        return nyzulIsleAssaultPoint;
                    }
                    const T& operator()() const
                    {
                        return nyzulIsleAssaultPoint;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct ZeniPoint
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zeni_point";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zeniPoint;
                    T& operator()()
                    {
                        return zeniPoint;
                    }
                    const T& operator()() const
                    {
                        return zeniPoint;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Jetton
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jetton";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jetton;
                    T& operator()()
                    {
                        return jetton;
                    }
                    const T& operator()() const
                    {
                        return jetton;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct TherionIchor
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "therion_ichor";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  therionIchor;
                    T& operator()()
                    {
                        return therionIchor;
                    }
                    const T& operator()() const
                    {
                        return therionIchor;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct AlliedNotes
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "allied_notes";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  alliedNotes;
                    T& operator()()
                    {
                        return alliedNotes;
                    }
                    const T& operator()() const
                    {
                        return alliedNotes;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct AmanVouchers
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "aman_vouchers";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  amanVouchers;
                    T& operator()()
                    {
                        return amanVouchers;
                    }
                    const T& operator()() const
                    {
                        return amanVouchers;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct LoginPoints
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "login_points";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  loginPoints;
                    T& operator()()
                    {
                        return loginPoints;
                    }
                    const T& operator()() const
                    {
                        return loginPoints;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Bayld
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "bayld";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  bayld;
                    T& operator()()
                    {
                        return bayld;
                    }
                    const T& operator()() const
                    {
                        return bayld;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct KineticUnit
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "kinetic_unit";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  kineticUnit;
                    T& operator()()
                    {
                        return kineticUnit;
                    }
                    const T& operator()() const
                    {
                        return kineticUnit;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ObsidianFragment
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "obsidian_fragment";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  obsidianFragment;
                    T& operator()()
                    {
                        return obsidianFragment;
                    }
                    const T& operator()() const
                    {
                        return obsidianFragment;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct LebondoptWing
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lebondopt_wing";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lebondoptWing;
                    T& operator()()
                    {
                        return lebondoptWing;
                    }
                    const T& operator()() const
                    {
                        return lebondoptWing;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct PulchridoptWing
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pulchridopt_wing";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pulchridoptWing;
                    T& operator()()
                    {
                        return pulchridoptWing;
                    }
                    const T& operator()() const
                    {
                        return pulchridoptWing;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct MweyaPlasm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mweya_plasm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mweyaPlasm;
                    T& operator()()
                    {
                        return mweyaPlasm;
                    }
                    const T& operator()() const
                    {
                        return mweyaPlasm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Cruor
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "cruor";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  cruor;
                    T& operator()()
                    {
                        return cruor;
                    }
                    const T& operator()() const
                    {
                        return cruor;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct ResistanceCredit
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "resistance_credit";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  resistanceCredit;
                    T& operator()()
                    {
                        return resistanceCredit;
                    }
                    const T& operator()() const
                    {
                        return resistanceCredit;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct DominionNote
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dominion_note";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dominionNote;
                    T& operator()()
                    {
                        return dominionNote;
                    }
                    const T& operator()() const
                    {
                        return dominionNote;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct FifthEchelonTrophy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fifth_echelon_trophy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fifthEchelonTrophy;
                    T& operator()()
                    {
                        return fifthEchelonTrophy;
                    }
                    const T& operator()() const
                    {
                        return fifthEchelonTrophy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct FourthEchelonTrophy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fourth_echelon_trophy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fourthEchelonTrophy;
                    T& operator()()
                    {
                        return fourthEchelonTrophy;
                    }
                    const T& operator()() const
                    {
                        return fourthEchelonTrophy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct ThirdEchelonTrophy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "third_echelon_trophy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  thirdEchelonTrophy;
                    T& operator()()
                    {
                        return thirdEchelonTrophy;
                    }
                    const T& operator()() const
                    {
                        return thirdEchelonTrophy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SecondEchelonTrophy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "second_echelon_trophy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  secondEchelonTrophy;
                    T& operator()()
                    {
                        return secondEchelonTrophy;
                    }
                    const T& operator()() const
                    {
                        return secondEchelonTrophy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct FirstEchelonTrophy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "first_echelon_trophy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  firstEchelonTrophy;
                    T& operator()()
                    {
                        return firstEchelonTrophy;
                    }
                    const T& operator()() const
                    {
                        return firstEchelonTrophy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct CavePoints
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "cave_points";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  cavePoints;
                    T& operator()()
                    {
                        return cavePoints;
                    }
                    const T& operator()() const
                    {
                        return cavePoints;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct IdTags
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "id_tags";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  idTags;
                    T& operator()()
                    {
                        return idTags;
                    }
                    const T& operator()() const
                    {
                        return idTags;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct OpCredits
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "op_credits";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  opCredits;
                    T& operator()()
                    {
                        return opCredits;
                    }
                    const T& operator()() const
                    {
                        return opCredits;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct TraverserStones
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "traverser_stones";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  traverserStones;
                    T& operator()()
                    {
                        return traverserStones;
                    }
                    const T& operator()() const
                    {
                        return traverserStones;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Voidstones
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "voidstones";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  voidstones;
                    T& operator()()
                    {
                        return voidstones;
                    }
                    const T& operator()() const
                    {
                        return voidstones;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct KupofriedCorundums
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "kupofried_corundums";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  kupofriedCorundums;
                    T& operator()()
                    {
                        return kupofriedCorundums;
                    }
                    const T& operator()() const
                    {
                        return kupofriedCorundums;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Imprimaturs
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "imprimaturs";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  imprimaturs;
                    T& operator()()
                    {
                        return imprimaturs;
                    }
                    const T& operator()() const
                    {
                        return imprimaturs;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct PheromoneSacks
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pheromone_sacks";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pheromoneSacks;
                    T& operator()()
                    {
                        return pheromoneSacks;
                    }
                    const T& operator()() const
                    {
                        return pheromoneSacks;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct RemsCh1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rems_ch1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  remsCh1;
                    T& operator()()
                    {
                        return remsCh1;
                    }
                    const T& operator()() const
                    {
                        return remsCh1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct RemsCh2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rems_ch2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  remsCh2;
                    T& operator()()
                    {
                        return remsCh2;
                    }
                    const T& operator()() const
                    {
                        return remsCh2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct RemsCh3
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rems_ch3";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  remsCh3;
                    T& operator()()
                    {
                        return remsCh3;
                    }
                    const T& operator()() const
                    {
                        return remsCh3;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct RemsCh4
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rems_ch4";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  remsCh4;
                    T& operator()()
                    {
                        return remsCh4;
                    }
                    const T& operator()() const
                    {
                        return remsCh4;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct RemsCh5
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rems_ch5";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  remsCh5;
                    T& operator()()
                    {
                        return remsCh5;
                    }
                    const T& operator()() const
                    {
                        return remsCh5;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct RemsCh6
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rems_ch6";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  remsCh6;
                    T& operator()()
                    {
                        return remsCh6;
                    }
                    const T& operator()() const
                    {
                        return remsCh6;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct RemsCh7
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rems_ch7";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  remsCh7;
                    T& operator()()
                    {
                        return remsCh7;
                    }
                    const T& operator()() const
                    {
                        return remsCh7;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct RemsCh8
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rems_ch8";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  remsCh8;
                    T& operator()()
                    {
                        return remsCh8;
                    }
                    const T& operator()() const
                    {
                        return remsCh8;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct RemsCh9
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rems_ch9";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  remsCh9;
                    T& operator()()
                    {
                        return remsCh9;
                    }
                    const T& operator()() const
                    {
                        return remsCh9;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct RemsCh10
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rems_ch10";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  remsCh10;
                    T& operator()()
                    {
                        return remsCh10;
                    }
                    const T& operator()() const
                    {
                        return remsCh10;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct ReclamationMarks
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reclamation_marks";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reclamationMarks;
                    T& operator()()
                    {
                        return reclamationMarks;
                    }
                    const T& operator()() const
                    {
                        return reclamationMarks;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct UnityAccolades
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "unity_accolades";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  unityAccolades;
                    T& operator()()
                    {
                        return unityAccolades;
                    }
                    const T& operator()() const
                    {
                        return unityAccolades;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct FireCrystals
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fire_crystals";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fireCrystals;
                    T& operator()()
                    {
                        return fireCrystals;
                    }
                    const T& operator()() const
                    {
                        return fireCrystals;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct IceCrystals
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ice_crystals";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  iceCrystals;
                    T& operator()()
                    {
                        return iceCrystals;
                    }
                    const T& operator()() const
                    {
                        return iceCrystals;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct WindCrystals
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wind_crystals";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  windCrystals;
                    T& operator()()
                    {
                        return windCrystals;
                    }
                    const T& operator()() const
                    {
                        return windCrystals;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct EarthCrystals
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "earth_crystals";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  earthCrystals;
                    T& operator()()
                    {
                        return earthCrystals;
                    }
                    const T& operator()() const
                    {
                        return earthCrystals;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct LightningCrystals
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lightning_crystals";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lightningCrystals;
                    T& operator()()
                    {
                        return lightningCrystals;
                    }
                    const T& operator()() const
                    {
                        return lightningCrystals;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct WaterCrystals
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "water_crystals";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  waterCrystals;
                    T& operator()()
                    {
                        return waterCrystals;
                    }
                    const T& operator()() const
                    {
                        return waterCrystals;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct LightCrystals
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "light_crystals";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lightCrystals;
                    T& operator()()
                    {
                        return lightCrystals;
                    }
                    const T& operator()() const
                    {
                        return lightCrystals;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct DarkCrystals
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dark_crystals";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  darkCrystals;
                    T& operator()()
                    {
                        return darkCrystals;
                    }
                    const T& operator()() const
                    {
                        return darkCrystals;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Deeds
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "deeds";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  deeds;
                    T& operator()()
                    {
                        return deeds;
                    }
                    const T& operator()() const
                    {
                        return deeds;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct CurrentAccolades
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "current_accolades";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  currentAccolades;
                    T& operator()()
                    {
                        return currentAccolades;
                    }
                    const T& operator()() const
                    {
                        return currentAccolades;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct PrevAccolades
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "prev_accolades";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  prevAccolades;
                    T& operator()()
                    {
                        return prevAccolades;
                    }
                    const T& operator()() const
                    {
                        return prevAccolades;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct MysticalCanteen
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mystical_canteen";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mysticalCanteen;
                    T& operator()()
                    {
                        return mysticalCanteen;
                    }
                    const T& operator()() const
                    {
                        return mysticalCanteen;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct GhastlyStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ghastly_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ghastlyStone;
                    T& operator()()
                    {
                        return ghastlyStone;
                    }
                    const T& operator()() const
                    {
                        return ghastlyStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct GhastlyStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ghastly_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ghastlyStone1;
                    T& operator()()
                    {
                        return ghastlyStone1;
                    }
                    const T& operator()() const
                    {
                        return ghastlyStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct GhastlyStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ghastly_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ghastlyStone2;
                    T& operator()()
                    {
                        return ghastlyStone2;
                    }
                    const T& operator()() const
                    {
                        return ghastlyStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct VerdigrisStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "verdigris_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  verdigrisStone;
                    T& operator()()
                    {
                        return verdigrisStone;
                    }
                    const T& operator()() const
                    {
                        return verdigrisStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct VerdigrisStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "verdigris_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  verdigrisStone1;
                    T& operator()()
                    {
                        return verdigrisStone1;
                    }
                    const T& operator()() const
                    {
                        return verdigrisStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct VerdigrisStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "verdigris_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  verdigrisStone2;
                    T& operator()()
                    {
                        return verdigrisStone2;
                    }
                    const T& operator()() const
                    {
                        return verdigrisStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct WailingStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wailing_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  wailingStone;
                    T& operator()()
                    {
                        return wailingStone;
                    }
                    const T& operator()() const
                    {
                        return wailingStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct WailingStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wailing_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  wailingStone1;
                    T& operator()()
                    {
                        return wailingStone1;
                    }
                    const T& operator()() const
                    {
                        return wailingStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct WailingStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wailing_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  wailingStone2;
                    T& operator()()
                    {
                        return wailingStone2;
                    }
                    const T& operator()() const
                    {
                        return wailingStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SnowslitStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "snowslit_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  snowslitStone;
                    T& operator()()
                    {
                        return snowslitStone;
                    }
                    const T& operator()() const
                    {
                        return snowslitStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SnowslitStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "snowslit_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  snowslitStone1;
                    T& operator()()
                    {
                        return snowslitStone1;
                    }
                    const T& operator()() const
                    {
                        return snowslitStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SnowslitStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "snowslit_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  snowslitStone2;
                    T& operator()()
                    {
                        return snowslitStone2;
                    }
                    const T& operator()() const
                    {
                        return snowslitStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SnowtipStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "snowtip_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  snowtipStone;
                    T& operator()()
                    {
                        return snowtipStone;
                    }
                    const T& operator()() const
                    {
                        return snowtipStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SnowtipStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "snowtip_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  snowtipStone1;
                    T& operator()()
                    {
                        return snowtipStone1;
                    }
                    const T& operator()() const
                    {
                        return snowtipStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SnowtipStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "snowtip_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  snowtipStone2;
                    T& operator()()
                    {
                        return snowtipStone2;
                    }
                    const T& operator()() const
                    {
                        return snowtipStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SnowdimStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "snowdim_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  snowdimStone;
                    T& operator()()
                    {
                        return snowdimStone;
                    }
                    const T& operator()() const
                    {
                        return snowdimStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SnowdimStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "snowdim_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  snowdimStone1;
                    T& operator()()
                    {
                        return snowdimStone1;
                    }
                    const T& operator()() const
                    {
                        return snowdimStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SnowdimStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "snowdim_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  snowdimStone2;
                    T& operator()()
                    {
                        return snowdimStone2;
                    }
                    const T& operator()() const
                    {
                        return snowdimStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SnoworbStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "snoworb_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  snoworbStone;
                    T& operator()()
                    {
                        return snoworbStone;
                    }
                    const T& operator()() const
                    {
                        return snoworbStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SnoworbStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "snoworb_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  snoworbStone1;
                    T& operator()()
                    {
                        return snoworbStone1;
                    }
                    const T& operator()() const
                    {
                        return snoworbStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SnoworbStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "snoworb_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  snoworbStone2;
                    T& operator()()
                    {
                        return snoworbStone2;
                    }
                    const T& operator()() const
                    {
                        return snoworbStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LeafslitStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leafslit_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leafslitStone;
                    T& operator()()
                    {
                        return leafslitStone;
                    }
                    const T& operator()() const
                    {
                        return leafslitStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LeafslitStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leafslit_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leafslitStone1;
                    T& operator()()
                    {
                        return leafslitStone1;
                    }
                    const T& operator()() const
                    {
                        return leafslitStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LeafslitStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leafslit_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leafslitStone2;
                    T& operator()()
                    {
                        return leafslitStone2;
                    }
                    const T& operator()() const
                    {
                        return leafslitStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LeaftipStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leaftip_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leaftipStone;
                    T& operator()()
                    {
                        return leaftipStone;
                    }
                    const T& operator()() const
                    {
                        return leaftipStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LeaftipStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leaftip_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leaftipStone1;
                    T& operator()()
                    {
                        return leaftipStone1;
                    }
                    const T& operator()() const
                    {
                        return leaftipStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LeaftipStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leaftip_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leaftipStone2;
                    T& operator()()
                    {
                        return leaftipStone2;
                    }
                    const T& operator()() const
                    {
                        return leaftipStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LeafdimStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leafdim_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leafdimStone;
                    T& operator()()
                    {
                        return leafdimStone;
                    }
                    const T& operator()() const
                    {
                        return leafdimStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LeafdimStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leafdim_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leafdimStone1;
                    T& operator()()
                    {
                        return leafdimStone1;
                    }
                    const T& operator()() const
                    {
                        return leafdimStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LeafdimStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leafdim_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leafdimStone2;
                    T& operator()()
                    {
                        return leafdimStone2;
                    }
                    const T& operator()() const
                    {
                        return leafdimStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LeaforbStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leaforb_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leaforbStone;
                    T& operator()()
                    {
                        return leaforbStone;
                    }
                    const T& operator()() const
                    {
                        return leaforbStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LeaforbStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leaforb_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leaforbStone1;
                    T& operator()()
                    {
                        return leaforbStone1;
                    }
                    const T& operator()() const
                    {
                        return leaforbStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LeaforbStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leaforb_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leaforbStone2;
                    T& operator()()
                    {
                        return leaforbStone2;
                    }
                    const T& operator()() const
                    {
                        return leaforbStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DuskslitStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "duskslit_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  duskslitStone;
                    T& operator()()
                    {
                        return duskslitStone;
                    }
                    const T& operator()() const
                    {
                        return duskslitStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DuskslitStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "duskslit_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  duskslitStone1;
                    T& operator()()
                    {
                        return duskslitStone1;
                    }
                    const T& operator()() const
                    {
                        return duskslitStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DuskslitStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "duskslit_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  duskslitStone2;
                    T& operator()()
                    {
                        return duskslitStone2;
                    }
                    const T& operator()() const
                    {
                        return duskslitStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DusktipStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dusktip_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dusktipStone;
                    T& operator()()
                    {
                        return dusktipStone;
                    }
                    const T& operator()() const
                    {
                        return dusktipStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DusktipStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dusktip_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dusktipStone1;
                    T& operator()()
                    {
                        return dusktipStone1;
                    }
                    const T& operator()() const
                    {
                        return dusktipStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DusktipStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dusktip_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dusktipStone2;
                    T& operator()()
                    {
                        return dusktipStone2;
                    }
                    const T& operator()() const
                    {
                        return dusktipStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DuskdimStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "duskdim_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  duskdimStone;
                    T& operator()()
                    {
                        return duskdimStone;
                    }
                    const T& operator()() const
                    {
                        return duskdimStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DuskdimStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "duskdim_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  duskdimStone1;
                    T& operator()()
                    {
                        return duskdimStone1;
                    }
                    const T& operator()() const
                    {
                        return duskdimStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DuskdimStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "duskdim_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  duskdimStone2;
                    T& operator()()
                    {
                        return duskdimStone2;
                    }
                    const T& operator()() const
                    {
                        return duskdimStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DuskorbStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "duskorb_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  duskorbStone;
                    T& operator()()
                    {
                        return duskorbStone;
                    }
                    const T& operator()() const
                    {
                        return duskorbStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DuskorbStone1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "duskorb_stone_1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  duskorbStone1;
                    T& operator()()
                    {
                        return duskorbStone1;
                    }
                    const T& operator()() const
                    {
                        return duskorbStone1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DuskorbStone2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "duskorb_stone_2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  duskorbStone2;
                    T& operator()()
                    {
                        return duskorbStone2;
                    }
                    const T& operator()() const
                    {
                        return duskorbStone2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct PellucidStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pellucid_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pellucidStone;
                    T& operator()()
                    {
                        return pellucidStone;
                    }
                    const T& operator()() const
                    {
                        return pellucidStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct FernStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fern_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fernStone;
                    T& operator()()
                    {
                        return fernStone;
                    }
                    const T& operator()() const
                    {
                        return fernStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct TaupeStone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "taupe_stone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  taupeStone;
                    T& operator()()
                    {
                        return taupeStone;
                    }
                    const T& operator()() const
                    {
                        return taupeStone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct EschaBeads
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "escha_beads";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  eschaBeads;
                    T& operator()()
                    {
                        return eschaBeads;
                    }
                    const T& operator()() const
                    {
                        return eschaBeads;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct EschaSilt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "escha_silt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  eschaSilt;
                    T& operator()()
                    {
                        return eschaSilt;
                    }
                    const T& operator()() const
                    {
                        return eschaSilt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Potpourri
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "potpourri";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  potpourri;
                    T& operator()()
                    {
                        return potpourri;
                    }
                    const T& operator()() const
                    {
                        return potpourri;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct CurrentHallmarks
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "current_hallmarks";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  currentHallmarks;
                    T& operator()()
                    {
                        return currentHallmarks;
                    }
                    const T& operator()() const
                    {
                        return currentHallmarks;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct TotalHallmarks
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "total_hallmarks";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  totalHallmarks;
                    T& operator()()
                    {
                        return totalHallmarks;
                    }
                    const T& operator()() const
                    {
                        return totalHallmarks;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Gallantry
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "gallantry";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  gallantry;
                    T& operator()()
                    {
                        return gallantry;
                    }
                    const T& operator()() const
                    {
                        return gallantry;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct CrafterPoints
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "crafter_points";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  crafterPoints;
                    T& operator()()
                    {
                        return crafterPoints;
                    }
                    const T& operator()() const
                    {
                        return crafterPoints;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct FireCrystalSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fire_crystal_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fireCrystalSet;
                    T& operator()()
                    {
                        return fireCrystalSet;
                    }
                    const T& operator()() const
                    {
                        return fireCrystalSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct IceCrystalSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ice_crystal_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  iceCrystalSet;
                    T& operator()()
                    {
                        return iceCrystalSet;
                    }
                    const T& operator()() const
                    {
                        return iceCrystalSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct WindCrystalSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wind_crystal_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  windCrystalSet;
                    T& operator()()
                    {
                        return windCrystalSet;
                    }
                    const T& operator()() const
                    {
                        return windCrystalSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct EarthCrystalSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "earth_crystal_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  earthCrystalSet;
                    T& operator()()
                    {
                        return earthCrystalSet;
                    }
                    const T& operator()() const
                    {
                        return earthCrystalSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LightningCrystalSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lightning_crystal_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lightningCrystalSet;
                    T& operator()()
                    {
                        return lightningCrystalSet;
                    }
                    const T& operator()() const
                    {
                        return lightningCrystalSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct WaterCrystalSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "water_crystal_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  waterCrystalSet;
                    T& operator()()
                    {
                        return waterCrystalSet;
                    }
                    const T& operator()() const
                    {
                        return waterCrystalSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LightCrystalSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "light_crystal_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lightCrystalSet;
                    T& operator()()
                    {
                        return lightCrystalSet;
                    }
                    const T& operator()() const
                    {
                        return lightCrystalSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DarkCrystalSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dark_crystal_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  darkCrystalSet;
                    T& operator()()
                    {
                        return darkCrystalSet;
                    }
                    const T& operator()() const
                    {
                        return darkCrystalSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct McSSr01Set
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mc_s_sr01_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mcSSr01Set;
                    T& operator()()
                    {
                        return mcSSr01Set;
                    }
                    const T& operator()() const
                    {
                        return mcSSr01Set;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct McSSr02Set
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mc_s_sr02_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mcSSr02Set;
                    T& operator()()
                    {
                        return mcSSr02Set;
                    }
                    const T& operator()() const
                    {
                        return mcSSr02Set;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct McSSr03Set
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mc_s_sr03_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mcSSr03Set;
                    T& operator()()
                    {
                        return mcSSr03Set;
                    }
                    const T& operator()() const
                    {
                        return mcSSr03Set;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LiquefactionSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "liquefaction_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  liquefactionSpheresSet;
                    T& operator()()
                    {
                        return liquefactionSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return liquefactionSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct IndurationSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "induration_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  indurationSpheresSet;
                    T& operator()()
                    {
                        return indurationSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return indurationSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DetonationSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "detonation_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  detonationSpheresSet;
                    T& operator()()
                    {
                        return detonationSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return detonationSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct ScissionSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "scission_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  scissionSpheresSet;
                    T& operator()()
                    {
                        return scissionSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return scissionSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct ImpactionSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "impaction_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  impactionSpheresSet;
                    T& operator()()
                    {
                        return impactionSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return impactionSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct ReverberationSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reverberation_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reverberationSpheresSet;
                    T& operator()()
                    {
                        return reverberationSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return reverberationSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct TransfixionSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "transfixion_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  transfixionSpheresSet;
                    T& operator()()
                    {
                        return transfixionSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return transfixionSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct CompressionSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "compression_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  compressionSpheresSet;
                    T& operator()()
                    {
                        return compressionSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return compressionSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct FusionSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fusion_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fusionSpheresSet;
                    T& operator()()
                    {
                        return fusionSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return fusionSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DistortionSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "distortion_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  distortionSpheresSet;
                    T& operator()()
                    {
                        return distortionSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return distortionSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct FragmentationSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fragmentation_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fragmentationSpheresSet;
                    T& operator()()
                    {
                        return fragmentationSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return fragmentationSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct GravitationSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "gravitation_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  gravitationSpheresSet;
                    T& operator()()
                    {
                        return gravitationSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return gravitationSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct LightSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "light_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lightSpheresSet;
                    T& operator()()
                    {
                        return lightSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return lightSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct DarknessSpheresSet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "darkness_spheres_set";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  darknessSpheresSet;
                    T& operator()()
                    {
                        return darknessSpheresSet;
                    }
                    const T& operator()() const
                    {
                        return darknessSpheresSet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SilverAmanVoucher
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "silver_aman_voucher";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  silverAmanVoucher;
                    T& operator()()
                    {
                        return silverAmanVoucher;
                    }
                    const T& operator()() const
                    {
                        return silverAmanVoucher;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
    } // namespace CharPoints_

    struct CharPoints : sqlpp::table_t<CharPoints,
                                       CharPoints_::Charid,
                                       CharPoints_::SandoriaCp,
                                       CharPoints_::BastokCp,
                                       CharPoints_::WindurstCp,
                                       CharPoints_::BeastmanSeal,
                                       CharPoints_::KindredSeal,
                                       CharPoints_::KindredCrest,
                                       CharPoints_::HighKindredCrest,
                                       CharPoints_::SacredKindredCrest,
                                       CharPoints_::AncientBeastcoin,
                                       CharPoints_::ValorPoint,
                                       CharPoints_::Scyld,
                                       CharPoints_::GuildFishing,
                                       CharPoints_::GuildWoodworking,
                                       CharPoints_::GuildSmithing,
                                       CharPoints_::GuildGoldsmithing,
                                       CharPoints_::GuildWeaving,
                                       CharPoints_::GuildLeathercraft,
                                       CharPoints_::GuildBonecraft,
                                       CharPoints_::GuildAlchemy,
                                       CharPoints_::GuildCooking,
                                       CharPoints_::Cinder,
                                       CharPoints_::FireFewell,
                                       CharPoints_::IceFewell,
                                       CharPoints_::WindFewell,
                                       CharPoints_::EarthFewell,
                                       CharPoints_::LightningFewell,
                                       CharPoints_::WaterFewell,
                                       CharPoints_::LightFewell,
                                       CharPoints_::DarkFewell,
                                       CharPoints_::BallistaPoint,
                                       CharPoints_::FellowPoint,
                                       CharPoints_::DailyTally,
                                       CharPoints_::ChocobuckSandoria,
                                       CharPoints_::ChocobuckBastok,
                                       CharPoints_::ChocobuckWindurst,
                                       CharPoints_::ResearchMark,
                                       CharPoints_::TunnelWorm,
                                       CharPoints_::MorionWorm,
                                       CharPoints_::PhantomWorm,
                                       CharPoints_::MoblinMarble,
                                       CharPoints_::Infamy,
                                       CharPoints_::Prestige,
                                       CharPoints_::LegionPoint,
                                       CharPoints_::SparkOfEminence,
                                       CharPoints_::ShiningStar,
                                       CharPoints_::ImperialStanding,
                                       CharPoints_::LeujaoamAssaultPoint,
                                       CharPoints_::MamoolAssaultPoint,
                                       CharPoints_::LebrosAssaultPoint,
                                       CharPoints_::PeriqiaAssaultPoint,
                                       CharPoints_::IlrusiAssaultPoint,
                                       CharPoints_::NyzulIsleAssaultPoint,
                                       CharPoints_::ZeniPoint,
                                       CharPoints_::Jetton,
                                       CharPoints_::TherionIchor,
                                       CharPoints_::AlliedNotes,
                                       CharPoints_::AmanVouchers,
                                       CharPoints_::LoginPoints,
                                       CharPoints_::Bayld,
                                       CharPoints_::KineticUnit,
                                       CharPoints_::ObsidianFragment,
                                       CharPoints_::LebondoptWing,
                                       CharPoints_::PulchridoptWing,
                                       CharPoints_::MweyaPlasm,
                                       CharPoints_::Cruor,
                                       CharPoints_::ResistanceCredit,
                                       CharPoints_::DominionNote,
                                       CharPoints_::FifthEchelonTrophy,
                                       CharPoints_::FourthEchelonTrophy,
                                       CharPoints_::ThirdEchelonTrophy,
                                       CharPoints_::SecondEchelonTrophy,
                                       CharPoints_::FirstEchelonTrophy,
                                       CharPoints_::CavePoints,
                                       CharPoints_::IdTags,
                                       CharPoints_::OpCredits,
                                       CharPoints_::TraverserStones,
                                       CharPoints_::Voidstones,
                                       CharPoints_::KupofriedCorundums,
                                       CharPoints_::Imprimaturs,
                                       CharPoints_::PheromoneSacks,
                                       CharPoints_::RemsCh1,
                                       CharPoints_::RemsCh2,
                                       CharPoints_::RemsCh3,
                                       CharPoints_::RemsCh4,
                                       CharPoints_::RemsCh5,
                                       CharPoints_::RemsCh6,
                                       CharPoints_::RemsCh7,
                                       CharPoints_::RemsCh8,
                                       CharPoints_::RemsCh9,
                                       CharPoints_::RemsCh10,
                                       CharPoints_::ReclamationMarks,
                                       CharPoints_::UnityAccolades,
                                       CharPoints_::FireCrystals,
                                       CharPoints_::IceCrystals,
                                       CharPoints_::WindCrystals,
                                       CharPoints_::EarthCrystals,
                                       CharPoints_::LightningCrystals,
                                       CharPoints_::WaterCrystals,
                                       CharPoints_::LightCrystals,
                                       CharPoints_::DarkCrystals,
                                       CharPoints_::Deeds,
                                       CharPoints_::CurrentAccolades,
                                       CharPoints_::PrevAccolades,
                                       CharPoints_::MysticalCanteen,
                                       CharPoints_::GhastlyStone,
                                       CharPoints_::GhastlyStone1,
                                       CharPoints_::GhastlyStone2,
                                       CharPoints_::VerdigrisStone,
                                       CharPoints_::VerdigrisStone1,
                                       CharPoints_::VerdigrisStone2,
                                       CharPoints_::WailingStone,
                                       CharPoints_::WailingStone1,
                                       CharPoints_::WailingStone2,
                                       CharPoints_::SnowslitStone,
                                       CharPoints_::SnowslitStone1,
                                       CharPoints_::SnowslitStone2,
                                       CharPoints_::SnowtipStone,
                                       CharPoints_::SnowtipStone1,
                                       CharPoints_::SnowtipStone2,
                                       CharPoints_::SnowdimStone,
                                       CharPoints_::SnowdimStone1,
                                       CharPoints_::SnowdimStone2,
                                       CharPoints_::SnoworbStone,
                                       CharPoints_::SnoworbStone1,
                                       CharPoints_::SnoworbStone2,
                                       CharPoints_::LeafslitStone,
                                       CharPoints_::LeafslitStone1,
                                       CharPoints_::LeafslitStone2,
                                       CharPoints_::LeaftipStone,
                                       CharPoints_::LeaftipStone1,
                                       CharPoints_::LeaftipStone2,
                                       CharPoints_::LeafdimStone,
                                       CharPoints_::LeafdimStone1,
                                       CharPoints_::LeafdimStone2,
                                       CharPoints_::LeaforbStone,
                                       CharPoints_::LeaforbStone1,
                                       CharPoints_::LeaforbStone2,
                                       CharPoints_::DuskslitStone,
                                       CharPoints_::DuskslitStone1,
                                       CharPoints_::DuskslitStone2,
                                       CharPoints_::DusktipStone,
                                       CharPoints_::DusktipStone1,
                                       CharPoints_::DusktipStone2,
                                       CharPoints_::DuskdimStone,
                                       CharPoints_::DuskdimStone1,
                                       CharPoints_::DuskdimStone2,
                                       CharPoints_::DuskorbStone,
                                       CharPoints_::DuskorbStone1,
                                       CharPoints_::DuskorbStone2,
                                       CharPoints_::PellucidStone,
                                       CharPoints_::FernStone,
                                       CharPoints_::TaupeStone,
                                       CharPoints_::EschaBeads,
                                       CharPoints_::EschaSilt,
                                       CharPoints_::Potpourri,
                                       CharPoints_::CurrentHallmarks,
                                       CharPoints_::TotalHallmarks,
                                       CharPoints_::Gallantry,
                                       CharPoints_::CrafterPoints,
                                       CharPoints_::FireCrystalSet,
                                       CharPoints_::IceCrystalSet,
                                       CharPoints_::WindCrystalSet,
                                       CharPoints_::EarthCrystalSet,
                                       CharPoints_::LightningCrystalSet,
                                       CharPoints_::WaterCrystalSet,
                                       CharPoints_::LightCrystalSet,
                                       CharPoints_::DarkCrystalSet,
                                       CharPoints_::McSSr01Set,
                                       CharPoints_::McSSr02Set,
                                       CharPoints_::McSSr03Set,
                                       CharPoints_::LiquefactionSpheresSet,
                                       CharPoints_::IndurationSpheresSet,
                                       CharPoints_::DetonationSpheresSet,
                                       CharPoints_::ScissionSpheresSet,
                                       CharPoints_::ImpactionSpheresSet,
                                       CharPoints_::ReverberationSpheresSet,
                                       CharPoints_::TransfixionSpheresSet,
                                       CharPoints_::CompressionSpheresSet,
                                       CharPoints_::FusionSpheresSet,
                                       CharPoints_::DistortionSpheresSet,
                                       CharPoints_::FragmentationSpheresSet,
                                       CharPoints_::GravitationSpheresSet,
                                       CharPoints_::LightSpheresSet,
                                       CharPoints_::DarknessSpheresSet,
                                       CharPoints_::SilverAmanVoucher>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_points";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charPoints;
                T& operator()()
                {
                    return charPoints;
                }
                const T& operator()() const
                {
                    return charPoints;
                }
            };
        };
    };
    namespace CharProfile_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct RankPoints
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rank_points";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rankPoints;
                    T& operator()()
                    {
                        return rankPoints;
                    }
                    const T& operator()() const
                    {
                        return rankPoints;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct RankSandoria
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rank_sandoria";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rankSandoria;
                    T& operator()()
                    {
                        return rankSandoria;
                    }
                    const T& operator()() const
                    {
                        return rankSandoria;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct RankBastok
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rank_bastok";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rankBastok;
                    T& operator()()
                    {
                        return rankBastok;
                    }
                    const T& operator()() const
                    {
                        return rankBastok;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct RankWindurst
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rank_windurst";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rankWindurst;
                    T& operator()()
                    {
                        return rankWindurst;
                    }
                    const T& operator()() const
                    {
                        return rankWindurst;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct FameSandoria
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_sandoria";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameSandoria;
                    T& operator()()
                    {
                        return fameSandoria;
                    }
                    const T& operator()() const
                    {
                        return fameSandoria;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameBastok
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_bastok";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameBastok;
                    T& operator()()
                    {
                        return fameBastok;
                    }
                    const T& operator()() const
                    {
                        return fameBastok;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameWindurst
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_windurst";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameWindurst;
                    T& operator()()
                    {
                        return fameWindurst;
                    }
                    const T& operator()() const
                    {
                        return fameWindurst;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameNorg
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_norg";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameNorg;
                    T& operator()()
                    {
                        return fameNorg;
                    }
                    const T& operator()() const
                    {
                        return fameNorg;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameJeuno
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_jeuno";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameJeuno;
                    T& operator()()
                    {
                        return fameJeuno;
                    }
                    const T& operator()() const
                    {
                        return fameJeuno;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameAbyKonschtat
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_aby_konschtat";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameAbyKonschtat;
                    T& operator()()
                    {
                        return fameAbyKonschtat;
                    }
                    const T& operator()() const
                    {
                        return fameAbyKonschtat;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameAbyTahrongi
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_aby_tahrongi";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameAbyTahrongi;
                    T& operator()()
                    {
                        return fameAbyTahrongi;
                    }
                    const T& operator()() const
                    {
                        return fameAbyTahrongi;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameAbyLatheine
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_aby_latheine";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameAbyLatheine;
                    T& operator()()
                    {
                        return fameAbyLatheine;
                    }
                    const T& operator()() const
                    {
                        return fameAbyLatheine;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameAbyMisareaux
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_aby_misareaux";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameAbyMisareaux;
                    T& operator()()
                    {
                        return fameAbyMisareaux;
                    }
                    const T& operator()() const
                    {
                        return fameAbyMisareaux;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameAbyVunkerl
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_aby_vunkerl";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameAbyVunkerl;
                    T& operator()()
                    {
                        return fameAbyVunkerl;
                    }
                    const T& operator()() const
                    {
                        return fameAbyVunkerl;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameAbyAttohwa
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_aby_attohwa";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameAbyAttohwa;
                    T& operator()()
                    {
                        return fameAbyAttohwa;
                    }
                    const T& operator()() const
                    {
                        return fameAbyAttohwa;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameAbyAltepa
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_aby_altepa";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameAbyAltepa;
                    T& operator()()
                    {
                        return fameAbyAltepa;
                    }
                    const T& operator()() const
                    {
                        return fameAbyAltepa;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameAbyGrauberg
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_aby_grauberg";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameAbyGrauberg;
                    T& operator()()
                    {
                        return fameAbyGrauberg;
                    }
                    const T& operator()() const
                    {
                        return fameAbyGrauberg;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameAbyUleguerand
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_aby_uleguerand";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameAbyUleguerand;
                    T& operator()()
                    {
                        return fameAbyUleguerand;
                    }
                    const T& operator()() const
                    {
                        return fameAbyUleguerand;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct FameAdoulin
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fame_adoulin";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fameAdoulin;
                    T& operator()()
                    {
                        return fameAdoulin;
                    }
                    const T& operator()() const
                    {
                        return fameAdoulin;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct UnityLeader
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "unity_leader";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  unityLeader;
                    T& operator()()
                    {
                        return unityLeader;
                    }
                    const T& operator()() const
                    {
                        return unityLeader;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace CharProfile_

    struct CharProfile : sqlpp::table_t<CharProfile,
                                        CharProfile_::Charid,
                                        CharProfile_::RankPoints,
                                        CharProfile_::RankSandoria,
                                        CharProfile_::RankBastok,
                                        CharProfile_::RankWindurst,
                                        CharProfile_::FameSandoria,
                                        CharProfile_::FameBastok,
                                        CharProfile_::FameWindurst,
                                        CharProfile_::FameNorg,
                                        CharProfile_::FameJeuno,
                                        CharProfile_::FameAbyKonschtat,
                                        CharProfile_::FameAbyTahrongi,
                                        CharProfile_::FameAbyLatheine,
                                        CharProfile_::FameAbyMisareaux,
                                        CharProfile_::FameAbyVunkerl,
                                        CharProfile_::FameAbyAttohwa,
                                        CharProfile_::FameAbyAltepa,
                                        CharProfile_::FameAbyGrauberg,
                                        CharProfile_::FameAbyUleguerand,
                                        CharProfile_::FameAdoulin,
                                        CharProfile_::UnityLeader>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_profile";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charProfile;
                T& operator()()
                {
                    return charProfile;
                }
                const T& operator()() const
                {
                    return charProfile;
                }
            };
        };
    };
    namespace CharRecast_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Id
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  id;
                    T& operator()()
                    {
                        return id;
                    }
                    const T& operator()() const
                    {
                        return id;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct Time
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "time";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  time;
                    T& operator()()
                    {
                        return time;
                    }
                    const T& operator()() const
                    {
                        return time;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
        struct Recast
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "recast";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  recast;
                    T& operator()()
                    {
                        return recast;
                    }
                    const T& operator()() const
                    {
                        return recast;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
    } // namespace CharRecast_

    struct CharRecast : sqlpp::table_t<CharRecast,
                                       CharRecast_::Charid,
                                       CharRecast_::Id,
                                       CharRecast_::Time,
                                       CharRecast_::Recast>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_recast";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charRecast;
                T& operator()()
                {
                    return charRecast;
                }
                const T& operator()() const
                {
                    return charRecast;
                }
            };
        };
    };
    namespace CharSkills_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Skillid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "skillid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  skillid;
                    T& operator()()
                    {
                        return skillid;
                    }
                    const T& operator()() const
                    {
                        return skillid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Rank
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rank";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rank;
                    T& operator()()
                    {
                        return rank;
                    }
                    const T& operator()() const
                    {
                        return rank;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace CharSkills_

    struct CharSkills : sqlpp::table_t<CharSkills,
                                       CharSkills_::Charid,
                                       CharSkills_::Skillid,
                                       CharSkills_::Value,
                                       CharSkills_::Rank>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_skills";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charSkills;
                T& operator()()
                {
                    return charSkills;
                }
                const T& operator()() const
                {
                    return charSkills;
                }
            };
        };
    };
    namespace CharSpells_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Spellid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spellid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  spellid;
                    T& operator()()
                    {
                        return spellid;
                    }
                    const T& operator()() const
                    {
                        return spellid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
    } // namespace CharSpells_

    struct CharSpells : sqlpp::table_t<CharSpells,
                                       CharSpells_::Charid,
                                       CharSpells_::Spellid>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_spells";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charSpells;
                T& operator()()
                {
                    return charSpells;
                }
                const T& operator()() const
                {
                    return charSpells;
                }
            };
        };
    };
    namespace CharStats_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Hp
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "hp";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  hp;
                    T& operator()()
                    {
                        return hp;
                    }
                    const T& operator()() const
                    {
                        return hp;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Mp
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mp";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mp;
                    T& operator()()
                    {
                        return mp;
                    }
                    const T& operator()() const
                    {
                        return mp;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Nameflags
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "nameflags";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  nameflags;
                    T& operator()()
                    {
                        return nameflags;
                    }
                    const T& operator()() const
                    {
                        return nameflags;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Mhflag
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mhflag";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mhflag;
                    T& operator()()
                    {
                        return mhflag;
                    }
                    const T& operator()() const
                    {
                        return mhflag;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Mjob
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mjob";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mjob;
                    T& operator()()
                    {
                        return mjob;
                    }
                    const T& operator()() const
                    {
                        return mjob;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Sjob
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sjob";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sjob;
                    T& operator()()
                    {
                        return sjob;
                    }
                    const T& operator()() const
                    {
                        return sjob;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Death
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "death";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  death;
                    T& operator()()
                    {
                        return death;
                    }
                    const T& operator()() const
                    {
                        return death;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct 2h
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "2h";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T 2H;
                    T& operator()()
                    {
                        return 2H;
                    }
                    const T& operator()() const
                    {
                        return 2H;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Title
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "title";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  title;
                    T& operator()()
                    {
                        return title;
                    }
                    const T& operator()() const
                    {
                        return title;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct BazaarMessage
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "bazaar_message";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  bazaarMessage;
                    T& operator()()
                    {
                        return bazaarMessage;
                    }
                    const T& operator()() const
                    {
                        return bazaarMessage;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
        };
        struct Zoning
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zoning";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zoning;
                    T& operator()()
                    {
                        return zoning;
                    }
                    const T& operator()() const
                    {
                        return zoning;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Mlvl
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mlvl";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mlvl;
                    T& operator()()
                    {
                        return mlvl;
                    }
                    const T& operator()() const
                    {
                        return mlvl;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Slvl
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "slvl";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  slvl;
                    T& operator()()
                    {
                        return slvl;
                    }
                    const T& operator()() const
                    {
                        return slvl;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct PetId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pet_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  petId;
                    T& operator()()
                    {
                        return petId;
                    }
                    const T& operator()() const
                    {
                        return petId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct PetType
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pet_type";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  petType;
                    T& operator()()
                    {
                        return petType;
                    }
                    const T& operator()() const
                    {
                        return petType;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct PetHp
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pet_hp";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  petHp;
                    T& operator()()
                    {
                        return petHp;
                    }
                    const T& operator()() const
                    {
                        return petHp;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct PetMp
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pet_mp";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  petMp;
                    T& operator()()
                    {
                        return petMp;
                    }
                    const T& operator()() const
                    {
                        return petMp;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace CharStats_

    struct CharStats : sqlpp::table_t<CharStats,
                                      CharStats_::Charid,
                                      CharStats_::Hp,
                                      CharStats_::Mp,
                                      CharStats_::Nameflags,
                                      CharStats_::Mhflag,
                                      CharStats_::Mjob,
                                      CharStats_::Sjob,
                                      CharStats_::Death,
                                      CharStats_::2h,
                                      CharStats_::Title,
                                      CharStats_::BazaarMessage,
                                      CharStats_::Zoning,
                                      CharStats_::Mlvl,
                                      CharStats_::Slvl,
                                      CharStats_::PetId,
                                      CharStats_::PetType,
                                      CharStats_::PetHp,
                                      CharStats_::PetMp>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_stats";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charStats;
                T& operator()()
                {
                    return charStats;
                }
                const T& operator()() const
                {
                    return charStats;
                }
            };
        };
    };
    namespace CharStorage_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Inventory
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "inventory";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  inventory;
                    T& operator()()
                    {
                        return inventory;
                    }
                    const T& operator()() const
                    {
                        return inventory;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Safe
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "safe";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  safe;
                    T& operator()()
                    {
                        return safe;
                    }
                    const T& operator()() const
                    {
                        return safe;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Locker
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "locker";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  locker;
                    T& operator()()
                    {
                        return locker;
                    }
                    const T& operator()() const
                    {
                        return locker;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Satchel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "satchel";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  satchel;
                    T& operator()()
                    {
                        return satchel;
                    }
                    const T& operator()() const
                    {
                        return satchel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Sack
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sack";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sack;
                    T& operator()()
                    {
                        return sack;
                    }
                    const T& operator()() const
                    {
                        return sack;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Case
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "case";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T case;
                    T& operator()()
                    {
                        return case;
                    }
                    const T& operator()() const
                    {
                        return case;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Wardrobe
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wardrobe";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  wardrobe;
                    T& operator()()
                    {
                        return wardrobe;
                    }
                    const T& operator()() const
                    {
                        return wardrobe;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Wardrobe2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wardrobe2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  wardrobe2;
                    T& operator()()
                    {
                        return wardrobe2;
                    }
                    const T& operator()() const
                    {
                        return wardrobe2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Wardrobe3
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wardrobe3";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  wardrobe3;
                    T& operator()()
                    {
                        return wardrobe3;
                    }
                    const T& operator()() const
                    {
                        return wardrobe3;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Wardrobe4
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wardrobe4";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  wardrobe4;
                    T& operator()()
                    {
                        return wardrobe4;
                    }
                    const T& operator()() const
                    {
                        return wardrobe4;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace CharStorage_

    struct CharStorage : sqlpp::table_t<CharStorage,
                                        CharStorage_::Charid,
                                        CharStorage_::Inventory,
                                        CharStorage_::Safe,
                                        CharStorage_::Locker,
                                        CharStorage_::Satchel,
                                        CharStorage_::Sack,
                                        CharStorage_::Case,
                                        CharStorage_::Wardrobe,
                                        CharStorage_::Wardrobe2,
                                        CharStorage_::Wardrobe3,
                                        CharStorage_::Wardrobe4>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_storage";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charStorage;
                T& operator()()
                {
                    return charStorage;
                }
                const T& operator()() const
                {
                    return charStorage;
                }
            };
        };
    };
    namespace CharStyle_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Head
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "head";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  head;
                    T& operator()()
                    {
                        return head;
                    }
                    const T& operator()() const
                    {
                        return head;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Body
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "body";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  body;
                    T& operator()()
                    {
                        return body;
                    }
                    const T& operator()() const
                    {
                        return body;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Hands
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "hands";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  hands;
                    T& operator()()
                    {
                        return hands;
                    }
                    const T& operator()() const
                    {
                        return hands;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Legs
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "legs";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  legs;
                    T& operator()()
                    {
                        return legs;
                    }
                    const T& operator()() const
                    {
                        return legs;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Feet
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "feet";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  feet;
                    T& operator()()
                    {
                        return feet;
                    }
                    const T& operator()() const
                    {
                        return feet;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Main
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "main";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  main;
                    T& operator()()
                    {
                        return main;
                    }
                    const T& operator()() const
                    {
                        return main;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Sub
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sub";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sub;
                    T& operator()()
                    {
                        return sub;
                    }
                    const T& operator()() const
                    {
                        return sub;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Ranged
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ranged";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ranged;
                    T& operator()()
                    {
                        return ranged;
                    }
                    const T& operator()() const
                    {
                        return ranged;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace CharStyle_

    struct CharStyle : sqlpp::table_t<CharStyle,
                                      CharStyle_::Charid,
                                      CharStyle_::Head,
                                      CharStyle_::Body,
                                      CharStyle_::Hands,
                                      CharStyle_::Legs,
                                      CharStyle_::Feet,
                                      CharStyle_::Main,
                                      CharStyle_::Sub,
                                      CharStyle_::Ranged>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_style";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charStyle;
                T& operator()()
                {
                    return charStyle;
                }
                const T& operator()() const
                {
                    return charStyle;
                }
            };
        };
    };
    namespace CharUnlocks_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct OutpostSandy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "outpost_sandy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  outpostSandy;
                    T& operator()()
                    {
                        return outpostSandy;
                    }
                    const T& operator()() const
                    {
                        return outpostSandy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct OutpostBastok
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "outpost_bastok";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  outpostBastok;
                    T& operator()()
                    {
                        return outpostBastok;
                    }
                    const T& operator()() const
                    {
                        return outpostBastok;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct OutpostWindy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "outpost_windy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  outpostWindy;
                    T& operator()()
                    {
                        return outpostWindy;
                    }
                    const T& operator()() const
                    {
                        return outpostWindy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct MogLocker
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mog_locker";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mogLocker;
                    T& operator()()
                    {
                        return mogLocker;
                    }
                    const T& operator()() const
                    {
                        return mogLocker;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct RunicPortal
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "runic_portal";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  runicPortal;
                    T& operator()()
                    {
                        return runicPortal;
                    }
                    const T& operator()() const
                    {
                        return runicPortal;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Maw
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "maw";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  maw;
                    T& operator()()
                    {
                        return maw;
                    }
                    const T& operator()() const
                    {
                        return maw;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct CampaignSandy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "campaign_sandy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  campaignSandy;
                    T& operator()()
                    {
                        return campaignSandy;
                    }
                    const T& operator()() const
                    {
                        return campaignSandy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct CampaignBastok
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "campaign_bastok";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  campaignBastok;
                    T& operator()()
                    {
                        return campaignBastok;
                    }
                    const T& operator()() const
                    {
                        return campaignBastok;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct CampaignWindy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "campaign_windy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  campaignWindy;
                    T& operator()()
                    {
                        return campaignWindy;
                    }
                    const T& operator()() const
                    {
                        return campaignWindy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Homepoints
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "homepoints";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  homepoints;
                    T& operator()()
                    {
                        return homepoints;
                    }
                    const T& operator()() const
                    {
                        return homepoints;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
        };
        struct Survivals
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "survivals";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  survivals;
                    T& operator()()
                    {
                        return survivals;
                    }
                    const T& operator()() const
                    {
                        return survivals;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
        };
    } // namespace CharUnlocks_

    struct CharUnlocks : sqlpp::table_t<CharUnlocks,
                                        CharUnlocks_::Charid,
                                        CharUnlocks_::OutpostSandy,
                                        CharUnlocks_::OutpostBastok,
                                        CharUnlocks_::OutpostWindy,
                                        CharUnlocks_::MogLocker,
                                        CharUnlocks_::RunicPortal,
                                        CharUnlocks_::Maw,
                                        CharUnlocks_::CampaignSandy,
                                        CharUnlocks_::CampaignBastok,
                                        CharUnlocks_::CampaignWindy,
                                        CharUnlocks_::Homepoints,
                                        CharUnlocks_::Survivals>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_unlocks";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charUnlocks;
                T& operator()()
                {
                    return charUnlocks;
                }
                const T& operator()() const
                {
                    return charUnlocks;
                }
            };
        };
    };
    namespace CharVars_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Varname
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "varname";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  varname;
                    T& operator()()
                    {
                        return varname;
                    }
                    const T& operator()() const
                    {
                        return varname;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
    } // namespace CharVars_

    struct CharVars : sqlpp::table_t<CharVars,
                                     CharVars_::Charid,
                                     CharVars_::Varname,
                                     CharVars_::Value>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_vars";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charVars;
                T& operator()()
                {
                    return charVars;
                }
                const T& operator()() const
                {
                    return charVars;
                }
            };
        };
    };
    namespace CharZoneIn_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Accid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "accid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  accid;
                    T& operator()()
                    {
                        return accid;
                    }
                    const T& operator()() const
                    {
                        return accid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Charname
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charname";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charname;
                    T& operator()()
                    {
                        return charname;
                    }
                    const T& operator()() const
                    {
                        return charname;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Nation
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "nation";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  nation;
                    T& operator()()
                    {
                        return nation;
                    }
                    const T& operator()() const
                    {
                        return nation;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct PosZone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_zone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posZone;
                    T& operator()()
                    {
                        return posZone;
                    }
                    const T& operator()() const
                    {
                        return posZone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct PosPrevzone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_prevzone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posPrevzone;
                    T& operator()()
                    {
                        return posPrevzone;
                    }
                    const T& operator()() const
                    {
                        return posPrevzone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct PosRot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_rot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posRot;
                    T& operator()()
                    {
                        return posRot;
                    }
                    const T& operator()() const
                    {
                        return posRot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct PosX
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_x";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posX;
                    T& operator()()
                    {
                        return posX;
                    }
                    const T& operator()() const
                    {
                        return posX;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct PosY
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_y";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posY;
                    T& operator()()
                    {
                        return posY;
                    }
                    const T& operator()() const
                    {
                        return posY;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct PosZ
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_z";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posZ;
                    T& operator()()
                    {
                        return posZ;
                    }
                    const T& operator()() const
                    {
                        return posZ;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Moghouse
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "moghouse";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  moghouse;
                    T& operator()()
                    {
                        return moghouse;
                    }
                    const T& operator()() const
                    {
                        return moghouse;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Boundary
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "boundary";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  boundary;
                    T& operator()()
                    {
                        return boundary;
                    }
                    const T& operator()() const
                    {
                        return boundary;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct HomeZone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "home_zone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  homeZone;
                    T& operator()()
                    {
                        return homeZone;
                    }
                    const T& operator()() const
                    {
                        return homeZone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct HomeRot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "home_rot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  homeRot;
                    T& operator()()
                    {
                        return homeRot;
                    }
                    const T& operator()() const
                    {
                        return homeRot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct HomeX
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "home_x";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  homeX;
                    T& operator()()
                    {
                        return homeX;
                    }
                    const T& operator()() const
                    {
                        return homeX;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct HomeY
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "home_y";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  homeY;
                    T& operator()()
                    {
                        return homeY;
                    }
                    const T& operator()() const
                    {
                        return homeY;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct HomeZ
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "home_z";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  homeZ;
                    T& operator()()
                    {
                        return homeZ;
                    }
                    const T& operator()() const
                    {
                        return homeZ;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Missions
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "missions";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  missions;
                    T& operator()()
                    {
                        return missions;
                    }
                    const T& operator()() const
                    {
                        return missions;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Assault
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "assault";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  assault;
                    T& operator()()
                    {
                        return assault;
                    }
                    const T& operator()() const
                    {
                        return assault;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Campaign
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "campaign";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  campaign;
                    T& operator()()
                    {
                        return campaign;
                    }
                    const T& operator()() const
                    {
                        return campaign;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Eminence
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "eminence";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  eminence;
                    T& operator()()
                    {
                        return eminence;
                    }
                    const T& operator()() const
                    {
                        return eminence;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Quests
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "quests";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  quests;
                    T& operator()()
                    {
                        return quests;
                    }
                    const T& operator()() const
                    {
                        return quests;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Keyitems
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "keyitems";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  keyitems;
                    T& operator()()
                    {
                        return keyitems;
                    }
                    const T& operator()() const
                    {
                        return keyitems;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct SetBlueSpells
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "set_blue_spells";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  setBlueSpells;
                    T& operator()()
                    {
                        return setBlueSpells;
                    }
                    const T& operator()() const
                    {
                        return setBlueSpells;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Abilities
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "abilities";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  abilities;
                    T& operator()()
                    {
                        return abilities;
                    }
                    const T& operator()() const
                    {
                        return abilities;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Weaponskills
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "weaponskills";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  weaponskills;
                    T& operator()()
                    {
                        return weaponskills;
                    }
                    const T& operator()() const
                    {
                        return weaponskills;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Titles
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "titles";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  titles;
                    T& operator()()
                    {
                        return titles;
                    }
                    const T& operator()() const
                    {
                        return titles;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Zones
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zones";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zones;
                    T& operator()()
                    {
                        return zones;
                    }
                    const T& operator()() const
                    {
                        return zones;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Playtime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "playtime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  playtime;
                    T& operator()()
                    {
                        return playtime;
                    }
                    const T& operator()() const
                    {
                        return playtime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct UnlockedWeapons
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "unlocked_weapons";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  unlockedWeapons;
                    T& operator()()
                    {
                        return unlockedWeapons;
                    }
                    const T& operator()() const
                    {
                        return unlockedWeapons;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Gmlevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "gmlevel";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  gmlevel;
                    T& operator()()
                    {
                        return gmlevel;
                    }
                    const T& operator()() const
                    {
                        return gmlevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Languages
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "languages";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  languages;
                    T& operator()()
                    {
                        return languages;
                    }
                    const T& operator()() const
                    {
                        return languages;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Mentor
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mentor";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mentor;
                    T& operator()()
                    {
                        return mentor;
                    }
                    const T& operator()() const
                    {
                        return mentor;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct JobMaster
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "job_master";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jobMaster;
                    T& operator()()
                    {
                        return jobMaster;
                    }
                    const T& operator()() const
                    {
                        return jobMaster;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct CampaignAllegiance
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "campaign_allegiance";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  campaignAllegiance;
                    T& operator()()
                    {
                        return campaignAllegiance;
                    }
                    const T& operator()() const
                    {
                        return campaignAllegiance;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Isstylelocked
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "isstylelocked";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  isstylelocked;
                    T& operator()()
                    {
                        return isstylelocked;
                    }
                    const T& operator()() const
                    {
                        return isstylelocked;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Nnameflags
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "nnameflags";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  nnameflags;
                    T& operator()()
                    {
                        return nnameflags;
                    }
                    const T& operator()() const
                    {
                        return nnameflags;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Moghancement
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "moghancement";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  moghancement;
                    T& operator()()
                    {
                        return moghancement;
                    }
                    const T& operator()() const
                    {
                        return moghancement;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Timecreated
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "timecreated";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timecreated;
                    T& operator()()
                    {
                        return timecreated;
                    }
                    const T& operator()() const
                    {
                        return timecreated;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Lastupdate
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lastupdate";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lastupdate;
                    T& operator()()
                    {
                        return lastupdate;
                    }
                    const T& operator()() const
                    {
                        return lastupdate;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
        };
    } // namespace CharZoneIn_

    struct CharZoneIn : sqlpp::table_t<CharZoneIn,
                                       CharZoneIn_::Charid,
                                       CharZoneIn_::Accid,
                                       CharZoneIn_::Charname,
                                       CharZoneIn_::Nation,
                                       CharZoneIn_::PosZone,
                                       CharZoneIn_::PosPrevzone,
                                       CharZoneIn_::PosRot,
                                       CharZoneIn_::PosX,
                                       CharZoneIn_::PosY,
                                       CharZoneIn_::PosZ,
                                       CharZoneIn_::Moghouse,
                                       CharZoneIn_::Boundary,
                                       CharZoneIn_::HomeZone,
                                       CharZoneIn_::HomeRot,
                                       CharZoneIn_::HomeX,
                                       CharZoneIn_::HomeY,
                                       CharZoneIn_::HomeZ,
                                       CharZoneIn_::Missions,
                                       CharZoneIn_::Assault,
                                       CharZoneIn_::Campaign,
                                       CharZoneIn_::Eminence,
                                       CharZoneIn_::Quests,
                                       CharZoneIn_::Keyitems,
                                       CharZoneIn_::SetBlueSpells,
                                       CharZoneIn_::Abilities,
                                       CharZoneIn_::Weaponskills,
                                       CharZoneIn_::Titles,
                                       CharZoneIn_::Zones,
                                       CharZoneIn_::Playtime,
                                       CharZoneIn_::UnlockedWeapons,
                                       CharZoneIn_::Gmlevel,
                                       CharZoneIn_::Languages,
                                       CharZoneIn_::Mentor,
                                       CharZoneIn_::JobMaster,
                                       CharZoneIn_::CampaignAllegiance,
                                       CharZoneIn_::Isstylelocked,
                                       CharZoneIn_::Nnameflags,
                                       CharZoneIn_::Moghancement,
                                       CharZoneIn_::Timecreated,
                                       CharZoneIn_::Lastupdate>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "char_zone_in";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  charZoneIn;
                T& operator()()
                {
                    return charZoneIn;
                }
                const T& operator()() const
                {
                    return charZoneIn;
                }
            };
        };
    };
    namespace CheatTypes_
    {
        struct Cheatid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "cheatid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  cheatid;
                    T& operator()()
                    {
                        return cheatid;
                    }
                    const T& operator()() const
                    {
                        return cheatid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Description
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "description";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  description;
                    T& operator()()
                    {
                        return description;
                    }
                    const T& operator()() const
                    {
                        return description;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Argument
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "argument";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  argument;
                    T& operator()()
                    {
                        return argument;
                    }
                    const T& operator()() const
                    {
                        return argument;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ActionBitmask
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "action_bitmask";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  actionBitmask;
                    T& operator()()
                    {
                        return actionBitmask;
                    }
                    const T& operator()() const
                    {
                        return actionBitmask;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct WarningMessage
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "warning_message";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  warningMessage;
                    T& operator()()
                    {
                        return warningMessage;
                    }
                    const T& operator()() const
                    {
                        return warningMessage;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
    } // namespace CheatTypes_

    struct CheatTypes : sqlpp::table_t<CheatTypes,
                                       CheatTypes_::Cheatid,
                                       CheatTypes_::Name,
                                       CheatTypes_::Description,
                                       CheatTypes_::Argument,
                                       CheatTypes_::ActionBitmask,
                                       CheatTypes_::WarningMessage>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "cheat_types";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  cheatTypes;
                T& operator()()
                {
                    return cheatTypes;
                }
                const T& operator()() const
                {
                    return cheatTypes;
                }
            };
        };
    };
    namespace ConquestSystem_
    {
        struct RegionId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "region_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  regionId;
                    T& operator()()
                    {
                        return regionId;
                    }
                    const T& operator()() const
                    {
                        return regionId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct RegionControl
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "region_control";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  regionControl;
                    T& operator()()
                    {
                        return regionControl;
                    }
                    const T& operator()() const
                    {
                        return regionControl;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct RegionControlPrev
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "region_control_prev";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  regionControlPrev;
                    T& operator()()
                    {
                        return regionControlPrev;
                    }
                    const T& operator()() const
                    {
                        return regionControlPrev;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct SandoriaInfluence
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sandoria_influence";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sandoriaInfluence;
                    T& operator()()
                    {
                        return sandoriaInfluence;
                    }
                    const T& operator()() const
                    {
                        return sandoriaInfluence;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
        struct BastokInfluence
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "bastok_influence";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  bastokInfluence;
                    T& operator()()
                    {
                        return bastokInfluence;
                    }
                    const T& operator()() const
                    {
                        return bastokInfluence;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
        struct WindurstInfluence
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "windurst_influence";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  windurstInfluence;
                    T& operator()()
                    {
                        return windurstInfluence;
                    }
                    const T& operator()() const
                    {
                        return windurstInfluence;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
        struct BeastmenInfluence
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "beastmen_influence";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  beastmenInfluence;
                    T& operator()()
                    {
                        return beastmenInfluence;
                    }
                    const T& operator()() const
                    {
                        return beastmenInfluence;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
    } // namespace ConquestSystem_

    struct ConquestSystem : sqlpp::table_t<ConquestSystem,
                                           ConquestSystem_::RegionId,
                                           ConquestSystem_::RegionControl,
                                           ConquestSystem_::RegionControlPrev,
                                           ConquestSystem_::SandoriaInfluence,
                                           ConquestSystem_::BastokInfluence,
                                           ConquestSystem_::WindurstInfluence,
                                           ConquestSystem_::BeastmenInfluence>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "conquest_system";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  conquestSystem;
                T& operator()()
                {
                    return conquestSystem;
                }
                const T& operator()() const
                {
                    return conquestSystem;
                }
            };
        };
    };
    namespace DeliveryBox_
    {
        struct Charid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charid;
                    T& operator()()
                    {
                        return charid;
                    }
                    const T& operator()() const
                    {
                        return charid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Charname
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charname";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charname;
                    T& operator()()
                    {
                        return charname;
                    }
                    const T& operator()() const
                    {
                        return charname;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Box
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "box";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  box;
                    T& operator()()
                    {
                        return box;
                    }
                    const T& operator()() const
                    {
                        return box;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Slot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "slot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  slot;
                    T& operator()()
                    {
                        return slot;
                    }
                    const T& operator()() const
                    {
                        return slot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Itemid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemid;
                    T& operator()()
                    {
                        return itemid;
                    }
                    const T& operator()() const
                    {
                        return itemid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Itemsubid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemsubid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemsubid;
                    T& operator()()
                    {
                        return itemsubid;
                    }
                    const T& operator()() const
                    {
                        return itemsubid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Quantity
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "quantity";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  quantity;
                    T& operator()()
                    {
                        return quantity;
                    }
                    const T& operator()() const
                    {
                        return quantity;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Extra
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "extra";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  extra;
                    T& operator()()
                    {
                        return extra;
                    }
                    const T& operator()() const
                    {
                        return extra;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
        };
        struct Senderid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "senderid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  senderid;
                    T& operator()()
                    {
                        return senderid;
                    }
                    const T& operator()() const
                    {
                        return senderid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Sender
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sender";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sender;
                    T& operator()()
                    {
                        return sender;
                    }
                    const T& operator()() const
                    {
                        return sender;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Received
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "received";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  received;
                    T& operator()()
                    {
                        return received;
                    }
                    const T& operator()() const
                    {
                        return received;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct Sent
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sent";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sent;
                    T& operator()()
                    {
                        return sent;
                    }
                    const T& operator()() const
                    {
                        return sent;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
    } // namespace DeliveryBox_

    struct DeliveryBox : sqlpp::table_t<DeliveryBox,
                                        DeliveryBox_::Charid,
                                        DeliveryBox_::Charname,
                                        DeliveryBox_::Box,
                                        DeliveryBox_::Slot,
                                        DeliveryBox_::Itemid,
                                        DeliveryBox_::Itemsubid,
                                        DeliveryBox_::Quantity,
                                        DeliveryBox_::Extra,
                                        DeliveryBox_::Senderid,
                                        DeliveryBox_::Sender,
                                        DeliveryBox_::Received,
                                        DeliveryBox_::Sent>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "delivery_box";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  deliveryBox;
                T& operator()()
                {
                    return deliveryBox;
                }
                const T& operator()() const
                {
                    return deliveryBox;
                }
            };
        };
    };
    namespace DespoilEffects_
    {
        struct ItemId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemId;
                    T& operator()()
                    {
                        return itemId;
                    }
                    const T& operator()() const
                    {
                        return itemId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct EffectId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "effectId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  effectId;
                    T& operator()()
                    {
                        return effectId;
                    }
                    const T& operator()() const
                    {
                        return effectId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
    } // namespace DespoilEffects_

    struct DespoilEffects : sqlpp::table_t<DespoilEffects,
                                           DespoilEffects_::ItemId,
                                           DespoilEffects_::EffectId>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "despoil_effects";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  despoilEffects;
                T& operator()()
                {
                    return despoilEffects;
                }
                const T& operator()() const
                {
                    return despoilEffects;
                }
            };
        };
    };
    namespace EnumTest_
    {
        struct EnumFld
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "enum_fld";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  enumFld;
                    T& operator()()
                    {
                        return enumFld;
                    }
                    const T& operator()() const
                    {
                        return enumFld;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
    } // namespace EnumTest_

    struct EnumTest : sqlpp::table_t<EnumTest,
                                     EnumTest_::EnumFld>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "enum_test";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  enumTest;
                T& operator()()
                {
                    return enumTest;
                }
                const T& operator()() const
                {
                    return enumTest;
                }
            };
        };
    };
    namespace ExpBase_
    {
        struct Level
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "level";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  level;
                    T& operator()()
                    {
                        return level;
                    }
                    const T& operator()() const
                    {
                        return level;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Exp
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "exp";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  exp;
                    T& operator()()
                    {
                        return exp;
                    }
                    const T& operator()() const
                    {
                        return exp;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
    } // namespace ExpBase_

    struct ExpBase : sqlpp::table_t<ExpBase,
                                    ExpBase_::Level,
                                    ExpBase_::Exp>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "exp_base";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  expBase;
                T& operator()()
                {
                    return expBase;
                }
                const T& operator()() const
                {
                    return expBase;
                }
            };
        };
    };
    namespace ExpTable_
    {
        struct Level
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "level";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  level;
                    T& operator()()
                    {
                        return level;
                    }
                    const T& operator()() const
                    {
                        return level;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct R1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r1;
                    T& operator()()
                    {
                        return r1;
                    }
                    const T& operator()() const
                    {
                        return r1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r2;
                    T& operator()()
                    {
                        return r2;
                    }
                    const T& operator()() const
                    {
                        return r2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R3
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r3";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r3;
                    T& operator()()
                    {
                        return r3;
                    }
                    const T& operator()() const
                    {
                        return r3;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R4
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r4";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r4;
                    T& operator()()
                    {
                        return r4;
                    }
                    const T& operator()() const
                    {
                        return r4;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R5
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r5";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r5;
                    T& operator()()
                    {
                        return r5;
                    }
                    const T& operator()() const
                    {
                        return r5;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R6
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r6";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r6;
                    T& operator()()
                    {
                        return r6;
                    }
                    const T& operator()() const
                    {
                        return r6;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R7
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r7";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r7;
                    T& operator()()
                    {
                        return r7;
                    }
                    const T& operator()() const
                    {
                        return r7;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R8
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r8";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r8;
                    T& operator()()
                    {
                        return r8;
                    }
                    const T& operator()() const
                    {
                        return r8;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R9
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r9";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r9;
                    T& operator()()
                    {
                        return r9;
                    }
                    const T& operator()() const
                    {
                        return r9;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R10
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r10";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r10;
                    T& operator()()
                    {
                        return r10;
                    }
                    const T& operator()() const
                    {
                        return r10;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R11
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r11";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r11;
                    T& operator()()
                    {
                        return r11;
                    }
                    const T& operator()() const
                    {
                        return r11;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R12
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r12";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r12;
                    T& operator()()
                    {
                        return r12;
                    }
                    const T& operator()() const
                    {
                        return r12;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R13
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r13";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r13;
                    T& operator()()
                    {
                        return r13;
                    }
                    const T& operator()() const
                    {
                        return r13;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R14
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r14";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r14;
                    T& operator()()
                    {
                        return r14;
                    }
                    const T& operator()() const
                    {
                        return r14;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R15
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r15";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r15;
                    T& operator()()
                    {
                        return r15;
                    }
                    const T& operator()() const
                    {
                        return r15;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R16
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r16";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r16;
                    T& operator()()
                    {
                        return r16;
                    }
                    const T& operator()() const
                    {
                        return r16;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R17
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r17";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r17;
                    T& operator()()
                    {
                        return r17;
                    }
                    const T& operator()() const
                    {
                        return r17;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R18
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r18";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r18;
                    T& operator()()
                    {
                        return r18;
                    }
                    const T& operator()() const
                    {
                        return r18;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R19
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r19";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r19;
                    T& operator()()
                    {
                        return r19;
                    }
                    const T& operator()() const
                    {
                        return r19;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R20
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r20";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r20;
                    T& operator()()
                    {
                        return r20;
                    }
                    const T& operator()() const
                    {
                        return r20;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace ExpTable_

    struct ExpTable : sqlpp::table_t<ExpTable,
                                     ExpTable_::Level,
                                     ExpTable_::R1,
                                     ExpTable_::R2,
                                     ExpTable_::R3,
                                     ExpTable_::R4,
                                     ExpTable_::R5,
                                     ExpTable_::R6,
                                     ExpTable_::R7,
                                     ExpTable_::R8,
                                     ExpTable_::R9,
                                     ExpTable_::R10,
                                     ExpTable_::R11,
                                     ExpTable_::R12,
                                     ExpTable_::R13,
                                     ExpTable_::R14,
                                     ExpTable_::R15,
                                     ExpTable_::R16,
                                     ExpTable_::R17,
                                     ExpTable_::R18,
                                     ExpTable_::R19,
                                     ExpTable_::R20>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "exp_table";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  expTable;
                T& operator()()
                {
                    return expTable;
                }
                const T& operator()() const
                {
                    return expTable;
                }
            };
        };
    };
    namespace FishingFish_
    {
        struct Fishid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fishid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fishid;
                    T& operator()()
                    {
                        return fishid;
                    }
                    const T& operator()() const
                    {
                        return fishid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Min
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "min";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  min;
                    T& operator()()
                    {
                        return min;
                    }
                    const T& operator()() const
                    {
                        return min;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Max
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "max";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  max;
                    T& operator()()
                    {
                        return max;
                    }
                    const T& operator()() const
                    {
                        return max;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Watertype
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "watertype";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  watertype;
                    T& operator()()
                    {
                        return watertype;
                    }
                    const T& operator()() const
                    {
                        return watertype;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Size
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "size";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  size;
                    T& operator()()
                    {
                        return size;
                    }
                    const T& operator()() const
                    {
                        return size;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Stamina
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "stamina";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  stamina;
                    T& operator()()
                    {
                        return stamina;
                    }
                    const T& operator()() const
                    {
                        return stamina;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Log
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "log";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  log;
                    T& operator()()
                    {
                        return log;
                    }
                    const T& operator()() const
                    {
                        return log;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Quest
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "quest";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  quest;
                    T& operator()()
                    {
                        return quest;
                    }
                    const T& operator()() const
                    {
                        return quest;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace FishingFish_

    struct FishingFish : sqlpp::table_t<FishingFish,
                                        FishingFish_::Fishid,
                                        FishingFish_::Name,
                                        FishingFish_::Min,
                                        FishingFish_::Max,
                                        FishingFish_::Watertype,
                                        FishingFish_::Size,
                                        FishingFish_::Stamina,
                                        FishingFish_::Log,
                                        FishingFish_::Quest>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "fishing_fish";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  fishingFish;
                T& operator()()
                {
                    return fishingFish;
                }
                const T& operator()() const
                {
                    return fishingFish;
                }
            };
        };
    };
    namespace FishingLure_
    {
        struct Lureid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lureid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lureid;
                    T& operator()()
                    {
                        return lureid;
                    }
                    const T& operator()() const
                    {
                        return lureid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Fishid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fishid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fishid;
                    T& operator()()
                    {
                        return fishid;
                    }
                    const T& operator()() const
                    {
                        return fishid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Luck
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "luck";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  luck;
                    T& operator()()
                    {
                        return luck;
                    }
                    const T& operator()() const
                    {
                        return luck;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace FishingLure_

    struct FishingLure : sqlpp::table_t<FishingLure,
                                        FishingLure_::Lureid,
                                        FishingLure_::Name,
                                        FishingLure_::Fishid,
                                        FishingLure_::Luck>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "fishing_lure";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  fishingLure;
                T& operator()()
                {
                    return fishingLure;
                }
                const T& operator()() const
                {
                    return fishingLure;
                }
            };
        };
    };
    namespace FishingRod_
    {
        struct Rodid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rodid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rodid;
                    T& operator()()
                    {
                        return rodid;
                    }
                    const T& operator()() const
                    {
                        return rodid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Fishid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fishid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fishid;
                    T& operator()()
                    {
                        return fishid;
                    }
                    const T& operator()() const
                    {
                        return fishid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Flag
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "flag";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  flag;
                    T& operator()()
                    {
                        return flag;
                    }
                    const T& operator()() const
                    {
                        return flag;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
    } // namespace FishingRod_

    struct FishingRod : sqlpp::table_t<FishingRod,
                                       FishingRod_::Rodid,
                                       FishingRod_::Name,
                                       FishingRod_::Fishid,
                                       FishingRod_::Flag>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "fishing_rod";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  fishingRod;
                T& operator()()
                {
                    return fishingRod;
                }
                const T& operator()() const
                {
                    return fishingRod;
                }
            };
        };
    };
    namespace FishingZone_
    {
        struct Zoneid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zoneid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zoneid;
                    T& operator()()
                    {
                        return zoneid;
                    }
                    const T& operator()() const
                    {
                        return zoneid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Fishid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fishid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fishid;
                    T& operator()()
                    {
                        return fishid;
                    }
                    const T& operator()() const
                    {
                        return fishid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
    } // namespace FishingZone_

    struct FishingZone : sqlpp::table_t<FishingZone,
                                        FishingZone_::Zoneid,
                                        FishingZone_::Name,
                                        FishingZone_::Fishid>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "fishing_zone";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  fishingZone;
                T& operator()()
                {
                    return fishingZone;
                }
                const T& operator()() const
                {
                    return fishingZone;
                }
            };
        };
    };
    namespace GardeningResults_
    {
        struct ResultId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "resultId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  resultId;
                    T& operator()()
                    {
                        return resultId;
                    }
                    const T& operator()() const
                    {
                        return resultId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Seed
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "seed";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  seed;
                    T& operator()()
                    {
                        return seed;
                    }
                    const T& operator()() const
                    {
                        return seed;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Element1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "element1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  element1;
                    T& operator()()
                    {
                        return element1;
                    }
                    const T& operator()() const
                    {
                        return element1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Element2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "element2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  element2;
                    T& operator()()
                    {
                        return element2;
                    }
                    const T& operator()() const
                    {
                        return element2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Result
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "result";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  result;
                    T& operator()()
                    {
                        return result;
                    }
                    const T& operator()() const
                    {
                        return result;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct MinQuantity
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "min_quantity";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  minQuantity;
                    T& operator()()
                    {
                        return minQuantity;
                    }
                    const T& operator()() const
                    {
                        return minQuantity;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MaxQuantity
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "max_quantity";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  maxQuantity;
                    T& operator()()
                    {
                        return maxQuantity;
                    }
                    const T& operator()() const
                    {
                        return maxQuantity;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Weight
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "weight";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  weight;
                    T& operator()()
                    {
                        return weight;
                    }
                    const T& operator()() const
                    {
                        return weight;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace GardeningResults_

    struct GardeningResults : sqlpp::table_t<GardeningResults,
                                             GardeningResults_::ResultId,
                                             GardeningResults_::Seed,
                                             GardeningResults_::Element1,
                                             GardeningResults_::Element2,
                                             GardeningResults_::Result,
                                             GardeningResults_::MinQuantity,
                                             GardeningResults_::MaxQuantity,
                                             GardeningResults_::Weight>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "gardening_results";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  gardeningResults;
                T& operator()()
                {
                    return gardeningResults;
                }
                const T& operator()() const
                {
                    return gardeningResults;
                }
            };
        };
    };
    namespace GuildItemPoints_
    {
        struct Guildid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "guildid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  guildid;
                    T& operator()()
                    {
                        return guildid;
                    }
                    const T& operator()() const
                    {
                        return guildid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Itemid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemid;
                    T& operator()()
                    {
                        return itemid;
                    }
                    const T& operator()() const
                    {
                        return itemid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Rank
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rank";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rank;
                    T& operator()()
                    {
                        return rank;
                    }
                    const T& operator()() const
                    {
                        return rank;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Points
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "points";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  points;
                    T& operator()()
                    {
                        return points;
                    }
                    const T& operator()() const
                    {
                        return points;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct MaxPoints
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "max_points";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  maxPoints;
                    T& operator()()
                    {
                        return maxPoints;
                    }
                    const T& operator()() const
                    {
                        return maxPoints;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Pattern
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pattern";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pattern;
                    T& operator()()
                    {
                        return pattern;
                    }
                    const T& operator()() const
                    {
                        return pattern;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace GuildItemPoints_

    struct GuildItemPoints : sqlpp::table_t<GuildItemPoints,
                                            GuildItemPoints_::Guildid,
                                            GuildItemPoints_::Itemid,
                                            GuildItemPoints_::Rank,
                                            GuildItemPoints_::Points,
                                            GuildItemPoints_::MaxPoints,
                                            GuildItemPoints_::Pattern>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "guild_item_points";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  guildItemPoints;
                T& operator()()
                {
                    return guildItemPoints;
                }
                const T& operator()() const
                {
                    return guildItemPoints;
                }
            };
        };
    };
    namespace GuildShops_
    {
        struct Guildid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "guildid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  guildid;
                    T& operator()()
                    {
                        return guildid;
                    }
                    const T& operator()() const
                    {
                        return guildid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Itemid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemid;
                    T& operator()()
                    {
                        return itemid;
                    }
                    const T& operator()() const
                    {
                        return itemid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct MinPrice
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "min_price";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  minPrice;
                    T& operator()()
                    {
                        return minPrice;
                    }
                    const T& operator()() const
                    {
                        return minPrice;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct MaxPrice
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "max_price";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  maxPrice;
                    T& operator()()
                    {
                        return maxPrice;
                    }
                    const T& operator()() const
                    {
                        return maxPrice;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct MaxQuantity
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "max_quantity";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  maxQuantity;
                    T& operator()()
                    {
                        return maxQuantity;
                    }
                    const T& operator()() const
                    {
                        return maxQuantity;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct DailyIncrease
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "daily_increase";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dailyIncrease;
                    T& operator()()
                    {
                        return dailyIncrease;
                    }
                    const T& operator()() const
                    {
                        return dailyIncrease;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct InitialQuantity
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "initial_quantity";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  initialQuantity;
                    T& operator()()
                    {
                        return initialQuantity;
                    }
                    const T& operator()() const
                    {
                        return initialQuantity;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace GuildShops_

    struct GuildShops : sqlpp::table_t<GuildShops,
                                       GuildShops_::Guildid,
                                       GuildShops_::Itemid,
                                       GuildShops_::MinPrice,
                                       GuildShops_::MaxPrice,
                                       GuildShops_::MaxQuantity,
                                       GuildShops_::DailyIncrease,
                                       GuildShops_::InitialQuantity>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "guild_shops";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  guildShops;
                T& operator()()
                {
                    return guildShops;
                }
                const T& operator()() const
                {
                    return guildShops;
                }
            };
        };
    };
    namespace Guilds_
    {
        struct Id
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  id;
                    T& operator()()
                    {
                        return id;
                    }
                    const T& operator()() const
                    {
                        return id;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct PointsName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "points_name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pointsName;
                    T& operator()()
                    {
                        return pointsName;
                    }
                    const T& operator()() const
                    {
                        return pointsName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
    } // namespace Guilds_

    struct Guilds : sqlpp::table_t<Guilds,
                                   Guilds_::Id,
                                   Guilds_::PointsName>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "guilds";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  guilds;
                T& operator()()
                {
                    return guilds;
                }
                const T& operator()() const
                {
                    return guilds;
                }
            };
        };
    };
    namespace InstanceEntities_
    {
        struct Instanceid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "instanceid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  instanceid;
                    T& operator()()
                    {
                        return instanceid;
                    }
                    const T& operator()() const
                    {
                        return instanceid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Id
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  id;
                    T& operator()()
                    {
                        return id;
                    }
                    const T& operator()() const
                    {
                        return id;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
    } // namespace InstanceEntities_

    struct InstanceEntities : sqlpp::table_t<InstanceEntities,
                                             InstanceEntities_::Instanceid,
                                             InstanceEntities_::Id>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "instance_entities";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  instanceEntities;
                T& operator()()
                {
                    return instanceEntities;
                }
                const T& operator()() const
                {
                    return instanceEntities;
                }
            };
        };
    };
    namespace InstanceList_
    {
        struct Instanceid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "instanceid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  instanceid;
                    T& operator()()
                    {
                        return instanceid;
                    }
                    const T& operator()() const
                    {
                        return instanceid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct InstanceName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "instance_name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  instanceName;
                    T& operator()()
                    {
                        return instanceName;
                    }
                    const T& operator()() const
                    {
                        return instanceName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar>;
        };
        struct InstanceZone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "instance_zone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  instanceZone;
                    T& operator()()
                    {
                        return instanceZone;
                    }
                    const T& operator()() const
                    {
                        return instanceZone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct EntranceZone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "entrance_zone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  entranceZone;
                    T& operator()()
                    {
                        return entranceZone;
                    }
                    const T& operator()() const
                    {
                        return entranceZone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct TimeLimit
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "time_limit";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timeLimit;
                    T& operator()()
                    {
                        return timeLimit;
                    }
                    const T& operator()() const
                    {
                        return timeLimit;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct StartX
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "start_x";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  startX;
                    T& operator()()
                    {
                        return startX;
                    }
                    const T& operator()() const
                    {
                        return startX;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct StartY
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "start_y";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  startY;
                    T& operator()()
                    {
                        return startY;
                    }
                    const T& operator()() const
                    {
                        return startY;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct StartZ
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "start_z";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  startZ;
                    T& operator()()
                    {
                        return startZ;
                    }
                    const T& operator()() const
                    {
                        return startZ;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct StartRot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "start_rot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  startRot;
                    T& operator()()
                    {
                        return startRot;
                    }
                    const T& operator()() const
                    {
                        return startRot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MusicDay
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "music_day";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  musicDay;
                    T& operator()()
                    {
                        return musicDay;
                    }
                    const T& operator()() const
                    {
                        return musicDay;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct MusicNight
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "music_night";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  musicNight;
                    T& operator()()
                    {
                        return musicNight;
                    }
                    const T& operator()() const
                    {
                        return musicNight;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct Battlesolo
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "battlesolo";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  battlesolo;
                    T& operator()()
                    {
                        return battlesolo;
                    }
                    const T& operator()() const
                    {
                        return battlesolo;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct Battlemulti
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "battlemulti";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  battlemulti;
                    T& operator()()
                    {
                        return battlemulti;
                    }
                    const T& operator()() const
                    {
                        return battlemulti;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
    } // namespace InstanceList_

    struct InstanceList : sqlpp::table_t<InstanceList,
                                         InstanceList_::Instanceid,
                                         InstanceList_::InstanceName,
                                         InstanceList_::InstanceZone,
                                         InstanceList_::EntranceZone,
                                         InstanceList_::TimeLimit,
                                         InstanceList_::StartX,
                                         InstanceList_::StartY,
                                         InstanceList_::StartZ,
                                         InstanceList_::StartRot,
                                         InstanceList_::MusicDay,
                                         InstanceList_::MusicNight,
                                         InstanceList_::Battlesolo,
                                         InstanceList_::Battlemulti>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "instance_list";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  instanceList;
                T& operator()()
                {
                    return instanceList;
                }
                const T& operator()() const
                {
                    return instanceList;
                }
            };
        };
    };
    namespace ItemBasic_
    {
        struct Itemid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemid;
                    T& operator()()
                    {
                        return itemid;
                    }
                    const T& operator()() const
                    {
                        return itemid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Subid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "subid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  subid;
                    T& operator()()
                    {
                        return subid;
                    }
                    const T& operator()() const
                    {
                        return subid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Sortname
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sortname";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sortname;
                    T& operator()()
                    {
                        return sortname;
                    }
                    const T& operator()() const
                    {
                        return sortname;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
        struct StackSize
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "stackSize";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  stackSize;
                    T& operator()()
                    {
                        return stackSize;
                    }
                    const T& operator()() const
                    {
                        return stackSize;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Flags
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "flags";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  flags;
                    T& operator()()
                    {
                        return flags;
                    }
                    const T& operator()() const
                    {
                        return flags;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct AH
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "aH";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  aH;
                    T& operator()()
                    {
                        return aH;
                    }
                    const T& operator()() const
                    {
                        return aH;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct NoSale
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "NoSale";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  NoSale;
                    T& operator()()
                    {
                        return NoSale;
                    }
                    const T& operator()() const
                    {
                        return NoSale;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct BaseSell
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "BaseSell";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  BaseSell;
                    T& operator()()
                    {
                        return BaseSell;
                    }
                    const T& operator()() const
                    {
                        return BaseSell;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
    } // namespace ItemBasic_

    struct ItemBasic : sqlpp::table_t<ItemBasic,
                                      ItemBasic_::Itemid,
                                      ItemBasic_::Subid,
                                      ItemBasic_::Name,
                                      ItemBasic_::Sortname,
                                      ItemBasic_::StackSize,
                                      ItemBasic_::Flags,
                                      ItemBasic_::AH,
                                      ItemBasic_::NoSale,
                                      ItemBasic_::BaseSell>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "item_basic";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  itemBasic;
                T& operator()()
                {
                    return itemBasic;
                }
                const T& operator()() const
                {
                    return itemBasic;
                }
            };
        };
    };
    namespace ItemEquipment_
    {
        struct ItemId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemId;
                    T& operator()()
                    {
                        return itemId;
                    }
                    const T& operator()() const
                    {
                        return itemId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Level
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "level";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  level;
                    T& operator()()
                    {
                        return level;
                    }
                    const T& operator()() const
                    {
                        return level;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Ilevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ilevel";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ilevel;
                    T& operator()()
                    {
                        return ilevel;
                    }
                    const T& operator()() const
                    {
                        return ilevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Jobs
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jobs";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jobs;
                    T& operator()()
                    {
                        return jobs;
                    }
                    const T& operator()() const
                    {
                        return jobs;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct MId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "MId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  MId;
                    T& operator()()
                    {
                        return MId;
                    }
                    const T& operator()() const
                    {
                        return MId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ShieldSize
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "shieldSize";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  shieldSize;
                    T& operator()()
                    {
                        return shieldSize;
                    }
                    const T& operator()() const
                    {
                        return shieldSize;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct ScriptType
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "scriptType";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  scriptType;
                    T& operator()()
                    {
                        return scriptType;
                    }
                    const T& operator()() const
                    {
                        return scriptType;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Slot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "slot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  slot;
                    T& operator()()
                    {
                        return slot;
                    }
                    const T& operator()() const
                    {
                        return slot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Rslot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rslot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rslot;
                    T& operator()()
                    {
                        return rslot;
                    }
                    const T& operator()() const
                    {
                        return rslot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct SuLevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "su_level";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  suLevel;
                    T& operator()()
                    {
                        return suLevel;
                    }
                    const T& operator()() const
                    {
                        return suLevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace ItemEquipment_

    struct ItemEquipment : sqlpp::table_t<ItemEquipment,
                                          ItemEquipment_::ItemId,
                                          ItemEquipment_::Name,
                                          ItemEquipment_::Level,
                                          ItemEquipment_::Ilevel,
                                          ItemEquipment_::Jobs,
                                          ItemEquipment_::MId,
                                          ItemEquipment_::ShieldSize,
                                          ItemEquipment_::ScriptType,
                                          ItemEquipment_::Slot,
                                          ItemEquipment_::Rslot,
                                          ItemEquipment_::SuLevel>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "item_equipment";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  itemEquipment;
                T& operator()()
                {
                    return itemEquipment;
                }
                const T& operator()() const
                {
                    return itemEquipment;
                }
            };
        };
    };
    namespace ItemFurnishing_
    {
        struct Itemid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemid;
                    T& operator()()
                    {
                        return itemid;
                    }
                    const T& operator()() const
                    {
                        return itemid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Storage
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "storage";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  storage;
                    T& operator()()
                    {
                        return storage;
                    }
                    const T& operator()() const
                    {
                        return storage;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Moghancement
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "moghancement";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  moghancement;
                    T& operator()()
                    {
                        return moghancement;
                    }
                    const T& operator()() const
                    {
                        return moghancement;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Element
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "element";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  element;
                    T& operator()()
                    {
                        return element;
                    }
                    const T& operator()() const
                    {
                        return element;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Aura
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "aura";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  aura;
                    T& operator()()
                    {
                        return aura;
                    }
                    const T& operator()() const
                    {
                        return aura;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace ItemFurnishing_

    struct ItemFurnishing : sqlpp::table_t<ItemFurnishing,
                                           ItemFurnishing_::Itemid,
                                           ItemFurnishing_::Name,
                                           ItemFurnishing_::Storage,
                                           ItemFurnishing_::Moghancement,
                                           ItemFurnishing_::Element,
                                           ItemFurnishing_::Aura>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "item_furnishing";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  itemFurnishing;
                T& operator()()
                {
                    return itemFurnishing;
                }
                const T& operator()() const
                {
                    return itemFurnishing;
                }
            };
        };
    };
    namespace ItemLatents_
    {
        struct ItemId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemId;
                    T& operator()()
                    {
                        return itemId;
                    }
                    const T& operator()() const
                    {
                        return itemId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ModId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "modId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  modId;
                    T& operator()()
                    {
                        return modId;
                    }
                    const T& operator()() const
                    {
                        return modId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct LatentId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "latentId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  latentId;
                    T& operator()()
                    {
                        return latentId;
                    }
                    const T& operator()() const
                    {
                        return latentId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
        };
        struct LatentParam
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "latentParam";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  latentParam;
                    T& operator()()
                    {
                        return latentParam;
                    }
                    const T& operator()() const
                    {
                        return latentParam;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
        };
    } // namespace ItemLatents_

    struct ItemLatents : sqlpp::table_t<ItemLatents,
                                        ItemLatents_::ItemId,
                                        ItemLatents_::ModId,
                                        ItemLatents_::Value,
                                        ItemLatents_::LatentId,
                                        ItemLatents_::LatentParam>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "item_latents";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  itemLatents;
                T& operator()()
                {
                    return itemLatents;
                }
                const T& operator()() const
                {
                    return itemLatents;
                }
            };
        };
    };
    namespace ItemMods_
    {
        struct ItemId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemId;
                    T& operator()()
                    {
                        return itemId;
                    }
                    const T& operator()() const
                    {
                        return itemId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ModId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "modId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  modId;
                    T& operator()()
                    {
                        return modId;
                    }
                    const T& operator()() const
                    {
                        return modId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
    } // namespace ItemMods_

    struct ItemMods : sqlpp::table_t<ItemMods,
                                     ItemMods_::ItemId,
                                     ItemMods_::ModId,
                                     ItemMods_::Value>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "item_mods";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  itemMods;
                T& operator()()
                {
                    return itemMods;
                }
                const T& operator()() const
                {
                    return itemMods;
                }
            };
        };
    };
    namespace ItemModsPet_
    {
        struct ItemId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemId;
                    T& operator()()
                    {
                        return itemId;
                    }
                    const T& operator()() const
                    {
                        return itemId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ModId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "modId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  modId;
                    T& operator()()
                    {
                        return modId;
                    }
                    const T& operator()() const
                    {
                        return modId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct PetType
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "petType";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  petType;
                    T& operator()()
                    {
                        return petType;
                    }
                    const T& operator()() const
                    {
                        return petType;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace ItemModsPet_

    struct ItemModsPet : sqlpp::table_t<ItemModsPet,
                                        ItemModsPet_::ItemId,
                                        ItemModsPet_::ModId,
                                        ItemModsPet_::Value,
                                        ItemModsPet_::PetType>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "item_mods_pet";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  itemModsPet;
                T& operator()()
                {
                    return itemModsPet;
                }
                const T& operator()() const
                {
                    return itemModsPet;
                }
            };
        };
    };
    namespace ItemPuppet_
    {
        struct Itemid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemid;
                    T& operator()()
                    {
                        return itemid;
                    }
                    const T& operator()() const
                    {
                        return itemid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
        struct Slot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "slot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  slot;
                    T& operator()()
                    {
                        return slot;
                    }
                    const T& operator()() const
                    {
                        return slot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Element
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "element";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  element;
                    T& operator()()
                    {
                        return element;
                    }
                    const T& operator()() const
                    {
                        return element;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
    } // namespace ItemPuppet_

    struct ItemPuppet : sqlpp::table_t<ItemPuppet,
                                       ItemPuppet_::Itemid,
                                       ItemPuppet_::Name,
                                       ItemPuppet_::Slot,
                                       ItemPuppet_::Element>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "item_puppet";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  itemPuppet;
                T& operator()()
                {
                    return itemPuppet;
                }
                const T& operator()() const
                {
                    return itemPuppet;
                }
            };
        };
    };
    namespace ItemUsable_
    {
        struct Itemid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemid;
                    T& operator()()
                    {
                        return itemid;
                    }
                    const T& operator()() const
                    {
                        return itemid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct ValidTargets
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "validTargets";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  validTargets;
                    T& operator()()
                    {
                        return validTargets;
                    }
                    const T& operator()() const
                    {
                        return validTargets;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Activation
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "activation";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  activation;
                    T& operator()()
                    {
                        return activation;
                    }
                    const T& operator()() const
                    {
                        return activation;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Animation
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "animation";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animation;
                    T& operator()()
                    {
                        return animation;
                    }
                    const T& operator()() const
                    {
                        return animation;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct AnimationTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "animationTime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animationTime;
                    T& operator()()
                    {
                        return animationTime;
                    }
                    const T& operator()() const
                    {
                        return animationTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MaxCharges
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "maxCharges";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  maxCharges;
                    T& operator()()
                    {
                        return maxCharges;
                    }
                    const T& operator()() const
                    {
                        return maxCharges;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct UseDelay
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "useDelay";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  useDelay;
                    T& operator()()
                    {
                        return useDelay;
                    }
                    const T& operator()() const
                    {
                        return useDelay;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct ReuseDelay
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reuseDelay";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reuseDelay;
                    T& operator()()
                    {
                        return reuseDelay;
                    }
                    const T& operator()() const
                    {
                        return reuseDelay;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Aoe
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "aoe";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  aoe;
                    T& operator()()
                    {
                        return aoe;
                    }
                    const T& operator()() const
                    {
                        return aoe;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace ItemUsable_

    struct ItemUsable : sqlpp::table_t<ItemUsable,
                                       ItemUsable_::Itemid,
                                       ItemUsable_::Name,
                                       ItemUsable_::ValidTargets,
                                       ItemUsable_::Activation,
                                       ItemUsable_::Animation,
                                       ItemUsable_::AnimationTime,
                                       ItemUsable_::MaxCharges,
                                       ItemUsable_::UseDelay,
                                       ItemUsable_::ReuseDelay,
                                       ItemUsable_::Aoe>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "item_usable";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  itemUsable;
                T& operator()()
                {
                    return itemUsable;
                }
                const T& operator()() const
                {
                    return itemUsable;
                }
            };
        };
    };
    namespace ItemWeapon_
    {
        struct ItemId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemId;
                    T& operator()()
                    {
                        return itemId;
                    }
                    const T& operator()() const
                    {
                        return itemId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Skill
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "skill";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  skill;
                    T& operator()()
                    {
                        return skill;
                    }
                    const T& operator()() const
                    {
                        return skill;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Subskill
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "subskill";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  subskill;
                    T& operator()()
                    {
                        return subskill;
                    }
                    const T& operator()() const
                    {
                        return subskill;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct IlvlSkill
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ilvl_skill";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ilvlSkill;
                    T& operator()()
                    {
                        return ilvlSkill;
                    }
                    const T& operator()() const
                    {
                        return ilvlSkill;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct IlvlParry
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ilvl_parry";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ilvlParry;
                    T& operator()()
                    {
                        return ilvlParry;
                    }
                    const T& operator()() const
                    {
                        return ilvlParry;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct IlvlMacc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ilvl_macc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ilvlMacc;
                    T& operator()()
                    {
                        return ilvlMacc;
                    }
                    const T& operator()() const
                    {
                        return ilvlMacc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct DmgType
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dmgType";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dmgType;
                    T& operator()()
                    {
                        return dmgType;
                    }
                    const T& operator()() const
                    {
                        return dmgType;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Hit
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "hit";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  hit;
                    T& operator()()
                    {
                        return hit;
                    }
                    const T& operator()() const
                    {
                        return hit;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Delay
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "delay";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  delay;
                    T& operator()()
                    {
                        return delay;
                    }
                    const T& operator()() const
                    {
                        return delay;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
        struct Dmg
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dmg";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dmg;
                    T& operator()()
                    {
                        return dmg;
                    }
                    const T& operator()() const
                    {
                        return dmg;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct UnlockPoints
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "unlock_points";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  unlockPoints;
                    T& operator()()
                    {
                        return unlockPoints;
                    }
                    const T& operator()() const
                    {
                        return unlockPoints;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
    } // namespace ItemWeapon_

    struct ItemWeapon : sqlpp::table_t<ItemWeapon,
                                       ItemWeapon_::ItemId,
                                       ItemWeapon_::Name,
                                       ItemWeapon_::Skill,
                                       ItemWeapon_::Subskill,
                                       ItemWeapon_::IlvlSkill,
                                       ItemWeapon_::IlvlParry,
                                       ItemWeapon_::IlvlMacc,
                                       ItemWeapon_::DmgType,
                                       ItemWeapon_::Hit,
                                       ItemWeapon_::Delay,
                                       ItemWeapon_::Dmg,
                                       ItemWeapon_::UnlockPoints>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "item_weapon";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  itemWeapon;
                T& operator()()
                {
                    return itemWeapon;
                }
                const T& operator()() const
                {
                    return itemWeapon;
                }
            };
        };
    };
    namespace JobPointGifts_
    {
        struct Jobid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jobid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jobid;
                    T& operator()()
                    {
                        return jobid;
                    }
                    const T& operator()() const
                    {
                        return jobid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct JpNeeded
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jp_needed";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jpNeeded;
                    T& operator()()
                    {
                        return jpNeeded;
                    }
                    const T& operator()() const
                    {
                        return jpNeeded;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct Modid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "modid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  modid;
                    T& operator()()
                    {
                        return modid;
                    }
                    const T& operator()() const
                    {
                        return modid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct Desc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "desc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  desc;
                    T& operator()()
                    {
                        return desc;
                    }
                    const T& operator()() const
                    {
                        return desc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
    } // namespace JobPointGifts_

    struct JobPointGifts : sqlpp::table_t<JobPointGifts,
                                          JobPointGifts_::Jobid,
                                          JobPointGifts_::JpNeeded,
                                          JobPointGifts_::Modid,
                                          JobPointGifts_::Value,
                                          JobPointGifts_::Desc>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "job_point_gifts";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  jobPointGifts;
                T& operator()()
                {
                    return jobPointGifts;
                }
                const T& operator()() const
                {
                    return jobPointGifts;
                }
            };
        };
    };
    namespace JobPoints_
    {
        struct JobPointid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "job_pointid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jobPointid;
                    T& operator()()
                    {
                        return jobPointid;
                    }
                    const T& operator()() const
                    {
                        return jobPointid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Upgrade
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "upgrade";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  upgrade;
                    T& operator()()
                    {
                        return upgrade;
                    }
                    const T& operator()() const
                    {
                        return upgrade;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Jobs
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jobs";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jobs;
                    T& operator()()
                    {
                        return jobs;
                    }
                    const T& operator()() const
                    {
                        return jobs;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
    } // namespace JobPoints_

    struct JobPoints : sqlpp::table_t<JobPoints,
                                      JobPoints_::JobPointid,
                                      JobPoints_::Name,
                                      JobPoints_::Upgrade,
                                      JobPoints_::Jobs>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "job_points";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  jobPoints;
                T& operator()()
                {
                    return jobPoints;
                }
                const T& operator()() const
                {
                    return jobPoints;
                }
            };
        };
    };
    namespace Linkshells_
    {
        struct Linkshellid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "linkshellid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  linkshellid;
                    T& operator()()
                    {
                        return linkshellid;
                    }
                    const T& operator()() const
                    {
                        return linkshellid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar>;
        };
        struct Color
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "color";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  color;
                    T& operator()()
                    {
                        return color;
                    }
                    const T& operator()() const
                    {
                        return color;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Poster
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "poster";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  poster;
                    T& operator()()
                    {
                        return poster;
                    }
                    const T& operator()() const
                    {
                        return poster;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar>;
        };
        struct Message
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "message";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  message;
                    T& operator()()
                    {
                        return message;
                    }
                    const T& operator()() const
                    {
                        return message;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
        };
        struct Messagetime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "messagetime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  messagetime;
                    T& operator()()
                    {
                        return messagetime;
                    }
                    const T& operator()() const
                    {
                        return messagetime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Postrights
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "postrights";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  postrights;
                    T& operator()()
                    {
                        return postrights;
                    }
                    const T& operator()() const
                    {
                        return postrights;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Broken
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "broken";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  broken;
                    T& operator()()
                    {
                        return broken;
                    }
                    const T& operator()() const
                    {
                        return broken;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace Linkshells_

    struct Linkshells : sqlpp::table_t<Linkshells,
                                       Linkshells_::Linkshellid,
                                       Linkshells_::Name,
                                       Linkshells_::Color,
                                       Linkshells_::Poster,
                                       Linkshells_::Message,
                                       Linkshells_::Messagetime,
                                       Linkshells_::Postrights,
                                       Linkshells_::Broken>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "linkshells";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  linkshells;
                T& operator()()
                {
                    return linkshells;
                }
                const T& operator()() const
                {
                    return linkshells;
                }
            };
        };
    };
    namespace Magian_
    {
        struct TrialId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "trialId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  trialId;
                    T& operator()()
                    {
                        return trialId;
                    }
                    const T& operator()() const
                    {
                        return trialId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ReqItem
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reqItem";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reqItem;
                    T& operator()()
                    {
                        return reqItem;
                    }
                    const T& operator()() const
                    {
                        return reqItem;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct ReqItemAug1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reqItemAug1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reqItemAug1;
                    T& operator()()
                    {
                        return reqItemAug1;
                    }
                    const T& operator()() const
                    {
                        return reqItemAug1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ReqItemAug2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reqItemAug2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reqItemAug2;
                    T& operator()()
                    {
                        return reqItemAug2;
                    }
                    const T& operator()() const
                    {
                        return reqItemAug2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ReqItemAug3
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reqItemAug3";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reqItemAug3;
                    T& operator()()
                    {
                        return reqItemAug3;
                    }
                    const T& operator()() const
                    {
                        return reqItemAug3;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ReqItemAug4
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reqItemAug4";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reqItemAug4;
                    T& operator()()
                    {
                        return reqItemAug4;
                    }
                    const T& operator()() const
                    {
                        return reqItemAug4;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ReqItemAugValue1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reqItemAugValue1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reqItemAugValue1;
                    T& operator()()
                    {
                        return reqItemAugValue1;
                    }
                    const T& operator()() const
                    {
                        return reqItemAugValue1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ReqItemAugValue2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reqItemAugValue2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reqItemAugValue2;
                    T& operator()()
                    {
                        return reqItemAugValue2;
                    }
                    const T& operator()() const
                    {
                        return reqItemAugValue2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ReqItemAugValue3
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reqItemAugValue3";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reqItemAugValue3;
                    T& operator()()
                    {
                        return reqItemAugValue3;
                    }
                    const T& operator()() const
                    {
                        return reqItemAugValue3;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ReqItemAugValue4
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "reqItemAugValue4";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  reqItemAugValue4;
                    T& operator()()
                    {
                        return reqItemAugValue4;
                    }
                    const T& operator()() const
                    {
                        return reqItemAugValue4;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct RewardItem
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rewardItem";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rewardItem;
                    T& operator()()
                    {
                        return rewardItem;
                    }
                    const T& operator()() const
                    {
                        return rewardItem;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct RewardItemAug1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rewardItemAug1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rewardItemAug1;
                    T& operator()()
                    {
                        return rewardItemAug1;
                    }
                    const T& operator()() const
                    {
                        return rewardItemAug1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct RewardItemAug2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rewardItemAug2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rewardItemAug2;
                    T& operator()()
                    {
                        return rewardItemAug2;
                    }
                    const T& operator()() const
                    {
                        return rewardItemAug2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct RewardItemAug3
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rewardItemAug3";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rewardItemAug3;
                    T& operator()()
                    {
                        return rewardItemAug3;
                    }
                    const T& operator()() const
                    {
                        return rewardItemAug3;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct RewardItemAug4
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rewardItemAug4";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rewardItemAug4;
                    T& operator()()
                    {
                        return rewardItemAug4;
                    }
                    const T& operator()() const
                    {
                        return rewardItemAug4;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct RewardItemAugValue1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rewardItemAugValue1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rewardItemAugValue1;
                    T& operator()()
                    {
                        return rewardItemAugValue1;
                    }
                    const T& operator()() const
                    {
                        return rewardItemAugValue1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct RewardItemAugValue2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rewardItemAugValue2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rewardItemAugValue2;
                    T& operator()()
                    {
                        return rewardItemAugValue2;
                    }
                    const T& operator()() const
                    {
                        return rewardItemAugValue2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct RewardItemAugValue3
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rewardItemAugValue3";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rewardItemAugValue3;
                    T& operator()()
                    {
                        return rewardItemAugValue3;
                    }
                    const T& operator()() const
                    {
                        return rewardItemAugValue3;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct RewardItemAugValue4
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rewardItemAugValue4";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rewardItemAugValue4;
                    T& operator()()
                    {
                        return rewardItemAugValue4;
                    }
                    const T& operator()() const
                    {
                        return rewardItemAugValue4;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct TrialTarget
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "trialTarget";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  trialTarget;
                    T& operator()()
                    {
                        return trialTarget;
                    }
                    const T& operator()() const
                    {
                        return trialTarget;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ObjectiveItem
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "objectiveItem";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  objectiveItem;
                    T& operator()()
                    {
                        return objectiveItem;
                    }
                    const T& operator()() const
                    {
                        return objectiveItem;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ObjectiveTotal
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "objectiveTotal";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  objectiveTotal;
                    T& operator()()
                    {
                        return objectiveTotal;
                    }
                    const T& operator()() const
                    {
                        return objectiveTotal;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Element
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "element";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  element;
                    T& operator()()
                    {
                        return element;
                    }
                    const T& operator()() const
                    {
                        return element;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct PreviousTrial
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "previousTrial";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  previousTrial;
                    T& operator()()
                    {
                        return previousTrial;
                    }
                    const T& operator()() const
                    {
                        return previousTrial;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
    } // namespace Magian_

    struct Magian : sqlpp::table_t<Magian,
                                   Magian_::TrialId,
                                   Magian_::ReqItem,
                                   Magian_::ReqItemAug1,
                                   Magian_::ReqItemAug2,
                                   Magian_::ReqItemAug3,
                                   Magian_::ReqItemAug4,
                                   Magian_::ReqItemAugValue1,
                                   Magian_::ReqItemAugValue2,
                                   Magian_::ReqItemAugValue3,
                                   Magian_::ReqItemAugValue4,
                                   Magian_::RewardItem,
                                   Magian_::RewardItemAug1,
                                   Magian_::RewardItemAug2,
                                   Magian_::RewardItemAug3,
                                   Magian_::RewardItemAug4,
                                   Magian_::RewardItemAugValue1,
                                   Magian_::RewardItemAugValue2,
                                   Magian_::RewardItemAugValue3,
                                   Magian_::RewardItemAugValue4,
                                   Magian_::TrialTarget,
                                   Magian_::ObjectiveItem,
                                   Magian_::ObjectiveTotal,
                                   Magian_::Element,
                                   Magian_::PreviousTrial>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "magian";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  magian;
                T& operator()()
                {
                    return magian;
                }
                const T& operator()() const
                {
                    return magian;
                }
            };
        };
    };
    namespace Merits_
    {
        struct Meritid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "meritid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  meritid;
                    T& operator()()
                    {
                        return meritid;
                    }
                    const T& operator()() const
                    {
                        return meritid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
        };
        struct Upgrade
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "upgrade";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  upgrade;
                    T& operator()()
                    {
                        return upgrade;
                    }
                    const T& operator()() const
                    {
                        return upgrade;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct Jobs
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jobs";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jobs;
                    T& operator()()
                    {
                        return jobs;
                    }
                    const T& operator()() const
                    {
                        return jobs;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Upgradeid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "upgradeid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  upgradeid;
                    T& operator()()
                    {
                        return upgradeid;
                    }
                    const T& operator()() const
                    {
                        return upgradeid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Catagoryid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "catagoryid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  catagoryid;
                    T& operator()()
                    {
                        return catagoryid;
                    }
                    const T& operator()() const
                    {
                        return catagoryid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace Merits_

    struct Merits : sqlpp::table_t<Merits,
                                   Merits_::Meritid,
                                   Merits_::Name,
                                   Merits_::Upgrade,
                                   Merits_::Value,
                                   Merits_::Jobs,
                                   Merits_::Upgradeid,
                                   Merits_::Catagoryid>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "merits";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  merits;
                T& operator()()
                {
                    return merits;
                }
                const T& operator()() const
                {
                    return merits;
                }
            };
        };
    };
    namespace MobDroplist_
    {
        struct DropId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dropId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dropId;
                    T& operator()()
                    {
                        return dropId;
                    }
                    const T& operator()() const
                    {
                        return dropId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct DropType
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dropType";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dropType;
                    T& operator()()
                    {
                        return dropType;
                    }
                    const T& operator()() const
                    {
                        return dropType;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct GroupId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "groupId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  groupId;
                    T& operator()()
                    {
                        return groupId;
                    }
                    const T& operator()() const
                    {
                        return groupId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct GroupRate
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "groupRate";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  groupRate;
                    T& operator()()
                    {
                        return groupRate;
                    }
                    const T& operator()() const
                    {
                        return groupRate;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ItemId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemId";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemId;
                    T& operator()()
                    {
                        return itemId;
                    }
                    const T& operator()() const
                    {
                        return itemId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ItemRate
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "itemRate";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  itemRate;
                    T& operator()()
                    {
                        return itemRate;
                    }
                    const T& operator()() const
                    {
                        return itemRate;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace MobDroplist_

    struct MobDroplist : sqlpp::table_t<MobDroplist,
                                        MobDroplist_::DropId,
                                        MobDroplist_::DropType,
                                        MobDroplist_::GroupId,
                                        MobDroplist_::GroupRate,
                                        MobDroplist_::ItemId,
                                        MobDroplist_::ItemRate>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_droplist";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobDroplist;
                T& operator()()
                {
                    return mobDroplist;
                }
                const T& operator()() const
                {
                    return mobDroplist;
                }
            };
        };
    };
    namespace MobFamilyMods_
    {
        struct Familyid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "familyid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  familyid;
                    T& operator()()
                    {
                        return familyid;
                    }
                    const T& operator()() const
                    {
                        return familyid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Modid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "modid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  modid;
                    T& operator()()
                    {
                        return modid;
                    }
                    const T& operator()() const
                    {
                        return modid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct IsMobMod
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "is_mob_mod";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  isMobMod;
                    T& operator()()
                    {
                        return isMobMod;
                    }
                    const T& operator()() const
                    {
                        return isMobMod;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
    } // namespace MobFamilyMods_

    struct MobFamilyMods : sqlpp::table_t<MobFamilyMods,
                                          MobFamilyMods_::Familyid,
                                          MobFamilyMods_::Modid,
                                          MobFamilyMods_::Value,
                                          MobFamilyMods_::IsMobMod>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_family_mods";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobFamilyMods;
                T& operator()()
                {
                    return mobFamilyMods;
                }
                const T& operator()() const
                {
                    return mobFamilyMods;
                }
            };
        };
    };
    namespace MobFamilySystem_
    {
        struct FamilyID
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "familyID";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  familyID;
                    T& operator()()
                    {
                        return familyID;
                    }
                    const T& operator()() const
                    {
                        return familyID;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Family
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "family";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  family;
                    T& operator()()
                    {
                        return family;
                    }
                    const T& operator()() const
                    {
                        return family;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
        struct SuperFamilyID
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "superFamilyID";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  superFamilyID;
                    T& operator()()
                    {
                        return superFamilyID;
                    }
                    const T& operator()() const
                    {
                        return superFamilyID;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct SuperFamily
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "superFamily";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  superFamily;
                    T& operator()()
                    {
                        return superFamily;
                    }
                    const T& operator()() const
                    {
                        return superFamily;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct EcosystemID
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ecosystemID";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ecosystemID;
                    T& operator()()
                    {
                        return ecosystemID;
                    }
                    const T& operator()() const
                    {
                        return ecosystemID;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Ecosystem
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ecosystem";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ecosystem;
                    T& operator()()
                    {
                        return ecosystem;
                    }
                    const T& operator()() const
                    {
                        return ecosystem;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Mobsize
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mobsize";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobsize;
                    T& operator()()
                    {
                        return mobsize;
                    }
                    const T& operator()() const
                    {
                        return mobsize;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Speed
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "speed";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  speed;
                    T& operator()()
                    {
                        return speed;
                    }
                    const T& operator()() const
                    {
                        return speed;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct HP
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "HP";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  HP;
                    T& operator()()
                    {
                        return HP;
                    }
                    const T& operator()() const
                    {
                        return HP;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MP
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "MP";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  MP;
                    T& operator()()
                    {
                        return MP;
                    }
                    const T& operator()() const
                    {
                        return MP;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct STR
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "STR";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  STR;
                    T& operator()()
                    {
                        return STR;
                    }
                    const T& operator()() const
                    {
                        return STR;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct DEX
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "DEX";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  DEX;
                    T& operator()()
                    {
                        return DEX;
                    }
                    const T& operator()() const
                    {
                        return DEX;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct VIT
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "VIT";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  VIT;
                    T& operator()()
                    {
                        return VIT;
                    }
                    const T& operator()() const
                    {
                        return VIT;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct AGI
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "AGI";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  AGI;
                    T& operator()()
                    {
                        return AGI;
                    }
                    const T& operator()() const
                    {
                        return AGI;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct INT
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "INT";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  INT;
                    T& operator()()
                    {
                        return INT;
                    }
                    const T& operator()() const
                    {
                        return INT;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct MND
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "MND";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  MND;
                    T& operator()()
                    {
                        return MND;
                    }
                    const T& operator()() const
                    {
                        return MND;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct CHR
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "CHR";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  CHR;
                    T& operator()()
                    {
                        return CHR;
                    }
                    const T& operator()() const
                    {
                        return CHR;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ATT
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ATT";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ATT;
                    T& operator()()
                    {
                        return ATT;
                    }
                    const T& operator()() const
                    {
                        return ATT;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct DEF
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "DEF";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  DEF;
                    T& operator()()
                    {
                        return DEF;
                    }
                    const T& operator()() const
                    {
                        return DEF;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ACC
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ACC";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ACC;
                    T& operator()()
                    {
                        return ACC;
                    }
                    const T& operator()() const
                    {
                        return ACC;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct EVA
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "EVA";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  EVA;
                    T& operator()()
                    {
                        return EVA;
                    }
                    const T& operator()() const
                    {
                        return EVA;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Element
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Element";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Element;
                    T& operator()()
                    {
                        return Element;
                    }
                    const T& operator()() const
                    {
                        return Element;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct Detects
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "detects";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  detects;
                    T& operator()()
                    {
                        return detects;
                    }
                    const T& operator()() const
                    {
                        return detects;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct Charmable
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "charmable";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  charmable;
                    T& operator()()
                    {
                        return charmable;
                    }
                    const T& operator()() const
                    {
                        return charmable;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
    } // namespace MobFamilySystem_

    struct MobFamilySystem : sqlpp::table_t<MobFamilySystem,
                                            MobFamilySystem_::FamilyID,
                                            MobFamilySystem_::Family,
                                            MobFamilySystem_::SuperFamilyID,
                                            MobFamilySystem_::SuperFamily,
                                            MobFamilySystem_::EcosystemID,
                                            MobFamilySystem_::Ecosystem,
                                            MobFamilySystem_::Mobsize,
                                            MobFamilySystem_::Speed,
                                            MobFamilySystem_::HP,
                                            MobFamilySystem_::MP,
                                            MobFamilySystem_::STR,
                                            MobFamilySystem_::DEX,
                                            MobFamilySystem_::VIT,
                                            MobFamilySystem_::AGI,
                                            MobFamilySystem_::INT,
                                            MobFamilySystem_::MND,
                                            MobFamilySystem_::CHR,
                                            MobFamilySystem_::ATT,
                                            MobFamilySystem_::DEF,
                                            MobFamilySystem_::ACC,
                                            MobFamilySystem_::EVA,
                                            MobFamilySystem_::Element,
                                            MobFamilySystem_::Detects,
                                            MobFamilySystem_::Charmable>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_family_system";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobFamilySystem;
                T& operator()()
                {
                    return mobFamilySystem;
                }
                const T& operator()() const
                {
                    return mobFamilySystem;
                }
            };
        };
    };
    namespace MobGroups_
    {
        struct Groupid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "groupid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  groupid;
                    T& operator()()
                    {
                        return groupid;
                    }
                    const T& operator()() const
                    {
                        return groupid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Poolid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "poolid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  poolid;
                    T& operator()()
                    {
                        return poolid;
                    }
                    const T& operator()() const
                    {
                        return poolid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Zoneid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zoneid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zoneid;
                    T& operator()()
                    {
                        return zoneid;
                    }
                    const T& operator()() const
                    {
                        return zoneid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Respawntime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "respawntime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  respawntime;
                    T& operator()()
                    {
                        return respawntime;
                    }
                    const T& operator()() const
                    {
                        return respawntime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Spawntype
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spawntype";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  spawntype;
                    T& operator()()
                    {
                        return spawntype;
                    }
                    const T& operator()() const
                    {
                        return spawntype;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Dropid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dropid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dropid;
                    T& operator()()
                    {
                        return dropid;
                    }
                    const T& operator()() const
                    {
                        return dropid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct HP
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "HP";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  HP;
                    T& operator()()
                    {
                        return HP;
                    }
                    const T& operator()() const
                    {
                        return HP;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
        struct MP
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "MP";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  MP;
                    T& operator()()
                    {
                        return MP;
                    }
                    const T& operator()() const
                    {
                        return MP;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
        struct MinLevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "minLevel";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  minLevel;
                    T& operator()()
                    {
                        return minLevel;
                    }
                    const T& operator()() const
                    {
                        return minLevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MaxLevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "maxLevel";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  maxLevel;
                    T& operator()()
                    {
                        return maxLevel;
                    }
                    const T& operator()() const
                    {
                        return maxLevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Allegiance
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "allegiance";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  allegiance;
                    T& operator()()
                    {
                        return allegiance;
                    }
                    const T& operator()() const
                    {
                        return allegiance;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace MobGroups_

    struct MobGroups : sqlpp::table_t<MobGroups,
                                      MobGroups_::Groupid,
                                      MobGroups_::Poolid,
                                      MobGroups_::Zoneid,
                                      MobGroups_::Name,
                                      MobGroups_::Respawntime,
                                      MobGroups_::Spawntype,
                                      MobGroups_::Dropid,
                                      MobGroups_::HP,
                                      MobGroups_::MP,
                                      MobGroups_::MinLevel,
                                      MobGroups_::MaxLevel,
                                      MobGroups_::Allegiance>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_groups";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobGroups;
                T& operator()()
                {
                    return mobGroups;
                }
                const T& operator()() const
                {
                    return mobGroups;
                }
            };
        };
    };
    namespace MobPets_
    {
        struct MobMobid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_mobid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobMobid;
                    T& operator()()
                    {
                        return mobMobid;
                    }
                    const T& operator()() const
                    {
                        return mobMobid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct PetOffset
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pet_offset";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  petOffset;
                    T& operator()()
                    {
                        return petOffset;
                    }
                    const T& operator()() const
                    {
                        return petOffset;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Job
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "job";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  job;
                    T& operator()()
                    {
                        return job;
                    }
                    const T& operator()() const
                    {
                        return job;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct Mobname
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mobname";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobname;
                    T& operator()()
                    {
                        return mobname;
                    }
                    const T& operator()() const
                    {
                        return mobname;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Petname
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "petname";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  petname;
                    T& operator()()
                    {
                        return petname;
                    }
                    const T& operator()() const
                    {
                        return petname;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
    } // namespace MobPets_

    struct MobPets : sqlpp::table_t<MobPets,
                                    MobPets_::MobMobid,
                                    MobPets_::PetOffset,
                                    MobPets_::Job,
                                    MobPets_::Mobname,
                                    MobPets_::Petname>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_pets";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobPets;
                T& operator()()
                {
                    return mobPets;
                }
                const T& operator()() const
                {
                    return mobPets;
                }
            };
        };
    };
    namespace MobPoolMods_
    {
        struct Poolid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "poolid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  poolid;
                    T& operator()()
                    {
                        return poolid;
                    }
                    const T& operator()() const
                    {
                        return poolid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Modid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "modid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  modid;
                    T& operator()()
                    {
                        return modid;
                    }
                    const T& operator()() const
                    {
                        return modid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct IsMobMod
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "is_mob_mod";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  isMobMod;
                    T& operator()()
                    {
                        return isMobMod;
                    }
                    const T& operator()() const
                    {
                        return isMobMod;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
    } // namespace MobPoolMods_

    struct MobPoolMods : sqlpp::table_t<MobPoolMods,
                                        MobPoolMods_::Poolid,
                                        MobPoolMods_::Modid,
                                        MobPoolMods_::Value,
                                        MobPoolMods_::IsMobMod>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_pool_mods";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobPoolMods;
                T& operator()()
                {
                    return mobPoolMods;
                }
                const T& operator()() const
                {
                    return mobPoolMods;
                }
            };
        };
    };
    namespace MobPools_
    {
        struct Poolid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "poolid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  poolid;
                    T& operator()()
                    {
                        return poolid;
                    }
                    const T& operator()() const
                    {
                        return poolid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct PacketName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "packet_name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  packetName;
                    T& operator()()
                    {
                        return packetName;
                    }
                    const T& operator()() const
                    {
                        return packetName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Familyid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "familyid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  familyid;
                    T& operator()()
                    {
                        return familyid;
                    }
                    const T& operator()() const
                    {
                        return familyid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Modelid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "modelid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  modelid;
                    T& operator()()
                    {
                        return modelid;
                    }
                    const T& operator()() const
                    {
                        return modelid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct MJob
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mJob";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mJob;
                    T& operator()()
                    {
                        return mJob;
                    }
                    const T& operator()() const
                    {
                        return mJob;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SJob
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sJob";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sJob;
                    T& operator()()
                    {
                        return sJob;
                    }
                    const T& operator()() const
                    {
                        return sJob;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct CmbSkill
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "cmbSkill";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  cmbSkill;
                    T& operator()()
                    {
                        return cmbSkill;
                    }
                    const T& operator()() const
                    {
                        return cmbSkill;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct CmbDelay
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "cmbDelay";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  cmbDelay;
                    T& operator()()
                    {
                        return cmbDelay;
                    }
                    const T& operator()() const
                    {
                        return cmbDelay;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct CmbDmgMult
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "cmbDmgMult";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  cmbDmgMult;
                    T& operator()()
                    {
                        return cmbDmgMult;
                    }
                    const T& operator()() const
                    {
                        return cmbDmgMult;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Behavior
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "behavior";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  behavior;
                    T& operator()()
                    {
                        return behavior;
                    }
                    const T& operator()() const
                    {
                        return behavior;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Aggro
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "aggro";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  aggro;
                    T& operator()()
                    {
                        return aggro;
                    }
                    const T& operator()() const
                    {
                        return aggro;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct TrueDetection
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "true_detection";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  trueDetection;
                    T& operator()()
                    {
                        return trueDetection;
                    }
                    const T& operator()() const
                    {
                        return trueDetection;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Links
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "links";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  links;
                    T& operator()()
                    {
                        return links;
                    }
                    const T& operator()() const
                    {
                        return links;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MobType
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mobType";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobType;
                    T& operator()()
                    {
                        return mobType;
                    }
                    const T& operator()() const
                    {
                        return mobType;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Immunity
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "immunity";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  immunity;
                    T& operator()()
                    {
                        return immunity;
                    }
                    const T& operator()() const
                    {
                        return immunity;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
        struct NamePrefix
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name_prefix";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  namePrefix;
                    T& operator()()
                    {
                        return namePrefix;
                    }
                    const T& operator()() const
                    {
                        return namePrefix;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Flag
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "flag";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  flag;
                    T& operator()()
                    {
                        return flag;
                    }
                    const T& operator()() const
                    {
                        return flag;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct EntityFlags
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "entityFlags";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  entityFlags;
                    T& operator()()
                    {
                        return entityFlags;
                    }
                    const T& operator()() const
                    {
                        return entityFlags;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Animationsub
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "animationsub";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animationsub;
                    T& operator()()
                    {
                        return animationsub;
                    }
                    const T& operator()() const
                    {
                        return animationsub;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct HasSpellScript
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "hasSpellScript";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  hasSpellScript;
                    T& operator()()
                    {
                        return hasSpellScript;
                    }
                    const T& operator()() const
                    {
                        return hasSpellScript;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct SpellList
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spellList";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  spellList;
                    T& operator()()
                    {
                        return spellList;
                    }
                    const T& operator()() const
                    {
                        return spellList;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct Namevis
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "namevis";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  namevis;
                    T& operator()()
                    {
                        return namevis;
                    }
                    const T& operator()() const
                    {
                        return namevis;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct Roamflag
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "roamflag";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  roamflag;
                    T& operator()()
                    {
                        return roamflag;
                    }
                    const T& operator()() const
                    {
                        return roamflag;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct SkillListId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "skill_list_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  skillListId;
                    T& operator()()
                    {
                        return skillListId;
                    }
                    const T& operator()() const
                    {
                        return skillListId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ResistId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "resist_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  resistId;
                    T& operator()()
                    {
                        return resistId;
                    }
                    const T& operator()() const
                    {
                        return resistId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace MobPools_

    struct MobPools : sqlpp::table_t<MobPools,
                                     MobPools_::Poolid,
                                     MobPools_::Name,
                                     MobPools_::PacketName,
                                     MobPools_::Familyid,
                                     MobPools_::Modelid,
                                     MobPools_::MJob,
                                     MobPools_::SJob,
                                     MobPools_::CmbSkill,
                                     MobPools_::CmbDelay,
                                     MobPools_::CmbDmgMult,
                                     MobPools_::Behavior,
                                     MobPools_::Aggro,
                                     MobPools_::TrueDetection,
                                     MobPools_::Links,
                                     MobPools_::MobType,
                                     MobPools_::Immunity,
                                     MobPools_::NamePrefix,
                                     MobPools_::Flag,
                                     MobPools_::EntityFlags,
                                     MobPools_::Animationsub,
                                     MobPools_::HasSpellScript,
                                     MobPools_::SpellList,
                                     MobPools_::Namevis,
                                     MobPools_::Roamflag,
                                     MobPools_::SkillListId,
                                     MobPools_::ResistId>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_pools";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobPools;
                T& operator()()
                {
                    return mobPools;
                }
                const T& operator()() const
                {
                    return mobPools;
                }
            };
        };
    };
    namespace MobResistances_
    {
        struct ResistId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "resist_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  resistId;
                    T& operator()()
                    {
                        return resistId;
                    }
                    const T& operator()() const
                    {
                        return resistId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
        struct SlashSdt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "slash_sdt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  slashSdt;
                    T& operator()()
                    {
                        return slashSdt;
                    }
                    const T& operator()() const
                    {
                        return slashSdt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct PierceSdt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pierce_sdt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pierceSdt;
                    T& operator()()
                    {
                        return pierceSdt;
                    }
                    const T& operator()() const
                    {
                        return pierceSdt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct H2HSdt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "h2h_sdt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  h2HSdt;
                    T& operator()()
                    {
                        return h2HSdt;
                    }
                    const T& operator()() const
                    {
                        return h2HSdt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct ImpactSdt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "impact_sdt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  impactSdt;
                    T& operator()()
                    {
                        return impactSdt;
                    }
                    const T& operator()() const
                    {
                        return impactSdt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct FireSdt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fire_sdt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fireSdt;
                    T& operator()()
                    {
                        return fireSdt;
                    }
                    const T& operator()() const
                    {
                        return fireSdt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct IceSdt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ice_sdt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  iceSdt;
                    T& operator()()
                    {
                        return iceSdt;
                    }
                    const T& operator()() const
                    {
                        return iceSdt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct WindSdt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wind_sdt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  windSdt;
                    T& operator()()
                    {
                        return windSdt;
                    }
                    const T& operator()() const
                    {
                        return windSdt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct EarthSdt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "earth_sdt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  earthSdt;
                    T& operator()()
                    {
                        return earthSdt;
                    }
                    const T& operator()() const
                    {
                        return earthSdt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct LightningSdt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lightning_sdt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lightningSdt;
                    T& operator()()
                    {
                        return lightningSdt;
                    }
                    const T& operator()() const
                    {
                        return lightningSdt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct WaterSdt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "water_sdt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  waterSdt;
                    T& operator()()
                    {
                        return waterSdt;
                    }
                    const T& operator()() const
                    {
                        return waterSdt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct LightSdt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "light_sdt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lightSdt;
                    T& operator()()
                    {
                        return lightSdt;
                    }
                    const T& operator()() const
                    {
                        return lightSdt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct DarkSdt
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dark_sdt";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  darkSdt;
                    T& operator()()
                    {
                        return darkSdt;
                    }
                    const T& operator()() const
                    {
                        return darkSdt;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct FireRes
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fire_res";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fireRes;
                    T& operator()()
                    {
                        return fireRes;
                    }
                    const T& operator()() const
                    {
                        return fireRes;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct IceRes
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ice_res";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  iceRes;
                    T& operator()()
                    {
                        return iceRes;
                    }
                    const T& operator()() const
                    {
                        return iceRes;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct WindRes
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "wind_res";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  windRes;
                    T& operator()()
                    {
                        return windRes;
                    }
                    const T& operator()() const
                    {
                        return windRes;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct EarthRes
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "earth_res";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  earthRes;
                    T& operator()()
                    {
                        return earthRes;
                    }
                    const T& operator()() const
                    {
                        return earthRes;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct LightningRes
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "lightning_res";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lightningRes;
                    T& operator()()
                    {
                        return lightningRes;
                    }
                    const T& operator()() const
                    {
                        return lightningRes;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct WaterRes
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "water_res";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  waterRes;
                    T& operator()()
                    {
                        return waterRes;
                    }
                    const T& operator()() const
                    {
                        return waterRes;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct LightRes
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "light_res";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  lightRes;
                    T& operator()()
                    {
                        return lightRes;
                    }
                    const T& operator()() const
                    {
                        return lightRes;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct DarkRes
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dark_res";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  darkRes;
                    T& operator()()
                    {
                        return darkRes;
                    }
                    const T& operator()() const
                    {
                        return darkRes;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
    } // namespace MobResistances_

    struct MobResistances : sqlpp::table_t<MobResistances,
                                           MobResistances_::ResistId,
                                           MobResistances_::Name,
                                           MobResistances_::SlashSdt,
                                           MobResistances_::PierceSdt,
                                           MobResistances_::H2HSdt,
                                           MobResistances_::ImpactSdt,
                                           MobResistances_::FireSdt,
                                           MobResistances_::IceSdt,
                                           MobResistances_::WindSdt,
                                           MobResistances_::EarthSdt,
                                           MobResistances_::LightningSdt,
                                           MobResistances_::WaterSdt,
                                           MobResistances_::LightSdt,
                                           MobResistances_::DarkSdt,
                                           MobResistances_::FireRes,
                                           MobResistances_::IceRes,
                                           MobResistances_::WindRes,
                                           MobResistances_::EarthRes,
                                           MobResistances_::LightningRes,
                                           MobResistances_::WaterRes,
                                           MobResistances_::LightRes,
                                           MobResistances_::DarkRes>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_resistances";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobResistances;
                T& operator()()
                {
                    return mobResistances;
                }
                const T& operator()() const
                {
                    return mobResistances;
                }
            };
        };
    };
    namespace MobSkillLists_
    {
        struct SkillListName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "skill_list_name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  skillListName;
                    T& operator()()
                    {
                        return skillListName;
                    }
                    const T& operator()() const
                    {
                        return skillListName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct SkillListId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "skill_list_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  skillListId;
                    T& operator()()
                    {
                        return skillListId;
                    }
                    const T& operator()() const
                    {
                        return skillListId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct MobSkillId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_skill_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobSkillId;
                    T& operator()()
                    {
                        return mobSkillId;
                    }
                    const T& operator()() const
                    {
                        return mobSkillId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
    } // namespace MobSkillLists_

    struct MobSkillLists : sqlpp::table_t<MobSkillLists,
                                          MobSkillLists_::SkillListName,
                                          MobSkillLists_::SkillListId,
                                          MobSkillLists_::MobSkillId>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_skill_lists";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobSkillLists;
                T& operator()()
                {
                    return mobSkillLists;
                }
                const T& operator()() const
                {
                    return mobSkillLists;
                }
            };
        };
    };
    namespace MobSkills_
    {
        struct MobSkillId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_skill_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobSkillId;
                    T& operator()()
                    {
                        return mobSkillId;
                    }
                    const T& operator()() const
                    {
                        return mobSkillId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct MobAnimId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_anim_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobAnimId;
                    T& operator()()
                    {
                        return mobAnimId;
                    }
                    const T& operator()() const
                    {
                        return mobAnimId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct MobSkillName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_skill_name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobSkillName;
                    T& operator()()
                    {
                        return mobSkillName;
                    }
                    const T& operator()() const
                    {
                        return mobSkillName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct MobSkillAoe
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_skill_aoe";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobSkillAoe;
                    T& operator()()
                    {
                        return mobSkillAoe;
                    }
                    const T& operator()() const
                    {
                        return mobSkillAoe;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MobSkillDistance
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_skill_distance";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobSkillDistance;
                    T& operator()()
                    {
                        return mobSkillDistance;
                    }
                    const T& operator()() const
                    {
                        return mobSkillDistance;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct MobAnimTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_anim_time";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobAnimTime;
                    T& operator()()
                    {
                        return mobAnimTime;
                    }
                    const T& operator()() const
                    {
                        return mobAnimTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct MobPrepareTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_prepare_time";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobPrepareTime;
                    T& operator()()
                    {
                        return mobPrepareTime;
                    }
                    const T& operator()() const
                    {
                        return mobPrepareTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct MobValidTargets
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_valid_targets";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobValidTargets;
                    T& operator()()
                    {
                        return mobValidTargets;
                    }
                    const T& operator()() const
                    {
                        return mobValidTargets;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct MobSkillFlag
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_skill_flag";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobSkillFlag;
                    T& operator()()
                    {
                        return mobSkillFlag;
                    }
                    const T& operator()() const
                    {
                        return mobSkillFlag;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MobSkillParam
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mob_skill_param";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobSkillParam;
                    T& operator()()
                    {
                        return mobSkillParam;
                    }
                    const T& operator()() const
                    {
                        return mobSkillParam;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct Knockback
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "knockback";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  knockback;
                    T& operator()()
                    {
                        return knockback;
                    }
                    const T& operator()() const
                    {
                        return knockback;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct PrimarySc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "primary_sc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  primarySc;
                    T& operator()()
                    {
                        return primarySc;
                    }
                    const T& operator()() const
                    {
                        return primarySc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct SecondarySc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "secondary_sc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  secondarySc;
                    T& operator()()
                    {
                        return secondarySc;
                    }
                    const T& operator()() const
                    {
                        return secondarySc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct TertiarySc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "tertiary_sc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  tertiarySc;
                    T& operator()()
                    {
                        return tertiarySc;
                    }
                    const T& operator()() const
                    {
                        return tertiarySc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
    } // namespace MobSkills_

    struct MobSkills : sqlpp::table_t<MobSkills,
                                      MobSkills_::MobSkillId,
                                      MobSkills_::MobAnimId,
                                      MobSkills_::MobSkillName,
                                      MobSkills_::MobSkillAoe,
                                      MobSkills_::MobSkillDistance,
                                      MobSkills_::MobAnimTime,
                                      MobSkills_::MobPrepareTime,
                                      MobSkills_::MobValidTargets,
                                      MobSkills_::MobSkillFlag,
                                      MobSkills_::MobSkillParam,
                                      MobSkills_::Knockback,
                                      MobSkills_::PrimarySc,
                                      MobSkills_::SecondarySc,
                                      MobSkills_::TertiarySc>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_skills";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobSkills;
                T& operator()()
                {
                    return mobSkills;
                }
                const T& operator()() const
                {
                    return mobSkills;
                }
            };
        };
    };
    namespace MobSpawnMods_
    {
        struct Mobid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mobid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobid;
                    T& operator()()
                    {
                        return mobid;
                    }
                    const T& operator()() const
                    {
                        return mobid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Modid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "modid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  modid;
                    T& operator()()
                    {
                        return modid;
                    }
                    const T& operator()() const
                    {
                        return modid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct IsMobMod
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "is_mob_mod";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  isMobMod;
                    T& operator()()
                    {
                        return isMobMod;
                    }
                    const T& operator()() const
                    {
                        return isMobMod;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
    } // namespace MobSpawnMods_

    struct MobSpawnMods : sqlpp::table_t<MobSpawnMods,
                                         MobSpawnMods_::Mobid,
                                         MobSpawnMods_::Modid,
                                         MobSpawnMods_::Value,
                                         MobSpawnMods_::IsMobMod>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_spawn_mods";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobSpawnMods;
                T& operator()()
                {
                    return mobSpawnMods;
                }
                const T& operator()() const
                {
                    return mobSpawnMods;
                }
            };
        };
    };
    namespace MobSpawnPoints_
    {
        struct Mobid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mobid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobid;
                    T& operator()()
                    {
                        return mobid;
                    }
                    const T& operator()() const
                    {
                        return mobid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
        struct Mobname
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mobname";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobname;
                    T& operator()()
                    {
                        return mobname;
                    }
                    const T& operator()() const
                    {
                        return mobname;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct PolutilsName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "polutils_name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  polutilsName;
                    T& operator()()
                    {
                        return polutilsName;
                    }
                    const T& operator()() const
                    {
                        return polutilsName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Groupid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "groupid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  groupid;
                    T& operator()()
                    {
                        return groupid;
                    }
                    const T& operator()() const
                    {
                        return groupid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct PosX
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_x";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posX;
                    T& operator()()
                    {
                        return posX;
                    }
                    const T& operator()() const
                    {
                        return posX;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct PosY
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_y";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posY;
                    T& operator()()
                    {
                        return posY;
                    }
                    const T& operator()() const
                    {
                        return posY;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct PosZ
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_z";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posZ;
                    T& operator()()
                    {
                        return posZ;
                    }
                    const T& operator()() const
                    {
                        return posZ;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct PosRot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_rot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posRot;
                    T& operator()()
                    {
                        return posRot;
                    }
                    const T& operator()() const
                    {
                        return posRot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace MobSpawnPoints_

    struct MobSpawnPoints : sqlpp::table_t<MobSpawnPoints,
                                           MobSpawnPoints_::Mobid,
                                           MobSpawnPoints_::Mobname,
                                           MobSpawnPoints_::PolutilsName,
                                           MobSpawnPoints_::Groupid,
                                           MobSpawnPoints_::PosX,
                                           MobSpawnPoints_::PosY,
                                           MobSpawnPoints_::PosZ,
                                           MobSpawnPoints_::PosRot>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_spawn_points";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobSpawnPoints;
                T& operator()()
                {
                    return mobSpawnPoints;
                }
                const T& operator()() const
                {
                    return mobSpawnPoints;
                }
            };
        };
    };
    namespace MobSpellLists_
    {
        struct SpellListName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spell_list_name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  spellListName;
                    T& operator()()
                    {
                        return spellListName;
                    }
                    const T& operator()() const
                    {
                        return spellListName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct SpellListId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spell_list_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  spellListId;
                    T& operator()()
                    {
                        return spellListId;
                    }
                    const T& operator()() const
                    {
                        return spellListId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct SpellId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spell_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  spellId;
                    T& operator()()
                    {
                        return spellId;
                    }
                    const T& operator()() const
                    {
                        return spellId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct MinLevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "min_level";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  minLevel;
                    T& operator()()
                    {
                        return minLevel;
                    }
                    const T& operator()() const
                    {
                        return minLevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct MaxLevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "max_level";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  maxLevel;
                    T& operator()()
                    {
                        return maxLevel;
                    }
                    const T& operator()() const
                    {
                        return maxLevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
    } // namespace MobSpellLists_

    struct MobSpellLists : sqlpp::table_t<MobSpellLists,
                                          MobSpellLists_::SpellListName,
                                          MobSpellLists_::SpellListId,
                                          MobSpellLists_::SpellId,
                                          MobSpellLists_::MinLevel,
                                          MobSpellLists_::MaxLevel>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "mob_spell_lists";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  mobSpellLists;
                T& operator()()
                {
                    return mobSpellLists;
                }
                const T& operator()() const
                {
                    return mobSpellLists;
                }
            };
        };
    };
    namespace NmSpawnPoints_
    {
        struct Mobid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mobid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mobid;
                    T& operator()()
                    {
                        return mobid;
                    }
                    const T& operator()() const
                    {
                        return mobid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
        struct Pos
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pos;
                    T& operator()()
                    {
                        return pos;
                    }
                    const T& operator()() const
                    {
                        return pos;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct PosX
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_x";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posX;
                    T& operator()()
                    {
                        return posX;
                    }
                    const T& operator()() const
                    {
                        return posX;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct PosY
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_y";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posY;
                    T& operator()()
                    {
                        return posY;
                    }
                    const T& operator()() const
                    {
                        return posY;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct PosZ
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_z";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posZ;
                    T& operator()()
                    {
                        return posZ;
                    }
                    const T& operator()() const
                    {
                        return posZ;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
    } // namespace NmSpawnPoints_

    struct NmSpawnPoints : sqlpp::table_t<NmSpawnPoints,
                                          NmSpawnPoints_::Mobid,
                                          NmSpawnPoints_::Pos,
                                          NmSpawnPoints_::PosX,
                                          NmSpawnPoints_::PosY,
                                          NmSpawnPoints_::PosZ>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "nm_spawn_points";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  nmSpawnPoints;
                T& operator()()
                {
                    return nmSpawnPoints;
                }
                const T& operator()() const
                {
                    return nmSpawnPoints;
                }
            };
        };
    };
    namespace NpcList_
    {
        struct Npcid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "npcid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  npcid;
                    T& operator()()
                    {
                        return npcid;
                    }
                    const T& operator()() const
                    {
                        return npcid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
        };
        struct PolutilsName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "polutils_name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  polutilsName;
                    T& operator()()
                    {
                        return polutilsName;
                    }
                    const T& operator()() const
                    {
                        return polutilsName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
        };
        struct PosRot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_rot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posRot;
                    T& operator()()
                    {
                        return posRot;
                    }
                    const T& operator()() const
                    {
                        return posRot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct PosX
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_x";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posX;
                    T& operator()()
                    {
                        return posX;
                    }
                    const T& operator()() const
                    {
                        return posX;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct PosY
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_y";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posY;
                    T& operator()()
                    {
                        return posY;
                    }
                    const T& operator()() const
                    {
                        return posY;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct PosZ
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_z";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posZ;
                    T& operator()()
                    {
                        return posZ;
                    }
                    const T& operator()() const
                    {
                        return posZ;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct Flag
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "flag";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  flag;
                    T& operator()()
                    {
                        return flag;
                    }
                    const T& operator()() const
                    {
                        return flag;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Speed
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "speed";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  speed;
                    T& operator()()
                    {
                        return speed;
                    }
                    const T& operator()() const
                    {
                        return speed;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Speedsub
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "speedsub";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  speedsub;
                    T& operator()()
                    {
                        return speedsub;
                    }
                    const T& operator()() const
                    {
                        return speedsub;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Animation
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "animation";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animation;
                    T& operator()()
                    {
                        return animation;
                    }
                    const T& operator()() const
                    {
                        return animation;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Animationsub
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "animationsub";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animationsub;
                    T& operator()()
                    {
                        return animationsub;
                    }
                    const T& operator()() const
                    {
                        return animationsub;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Namevis
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "namevis";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  namevis;
                    T& operator()()
                    {
                        return namevis;
                    }
                    const T& operator()() const
                    {
                        return namevis;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Status
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "status";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  status;
                    T& operator()()
                    {
                        return status;
                    }
                    const T& operator()() const
                    {
                        return status;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct EntityFlags
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "entityFlags";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  entityFlags;
                    T& operator()()
                    {
                        return entityFlags;
                    }
                    const T& operator()() const
                    {
                        return entityFlags;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Look
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "look";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  look;
                    T& operator()()
                    {
                        return look;
                    }
                    const T& operator()() const
                    {
                        return look;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct NamePrefix
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name_prefix";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  namePrefix;
                    T& operator()()
                    {
                        return namePrefix;
                    }
                    const T& operator()() const
                    {
                        return namePrefix;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct ContentTag
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "content_tag";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  contentTag;
                    T& operator()()
                    {
                        return contentTag;
                    }
                    const T& operator()() const
                    {
                        return contentTag;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Widescan
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "widescan";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  widescan;
                    T& operator()()
                    {
                        return widescan;
                    }
                    const T& operator()() const
                    {
                        return widescan;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace NpcList_

    struct NpcList : sqlpp::table_t<NpcList,
                                    NpcList_::Npcid,
                                    NpcList_::Name,
                                    NpcList_::PolutilsName,
                                    NpcList_::PosRot,
                                    NpcList_::PosX,
                                    NpcList_::PosY,
                                    NpcList_::PosZ,
                                    NpcList_::Flag,
                                    NpcList_::Speed,
                                    NpcList_::Speedsub,
                                    NpcList_::Animation,
                                    NpcList_::Animationsub,
                                    NpcList_::Namevis,
                                    NpcList_::Status,
                                    NpcList_::EntityFlags,
                                    NpcList_::Look,
                                    NpcList_::NamePrefix,
                                    NpcList_::ContentTag,
                                    NpcList_::Widescan>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "npc_list";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  npcList;
                T& operator()()
                {
                    return npcList;
                }
                const T& operator()() const
                {
                    return npcList;
                }
            };
        };
    };
    namespace PetList_
    {
        struct Petid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "petid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  petid;
                    T& operator()()
                    {
                        return petid;
                    }
                    const T& operator()() const
                    {
                        return petid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
        };
        struct Poolid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "poolid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  poolid;
                    T& operator()()
                    {
                        return poolid;
                    }
                    const T& operator()() const
                    {
                        return poolid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct MinLevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "minLevel";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  minLevel;
                    T& operator()()
                    {
                        return minLevel;
                    }
                    const T& operator()() const
                    {
                        return minLevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MaxLevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "maxLevel";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  maxLevel;
                    T& operator()()
                    {
                        return maxLevel;
                    }
                    const T& operator()() const
                    {
                        return maxLevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Time
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "time";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  time;
                    T& operator()()
                    {
                        return time;
                    }
                    const T& operator()() const
                    {
                        return time;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Element
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "element";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  element;
                    T& operator()()
                    {
                        return element;
                    }
                    const T& operator()() const
                    {
                        return element;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace PetList_

    struct PetList : sqlpp::table_t<PetList,
                                    PetList_::Petid,
                                    PetList_::Name,
                                    PetList_::Poolid,
                                    PetList_::MinLevel,
                                    PetList_::MaxLevel,
                                    PetList_::Time,
                                    PetList_::Element>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "pet_list";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  petList;
                T& operator()()
                {
                    return petList;
                }
                const T& operator()() const
                {
                    return petList;
                }
            };
        };
    };
    namespace PetName_
    {
        struct Id
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  id;
                    T& operator()()
                    {
                        return id;
                    }
                    const T& operator()() const
                    {
                        return id;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
        };
    } // namespace PetName_

    struct PetName : sqlpp::table_t<PetName,
                                    PetName_::Id,
                                    PetName_::Name>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "pet_name";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  petName;
                T& operator()()
                {
                    return petName;
                }
                const T& operator()() const
                {
                    return petName;
                }
            };
        };
    };
    namespace ServerVariables_
    {
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
    } // namespace ServerVariables_

    struct ServerVariables : sqlpp::table_t<ServerVariables,
                                            ServerVariables_::Name,
                                            ServerVariables_::Value>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "server_variables";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  serverVariables;
                T& operator()()
                {
                    return serverVariables;
                }
                const T& operator()() const
                {
                    return serverVariables;
                }
            };
        };
    };
    namespace SkillCaps_
    {
        struct Level
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "level";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  level;
                    T& operator()()
                    {
                        return level;
                    }
                    const T& operator()() const
                    {
                        return level;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct R0
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r0";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r0;
                    T& operator()()
                    {
                        return r0;
                    }
                    const T& operator()() const
                    {
                        return r0;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r1;
                    T& operator()()
                    {
                        return r1;
                    }
                    const T& operator()() const
                    {
                        return r1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r2;
                    T& operator()()
                    {
                        return r2;
                    }
                    const T& operator()() const
                    {
                        return r2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R3
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r3";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r3;
                    T& operator()()
                    {
                        return r3;
                    }
                    const T& operator()() const
                    {
                        return r3;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R4
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r4";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r4;
                    T& operator()()
                    {
                        return r4;
                    }
                    const T& operator()() const
                    {
                        return r4;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R5
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r5";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r5;
                    T& operator()()
                    {
                        return r5;
                    }
                    const T& operator()() const
                    {
                        return r5;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R6
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r6";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r6;
                    T& operator()()
                    {
                        return r6;
                    }
                    const T& operator()() const
                    {
                        return r6;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R7
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r7";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r7;
                    T& operator()()
                    {
                        return r7;
                    }
                    const T& operator()() const
                    {
                        return r7;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R8
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r8";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r8;
                    T& operator()()
                    {
                        return r8;
                    }
                    const T& operator()() const
                    {
                        return r8;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R9
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r9";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r9;
                    T& operator()()
                    {
                        return r9;
                    }
                    const T& operator()() const
                    {
                        return r9;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R10
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r10";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r10;
                    T& operator()()
                    {
                        return r10;
                    }
                    const T& operator()() const
                    {
                        return r10;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R11
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r11";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r11;
                    T& operator()()
                    {
                        return r11;
                    }
                    const T& operator()() const
                    {
                        return r11;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R12
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r12";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r12;
                    T& operator()()
                    {
                        return r12;
                    }
                    const T& operator()() const
                    {
                        return r12;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct R13
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "r13";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  r13;
                    T& operator()()
                    {
                        return r13;
                    }
                    const T& operator()() const
                    {
                        return r13;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace SkillCaps_

    struct SkillCaps : sqlpp::table_t<SkillCaps,
                                      SkillCaps_::Level,
                                      SkillCaps_::R0,
                                      SkillCaps_::R1,
                                      SkillCaps_::R2,
                                      SkillCaps_::R3,
                                      SkillCaps_::R4,
                                      SkillCaps_::R5,
                                      SkillCaps_::R6,
                                      SkillCaps_::R7,
                                      SkillCaps_::R8,
                                      SkillCaps_::R9,
                                      SkillCaps_::R10,
                                      SkillCaps_::R11,
                                      SkillCaps_::R12,
                                      SkillCaps_::R13>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "skill_caps";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  skillCaps;
                T& operator()()
                {
                    return skillCaps;
                }
                const T& operator()() const
                {
                    return skillCaps;
                }
            };
        };
    };
    namespace SkillRanks_
    {
        struct Skillid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "skillid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  skillid;
                    T& operator()()
                    {
                        return skillid;
                    }
                    const T& operator()() const
                    {
                        return skillid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
        };
        struct War
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "war";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  war;
                    T& operator()()
                    {
                        return war;
                    }
                    const T& operator()() const
                    {
                        return war;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Mnk
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mnk";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mnk;
                    T& operator()()
                    {
                        return mnk;
                    }
                    const T& operator()() const
                    {
                        return mnk;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Whm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "whm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  whm;
                    T& operator()()
                    {
                        return whm;
                    }
                    const T& operator()() const
                    {
                        return whm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Blm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "blm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  blm;
                    T& operator()()
                    {
                        return blm;
                    }
                    const T& operator()() const
                    {
                        return blm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Rdm
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rdm";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rdm;
                    T& operator()()
                    {
                        return rdm;
                    }
                    const T& operator()() const
                    {
                        return rdm;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Thf
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "thf";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  thf;
                    T& operator()()
                    {
                        return thf;
                    }
                    const T& operator()() const
                    {
                        return thf;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Pld
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pld";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pld;
                    T& operator()()
                    {
                        return pld;
                    }
                    const T& operator()() const
                    {
                        return pld;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Drk
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "drk";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  drk;
                    T& operator()()
                    {
                        return drk;
                    }
                    const T& operator()() const
                    {
                        return drk;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Bst
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "bst";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  bst;
                    T& operator()()
                    {
                        return bst;
                    }
                    const T& operator()() const
                    {
                        return bst;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Brd
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "brd";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  brd;
                    T& operator()()
                    {
                        return brd;
                    }
                    const T& operator()() const
                    {
                        return brd;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Rng
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rng";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rng;
                    T& operator()()
                    {
                        return rng;
                    }
                    const T& operator()() const
                    {
                        return rng;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Sam
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sam";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sam;
                    T& operator()()
                    {
                        return sam;
                    }
                    const T& operator()() const
                    {
                        return sam;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Nin
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "nin";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  nin;
                    T& operator()()
                    {
                        return nin;
                    }
                    const T& operator()() const
                    {
                        return nin;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Drg
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "drg";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  drg;
                    T& operator()()
                    {
                        return drg;
                    }
                    const T& operator()() const
                    {
                        return drg;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Smn
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "smn";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  smn;
                    T& operator()()
                    {
                        return smn;
                    }
                    const T& operator()() const
                    {
                        return smn;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Blu
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "blu";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  blu;
                    T& operator()()
                    {
                        return blu;
                    }
                    const T& operator()() const
                    {
                        return blu;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Cor
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "cor";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  cor;
                    T& operator()()
                    {
                        return cor;
                    }
                    const T& operator()() const
                    {
                        return cor;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Pup
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pup";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pup;
                    T& operator()()
                    {
                        return pup;
                    }
                    const T& operator()() const
                    {
                        return pup;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Dnc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dnc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dnc;
                    T& operator()()
                    {
                        return dnc;
                    }
                    const T& operator()() const
                    {
                        return dnc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Sch
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sch";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sch;
                    T& operator()()
                    {
                        return sch;
                    }
                    const T& operator()() const
                    {
                        return sch;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Geo
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "geo";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  geo;
                    T& operator()()
                    {
                        return geo;
                    }
                    const T& operator()() const
                    {
                        return geo;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Run
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "run";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  run;
                    T& operator()()
                    {
                        return run;
                    }
                    const T& operator()() const
                    {
                        return run;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace SkillRanks_

    struct SkillRanks : sqlpp::table_t<SkillRanks,
                                       SkillRanks_::Skillid,
                                       SkillRanks_::Name,
                                       SkillRanks_::War,
                                       SkillRanks_::Mnk,
                                       SkillRanks_::Whm,
                                       SkillRanks_::Blm,
                                       SkillRanks_::Rdm,
                                       SkillRanks_::Thf,
                                       SkillRanks_::Pld,
                                       SkillRanks_::Drk,
                                       SkillRanks_::Bst,
                                       SkillRanks_::Brd,
                                       SkillRanks_::Rng,
                                       SkillRanks_::Sam,
                                       SkillRanks_::Nin,
                                       SkillRanks_::Drg,
                                       SkillRanks_::Smn,
                                       SkillRanks_::Blu,
                                       SkillRanks_::Cor,
                                       SkillRanks_::Pup,
                                       SkillRanks_::Dnc,
                                       SkillRanks_::Sch,
                                       SkillRanks_::Geo,
                                       SkillRanks_::Run>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "skill_ranks";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  skillRanks;
                T& operator()()
                {
                    return skillRanks;
                }
                const T& operator()() const
                {
                    return skillRanks;
                }
            };
        };
    };
    namespace SkillchainDamageModifiers_
    {
        struct ChainLevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "chain_level";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  chainLevel;
                    T& operator()()
                    {
                        return chainLevel;
                    }
                    const T& operator()() const
                    {
                        return chainLevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text>;
        };
        struct ChainCount
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "chain_count";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  chainCount;
                    T& operator()()
                    {
                        return chainCount;
                    }
                    const T& operator()() const
                    {
                        return chainCount;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text>;
        };
        struct InitialModifier
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "initial_modifier";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  initialModifier;
                    T& operator()()
                    {
                        return initialModifier;
                    }
                    const T& operator()() const
                    {
                        return initialModifier;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
        struct MagicBurstModifier
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "magic_burst_modifier";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  magicBurstModifier;
                    T& operator()()
                    {
                        return magicBurstModifier;
                    }
                    const T& operator()() const
                    {
                        return magicBurstModifier;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
    } // namespace SkillchainDamageModifiers_

    struct SkillchainDamageModifiers : sqlpp::table_t<SkillchainDamageModifiers,
                                                      SkillchainDamageModifiers_::ChainLevel,
                                                      SkillchainDamageModifiers_::ChainCount,
                                                      SkillchainDamageModifiers_::InitialModifier,
                                                      SkillchainDamageModifiers_::MagicBurstModifier>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "skillchain_damage_modifiers";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  skillchainDamageModifiers;
                T& operator()()
                {
                    return skillchainDamageModifiers;
                }
                const T& operator()() const
                {
                    return skillchainDamageModifiers;
                }
            };
        };
    };
    namespace SpellList_
    {
        struct Spellid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spellid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  spellid;
                    T& operator()()
                    {
                        return spellid;
                    }
                    const T& operator()() const
                    {
                        return spellid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Jobs
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jobs";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jobs;
                    T& operator()()
                    {
                        return jobs;
                    }
                    const T& operator()() const
                    {
                        return jobs;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
        struct Group
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "!group";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  group;
                    T& operator()()
                    {
                        return group;
                    }
                    const T& operator()() const
                    {
                        return group;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Family
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "family";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  family;
                    T& operator()()
                    {
                        return family;
                    }
                    const T& operator()() const
                    {
                        return family;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Element
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "element";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  element;
                    T& operator()()
                    {
                        return element;
                    }
                    const T& operator()() const
                    {
                        return element;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Zonemisc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zonemisc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zonemisc;
                    T& operator()()
                    {
                        return zonemisc;
                    }
                    const T& operator()() const
                    {
                        return zonemisc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ValidTargets
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "validTargets";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  validTargets;
                    T& operator()()
                    {
                        return validTargets;
                    }
                    const T& operator()() const
                    {
                        return validTargets;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Skill
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "skill";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  skill;
                    T& operator()()
                    {
                        return skill;
                    }
                    const T& operator()() const
                    {
                        return skill;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MpCost
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "mpCost";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mpCost;
                    T& operator()()
                    {
                        return mpCost;
                    }
                    const T& operator()() const
                    {
                        return mpCost;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct CastTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "castTime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  castTime;
                    T& operator()()
                    {
                        return castTime;
                    }
                    const T& operator()() const
                    {
                        return castTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct RecastTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "recastTime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  recastTime;
                    T& operator()()
                    {
                        return recastTime;
                    }
                    const T& operator()() const
                    {
                        return recastTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Message
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "message";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  message;
                    T& operator()()
                    {
                        return message;
                    }
                    const T& operator()() const
                    {
                        return message;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct MagicBurstMessage
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "magicBurstMessage";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  magicBurstMessage;
                    T& operator()()
                    {
                        return magicBurstMessage;
                    }
                    const T& operator()() const
                    {
                        return magicBurstMessage;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct Animation
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "animation";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animation;
                    T& operator()()
                    {
                        return animation;
                    }
                    const T& operator()() const
                    {
                        return animation;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct AnimationTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "animationTime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animationTime;
                    T& operator()()
                    {
                        return animationTime;
                    }
                    const T& operator()() const
                    {
                        return animationTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct AOE
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "AOE";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  AOE;
                    T& operator()()
                    {
                        return AOE;
                    }
                    const T& operator()() const
                    {
                        return AOE;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Base
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "base";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  base;
                    T& operator()()
                    {
                        return base;
                    }
                    const T& operator()() const
                    {
                        return base;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Multiplier
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "multiplier";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  multiplier;
                    T& operator()()
                    {
                        return multiplier;
                    }
                    const T& operator()() const
                    {
                        return multiplier;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct CE
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "CE";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  CE;
                    T& operator()()
                    {
                        return CE;
                    }
                    const T& operator()() const
                    {
                        return CE;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct VE
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "VE";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  VE;
                    T& operator()()
                    {
                        return VE;
                    }
                    const T& operator()() const
                    {
                        return VE;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Requirements
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "requirements";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  requirements;
                    T& operator()()
                    {
                        return requirements;
                    }
                    const T& operator()() const
                    {
                        return requirements;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct SpellRange
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "spell_range";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  spellRange;
                    T& operator()()
                    {
                        return spellRange;
                    }
                    const T& operator()() const
                    {
                        return spellRange;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct ContentTag
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "content_tag";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  contentTag;
                    T& operator()()
                    {
                        return contentTag;
                    }
                    const T& operator()() const
                    {
                        return contentTag;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
    } // namespace SpellList_

    struct SpellList : sqlpp::table_t<SpellList,
                                      SpellList_::Spellid,
                                      SpellList_::Name,
                                      SpellList_::Jobs,
                                      SpellList_::Group,
                                      SpellList_::Family,
                                      SpellList_::Element,
                                      SpellList_::Zonemisc,
                                      SpellList_::ValidTargets,
                                      SpellList_::Skill,
                                      SpellList_::MpCost,
                                      SpellList_::CastTime,
                                      SpellList_::RecastTime,
                                      SpellList_::Message,
                                      SpellList_::MagicBurstMessage,
                                      SpellList_::Animation,
                                      SpellList_::AnimationTime,
                                      SpellList_::AOE,
                                      SpellList_::Base,
                                      SpellList_::Multiplier,
                                      SpellList_::CE,
                                      SpellList_::VE,
                                      SpellList_::Requirements,
                                      SpellList_::SpellRange,
                                      SpellList_::ContentTag>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "spell_list";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  spellList;
                T& operator()()
                {
                    return spellList;
                }
                const T& operator()() const
                {
                    return spellList;
                }
            };
        };
    };
    namespace StatusEffects_
    {
        struct Id
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  id;
                    T& operator()()
                    {
                        return id;
                    }
                    const T& operator()() const
                    {
                        return id;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Flags
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "flags";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  flags;
                    T& operator()()
                    {
                        return flags;
                    }
                    const T& operator()() const
                    {
                        return flags;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Type
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "type";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  type;
                    T& operator()()
                    {
                        return type;
                    }
                    const T& operator()() const
                    {
                        return type;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct NegativeId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "negative_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  negativeId;
                    T& operator()()
                    {
                        return negativeId;
                    }
                    const T& operator()() const
                    {
                        return negativeId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Overwrite
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "overwrite";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  overwrite;
                    T& operator()()
                    {
                        return overwrite;
                    }
                    const T& operator()() const
                    {
                        return overwrite;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct BlockId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "block_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  blockId;
                    T& operator()()
                    {
                        return blockId;
                    }
                    const T& operator()() const
                    {
                        return blockId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct RemoveId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "remove_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  removeId;
                    T& operator()()
                    {
                        return removeId;
                    }
                    const T& operator()() const
                    {
                        return removeId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Element
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "element";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  element;
                    T& operator()()
                    {
                        return element;
                    }
                    const T& operator()() const
                    {
                        return element;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct MinDuration
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "min_duration";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  minDuration;
                    T& operator()()
                    {
                        return minDuration;
                    }
                    const T& operator()() const
                    {
                        return minDuration;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct SortKey
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "sort_key";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  sortKey;
                    T& operator()()
                    {
                        return sortKey;
                    }
                    const T& operator()() const
                    {
                        return sortKey;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace StatusEffects_

    struct StatusEffects : sqlpp::table_t<StatusEffects,
                                          StatusEffects_::Id,
                                          StatusEffects_::Name,
                                          StatusEffects_::Flags,
                                          StatusEffects_::Type,
                                          StatusEffects_::NegativeId,
                                          StatusEffects_::Overwrite,
                                          StatusEffects_::BlockId,
                                          StatusEffects_::RemoveId,
                                          StatusEffects_::Element,
                                          StatusEffects_::MinDuration,
                                          StatusEffects_::SortKey>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "status_effects";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  statusEffects;
                T& operator()()
                {
                    return statusEffects;
                }
                const T& operator()() const
                {
                    return statusEffects;
                }
            };
        };
    };
    namespace SynthRecipes_
    {
        struct ID
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ID";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ID;
                    T& operator()()
                    {
                        return ID;
                    }
                    const T& operator()() const
                    {
                        return ID;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
        };
        struct Desynth
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Desynth";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Desynth;
                    T& operator()()
                    {
                        return Desynth;
                    }
                    const T& operator()() const
                    {
                        return Desynth;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct KeyItem
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "KeyItem";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  KeyItem;
                    T& operator()()
                    {
                        return KeyItem;
                    }
                    const T& operator()() const
                    {
                        return KeyItem;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Wood
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Wood";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Wood;
                    T& operator()()
                    {
                        return Wood;
                    }
                    const T& operator()() const
                    {
                        return Wood;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Smith
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Smith";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Smith;
                    T& operator()()
                    {
                        return Smith;
                    }
                    const T& operator()() const
                    {
                        return Smith;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Gold
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Gold";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Gold;
                    T& operator()()
                    {
                        return Gold;
                    }
                    const T& operator()() const
                    {
                        return Gold;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Cloth
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Cloth";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Cloth;
                    T& operator()()
                    {
                        return Cloth;
                    }
                    const T& operator()() const
                    {
                        return Cloth;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Leather
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Leather";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Leather;
                    T& operator()()
                    {
                        return Leather;
                    }
                    const T& operator()() const
                    {
                        return Leather;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Bone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Bone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Bone;
                    T& operator()()
                    {
                        return Bone;
                    }
                    const T& operator()() const
                    {
                        return Bone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Alchemy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Alchemy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Alchemy;
                    T& operator()()
                    {
                        return Alchemy;
                    }
                    const T& operator()() const
                    {
                        return Alchemy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Cook
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Cook";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Cook;
                    T& operator()()
                    {
                        return Cook;
                    }
                    const T& operator()() const
                    {
                        return Cook;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Crystal
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Crystal";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Crystal;
                    T& operator()()
                    {
                        return Crystal;
                    }
                    const T& operator()() const
                    {
                        return Crystal;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct HQCrystal
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "HQCrystal";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  HQCrystal;
                    T& operator()()
                    {
                        return HQCrystal;
                    }
                    const T& operator()() const
                    {
                        return HQCrystal;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Ingredient1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Ingredient1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Ingredient1;
                    T& operator()()
                    {
                        return Ingredient1;
                    }
                    const T& operator()() const
                    {
                        return Ingredient1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Ingredient2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Ingredient2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Ingredient2;
                    T& operator()()
                    {
                        return Ingredient2;
                    }
                    const T& operator()() const
                    {
                        return Ingredient2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Ingredient3
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Ingredient3";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Ingredient3;
                    T& operator()()
                    {
                        return Ingredient3;
                    }
                    const T& operator()() const
                    {
                        return Ingredient3;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Ingredient4
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Ingredient4";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Ingredient4;
                    T& operator()()
                    {
                        return Ingredient4;
                    }
                    const T& operator()() const
                    {
                        return Ingredient4;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Ingredient5
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Ingredient5";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Ingredient5;
                    T& operator()()
                    {
                        return Ingredient5;
                    }
                    const T& operator()() const
                    {
                        return Ingredient5;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Ingredient6
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Ingredient6";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Ingredient6;
                    T& operator()()
                    {
                        return Ingredient6;
                    }
                    const T& operator()() const
                    {
                        return Ingredient6;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Ingredient7
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Ingredient7";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Ingredient7;
                    T& operator()()
                    {
                        return Ingredient7;
                    }
                    const T& operator()() const
                    {
                        return Ingredient7;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Ingredient8
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Ingredient8";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Ingredient8;
                    T& operator()()
                    {
                        return Ingredient8;
                    }
                    const T& operator()() const
                    {
                        return Ingredient8;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Result
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Result";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Result;
                    T& operator()()
                    {
                        return Result;
                    }
                    const T& operator()() const
                    {
                        return Result;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ResultHQ1
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ResultHQ1";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ResultHQ1;
                    T& operator()()
                    {
                        return ResultHQ1;
                    }
                    const T& operator()() const
                    {
                        return ResultHQ1;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ResultHQ2
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ResultHQ2";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ResultHQ2;
                    T& operator()()
                    {
                        return ResultHQ2;
                    }
                    const T& operator()() const
                    {
                        return ResultHQ2;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ResultHQ3
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ResultHQ3";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ResultHQ3;
                    T& operator()()
                    {
                        return ResultHQ3;
                    }
                    const T& operator()() const
                    {
                        return ResultHQ3;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ResultQty
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ResultQty";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ResultQty;
                    T& operator()()
                    {
                        return ResultQty;
                    }
                    const T& operator()() const
                    {
                        return ResultQty;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ResultHQ1Qty
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ResultHQ1Qty";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ResultHQ1Qty;
                    T& operator()()
                    {
                        return ResultHQ1Qty;
                    }
                    const T& operator()() const
                    {
                        return ResultHQ1Qty;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ResultHQ2Qty
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ResultHQ2Qty";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ResultHQ2Qty;
                    T& operator()()
                    {
                        return ResultHQ2Qty;
                    }
                    const T& operator()() const
                    {
                        return ResultHQ2Qty;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ResultHQ3Qty
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ResultHQ3Qty";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ResultHQ3Qty;
                    T& operator()()
                    {
                        return ResultHQ3Qty;
                    }
                    const T& operator()() const
                    {
                        return ResultHQ3Qty;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct ResultName
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ResultName";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ResultName;
                    T& operator()()
                    {
                        return ResultName;
                    }
                    const T& operator()() const
                    {
                        return ResultName;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
    } // namespace SynthRecipes_

    struct SynthRecipes : sqlpp::table_t<SynthRecipes,
                                         SynthRecipes_::ID,
                                         SynthRecipes_::Desynth,
                                         SynthRecipes_::KeyItem,
                                         SynthRecipes_::Wood,
                                         SynthRecipes_::Smith,
                                         SynthRecipes_::Gold,
                                         SynthRecipes_::Cloth,
                                         SynthRecipes_::Leather,
                                         SynthRecipes_::Bone,
                                         SynthRecipes_::Alchemy,
                                         SynthRecipes_::Cook,
                                         SynthRecipes_::Crystal,
                                         SynthRecipes_::HQCrystal,
                                         SynthRecipes_::Ingredient1,
                                         SynthRecipes_::Ingredient2,
                                         SynthRecipes_::Ingredient3,
                                         SynthRecipes_::Ingredient4,
                                         SynthRecipes_::Ingredient5,
                                         SynthRecipes_::Ingredient6,
                                         SynthRecipes_::Ingredient7,
                                         SynthRecipes_::Ingredient8,
                                         SynthRecipes_::Result,
                                         SynthRecipes_::ResultHQ1,
                                         SynthRecipes_::ResultHQ2,
                                         SynthRecipes_::ResultHQ3,
                                         SynthRecipes_::ResultQty,
                                         SynthRecipes_::ResultHQ1Qty,
                                         SynthRecipes_::ResultHQ2Qty,
                                         SynthRecipes_::ResultHQ3Qty,
                                         SynthRecipes_::ResultName>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "synth_recipes";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  synthRecipes;
                T& operator()()
                {
                    return synthRecipes;
                }
                const T& operator()() const
                {
                    return synthRecipes;
                }
            };
        };
    };
    namespace TestEnum_
    {
        struct ID
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "ID";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  ID;
                    T& operator()()
                    {
                        return ID;
                    }
                    const T& operator()() const
                    {
                        return ID;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "Name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  Name;
                    T& operator()()
                    {
                        return Name;
                    }
                    const T& operator()() const
                    {
                        return Name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
        };
        struct IsActive
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "IsActive";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  IsActive;
                    T& operator()()
                    {
                        return IsActive;
                    }
                    const T& operator()() const
                    {
                        return IsActive;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text>;
        };
    } // namespace TestEnum_

    struct TestEnum : sqlpp::table_t<TestEnum,
                                     TestEnum_::ID,
                                     TestEnum_::Name,
                                     TestEnum_::IsActive>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "test_enum";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  testEnum;
                T& operator()()
                {
                    return testEnum;
                }
                const T& operator()() const
                {
                    return testEnum;
                }
            };
        };
    };
    namespace Traits_
    {
        struct Traitid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "traitid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  traitid;
                    T& operator()()
                    {
                        return traitid;
                    }
                    const T& operator()() const
                    {
                        return traitid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Job
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "job";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  job;
                    T& operator()()
                    {
                        return job;
                    }
                    const T& operator()() const
                    {
                        return job;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Level
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "level";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  level;
                    T& operator()()
                    {
                        return level;
                    }
                    const T& operator()() const
                    {
                        return level;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Rank
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rank";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rank;
                    T& operator()()
                    {
                        return rank;
                    }
                    const T& operator()() const
                    {
                        return rank;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Modifier
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "modifier";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  modifier;
                    T& operator()()
                    {
                        return modifier;
                    }
                    const T& operator()() const
                    {
                        return modifier;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "value";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  value;
                    T& operator()()
                    {
                        return value;
                    }
                    const T& operator()() const
                    {
                        return value;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
        struct ContentTag
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "content_tag";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  contentTag;
                    T& operator()()
                    {
                        return contentTag;
                    }
                    const T& operator()() const
                    {
                        return contentTag;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
        };
        struct Meritid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "meritid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  meritid;
                    T& operator()()
                    {
                        return meritid;
                    }
                    const T& operator()() const
                    {
                        return meritid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint>;
        };
    } // namespace Traits_

    struct Traits : sqlpp::table_t<Traits,
                                   Traits_::Traitid,
                                   Traits_::Name,
                                   Traits_::Job,
                                   Traits_::Level,
                                   Traits_::Rank,
                                   Traits_::Modifier,
                                   Traits_::Value,
                                   Traits_::ContentTag,
                                   Traits_::Meritid>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "traits";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  traits;
                T& operator()()
                {
                    return traits;
                }
                const T& operator()() const
                {
                    return traits;
                }
            };
        };
    };
    namespace Transport_
    {
        struct Id
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  id;
                    T& operator()()
                    {
                        return id;
                    }
                    const T& operator()() const
                    {
                        return id;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
        struct Transport
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "transport";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  transport;
                    T& operator()()
                    {
                        return transport;
                    }
                    const T& operator()() const
                    {
                        return transport;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct Door
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "door";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  door;
                    T& operator()()
                    {
                        return door;
                    }
                    const T& operator()() const
                    {
                        return door;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
        };
        struct DockX
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dock_x";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dockX;
                    T& operator()()
                    {
                        return dockX;
                    }
                    const T& operator()() const
                    {
                        return dockX;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct DockY
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dock_y";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dockY;
                    T& operator()()
                    {
                        return dockY;
                    }
                    const T& operator()() const
                    {
                        return dockY;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct DockZ
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dock_z";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dockZ;
                    T& operator()()
                    {
                        return dockZ;
                    }
                    const T& operator()() const
                    {
                        return dockZ;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct DockRot
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "dock_rot";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  dockRot;
                    T& operator()()
                    {
                        return dockRot;
                    }
                    const T& operator()() const
                    {
                        return dockRot;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Boundary
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "boundary";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  boundary;
                    T& operator()()
                    {
                        return boundary;
                    }
                    const T& operator()() const
                    {
                        return boundary;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct AnimArrive
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "anim_arrive";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animArrive;
                    T& operator()()
                    {
                        return animArrive;
                    }
                    const T& operator()() const
                    {
                        return animArrive;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct AnimDepart
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "anim_depart";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animDepart;
                    T& operator()()
                    {
                        return animDepart;
                    }
                    const T& operator()() const
                    {
                        return animDepart;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct TimeOffset
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "time_offset";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timeOffset;
                    T& operator()()
                    {
                        return timeOffset;
                    }
                    const T& operator()() const
                    {
                        return timeOffset;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct TimeInterval
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "time_interval";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timeInterval;
                    T& operator()()
                    {
                        return timeInterval;
                    }
                    const T& operator()() const
                    {
                        return timeInterval;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct TimeAnimArrive
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "time_anim_arrive";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timeAnimArrive;
                    T& operator()()
                    {
                        return timeAnimArrive;
                    }
                    const T& operator()() const
                    {
                        return timeAnimArrive;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct TimeWaiting
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "time_waiting";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timeWaiting;
                    T& operator()()
                    {
                        return timeWaiting;
                    }
                    const T& operator()() const
                    {
                        return timeWaiting;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct TimeAnimDepart
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "time_anim_depart";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  timeAnimDepart;
                    T& operator()()
                    {
                        return timeAnimDepart;
                    }
                    const T& operator()() const
                    {
                        return timeAnimDepart;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Zone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zone;
                    T& operator()()
                    {
                        return zone;
                    }
                    const T& operator()() const
                    {
                        return zone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace Transport_

    struct Transport : sqlpp::table_t<Transport,
                                      Transport_::Id,
                                      Transport_::Name,
                                      Transport_::Transport,
                                      Transport_::Door,
                                      Transport_::DockX,
                                      Transport_::DockY,
                                      Transport_::DockZ,
                                      Transport_::DockRot,
                                      Transport_::Boundary,
                                      Transport_::AnimArrive,
                                      Transport_::AnimDepart,
                                      Transport_::TimeOffset,
                                      Transport_::TimeInterval,
                                      Transport_::TimeAnimArrive,
                                      Transport_::TimeWaiting,
                                      Transport_::TimeAnimDepart,
                                      Transport_::Zone>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "transport";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  transport;
                T& operator()()
                {
                    return transport;
                }
                const T& operator()() const
                {
                    return transport;
                }
            };
        };
    };
    namespace UnitySystem_
    {
        struct Leader
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "leader";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  leader;
                    T& operator()()
                    {
                        return leader;
                    }
                    const T& operator()() const
                    {
                        return leader;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
        };
        struct MembersCurrent
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "members_current";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  membersCurrent;
                    T& operator()()
                    {
                        return membersCurrent;
                    }
                    const T& operator()() const
                    {
                        return membersCurrent;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
        struct PointsCurrent
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "points_current";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pointsCurrent;
                    T& operator()()
                    {
                        return pointsCurrent;
                    }
                    const T& operator()() const
                    {
                        return pointsCurrent;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct MembersPrev
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "members_prev";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  membersPrev;
                    T& operator()()
                    {
                        return membersPrev;
                    }
                    const T& operator()() const
                    {
                        return membersPrev;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer>;
        };
        struct PointsPrev
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "points_prev";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pointsPrev;
                    T& operator()()
                    {
                        return pointsPrev;
                    }
                    const T& operator()() const
                    {
                        return pointsPrev;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
    } // namespace UnitySystem_

    struct UnitySystem : sqlpp::table_t<UnitySystem,
                                        UnitySystem_::Leader,
                                        UnitySystem_::MembersCurrent,
                                        UnitySystem_::PointsCurrent,
                                        UnitySystem_::MembersPrev,
                                        UnitySystem_::PointsPrev>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "unity_system";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  unitySystem;
                T& operator()()
                {
                    return unitySystem;
                }
                const T& operator()() const
                {
                    return unitySystem;
                }
            };
        };
    };
    namespace WaterPoints_
    {
        struct Waterid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "waterid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  waterid;
                    T& operator()()
                    {
                        return waterid;
                    }
                    const T& operator()() const
                    {
                        return waterid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
        };
        struct Zoneid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zoneid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zoneid;
                    T& operator()()
                    {
                        return zoneid;
                    }
                    const T& operator()() const
                    {
                        return zoneid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Type
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "type";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  type;
                    T& operator()()
                    {
                        return type;
                    }
                    const T& operator()() const
                    {
                        return type;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Pointid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pointid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  pointid;
                    T& operator()()
                    {
                        return pointid;
                    }
                    const T& operator()() const
                    {
                        return pointid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct PosX
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_x";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posX;
                    T& operator()()
                    {
                        return posX;
                    }
                    const T& operator()() const
                    {
                        return posX;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct PosY
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_y";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posY;
                    T& operator()()
                    {
                        return posY;
                    }
                    const T& operator()() const
                    {
                        return posY;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct PosZ
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "pos_z";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  posZ;
                    T& operator()()
                    {
                        return posZ;
                    }
                    const T& operator()() const
                    {
                        return posZ;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
    } // namespace WaterPoints_

    struct WaterPoints : sqlpp::table_t<WaterPoints,
                                        WaterPoints_::Waterid,
                                        WaterPoints_::Zoneid,
                                        WaterPoints_::Type,
                                        WaterPoints_::Pointid,
                                        WaterPoints_::PosX,
                                        WaterPoints_::PosY,
                                        WaterPoints_::PosZ>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "water_points";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  waterPoints;
                T& operator()()
                {
                    return waterPoints;
                }
                const T& operator()() const
                {
                    return waterPoints;
                }
            };
        };
    };
    namespace WeaponSkills_
    {
        struct Weaponskillid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "weaponskillid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  weaponskillid;
                    T& operator()()
                    {
                        return weaponskillid;
                    }
                    const T& operator()() const
                    {
                        return weaponskillid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Jobs
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "jobs";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  jobs;
                    T& operator()()
                    {
                        return jobs;
                    }
                    const T& operator()() const
                    {
                        return jobs;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
        struct Type
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "type";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  type;
                    T& operator()()
                    {
                        return type;
                    }
                    const T& operator()() const
                    {
                        return type;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Skilllevel
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "skilllevel";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  skilllevel;
                    T& operator()()
                    {
                        return skilllevel;
                    }
                    const T& operator()() const
                    {
                        return skilllevel;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Element
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "element";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  element;
                    T& operator()()
                    {
                        return element;
                    }
                    const T& operator()() const
                    {
                        return element;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Animation
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "animation";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animation;
                    T& operator()()
                    {
                        return animation;
                    }
                    const T& operator()() const
                    {
                        return animation;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct AnimationTime
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "animationTime";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  animationTime;
                    T& operator()()
                    {
                        return animationTime;
                    }
                    const T& operator()() const
                    {
                        return animationTime;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Range
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "range";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  range;
                    T& operator()()
                    {
                        return range;
                    }
                    const T& operator()() const
                    {
                        return range;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Aoe
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "aoe";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  aoe;
                    T& operator()()
                    {
                        return aoe;
                    }
                    const T& operator()() const
                    {
                        return aoe;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct PrimarySc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "primary_sc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  primarySc;
                    T& operator()()
                    {
                        return primarySc;
                    }
                    const T& operator()() const
                    {
                        return primarySc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct SecondarySc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "secondary_sc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  secondarySc;
                    T& operator()()
                    {
                        return secondarySc;
                    }
                    const T& operator()() const
                    {
                        return secondarySc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct TertiarySc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "tertiary_sc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  tertiarySc;
                    T& operator()()
                    {
                        return tertiarySc;
                    }
                    const T& operator()() const
                    {
                        return tertiarySc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct MainOnly
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "main_only";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  mainOnly;
                    T& operator()()
                    {
                        return mainOnly;
                    }
                    const T& operator()() const
                    {
                        return mainOnly;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
        struct UnlockId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "unlock_id";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  unlockId;
                    T& operator()()
                    {
                        return unlockId;
                    }
                    const T& operator()() const
                    {
                        return unlockId;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint>;
        };
    } // namespace WeaponSkills_

    struct WeaponSkills : sqlpp::table_t<WeaponSkills,
                                         WeaponSkills_::Weaponskillid,
                                         WeaponSkills_::Name,
                                         WeaponSkills_::Jobs,
                                         WeaponSkills_::Type,
                                         WeaponSkills_::Skilllevel,
                                         WeaponSkills_::Element,
                                         WeaponSkills_::Animation,
                                         WeaponSkills_::AnimationTime,
                                         WeaponSkills_::Range,
                                         WeaponSkills_::Aoe,
                                         WeaponSkills_::PrimarySc,
                                         WeaponSkills_::SecondarySc,
                                         WeaponSkills_::TertiarySc,
                                         WeaponSkills_::MainOnly,
                                         WeaponSkills_::UnlockId>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "weapon_skills";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  weaponSkills;
                T& operator()()
                {
                    return weaponSkills;
                }
                const T& operator()() const
                {
                    return weaponSkills;
                }
            };
        };
    };
    namespace ZoneSettings_
    {
        struct Zoneid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zoneid";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zoneid;
                    T& operator()()
                    {
                        return zoneid;
                    }
                    const T& operator()() const
                    {
                        return zoneid;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Zonetype
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zonetype";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zonetype;
                    T& operator()()
                    {
                        return zonetype;
                    }
                    const T& operator()() const
                    {
                        return zonetype;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Zoneip
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zoneip";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zoneip;
                    T& operator()()
                    {
                        return zoneip;
                    }
                    const T& operator()() const
                    {
                        return zoneip;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Zoneport
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zoneport";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zoneport;
                    T& operator()()
                    {
                        return zoneport;
                    }
                    const T& operator()() const
                    {
                        return zoneport;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "name";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  name;
                    T& operator()()
                    {
                        return name;
                    }
                    const T& operator()() const
                    {
                        return name;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
        };
        struct MusicDay
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "music_day";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  musicDay;
                    T& operator()()
                    {
                        return musicDay;
                    }
                    const T& operator()() const
                    {
                        return musicDay;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct MusicNight
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "music_night";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  musicNight;
                    T& operator()()
                    {
                        return musicNight;
                    }
                    const T& operator()() const
                    {
                        return musicNight;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Battlesolo
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "battlesolo";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  battlesolo;
                    T& operator()()
                    {
                        return battlesolo;
                    }
                    const T& operator()() const
                    {
                        return battlesolo;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Battlemulti
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "battlemulti";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  battlemulti;
                    T& operator()()
                    {
                        return battlemulti;
                    }
                    const T& operator()() const
                    {
                        return battlemulti;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Restriction
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "restriction";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  restriction;
                    T& operator()()
                    {
                        return restriction;
                    }
                    const T& operator()() const
                    {
                        return restriction;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Tax
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "tax";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  tax;
                    T& operator()()
                    {
                        return tax;
                    }
                    const T& operator()() const
                    {
                        return tax;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
        struct Misc
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "misc";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  misc;
                    T& operator()()
                    {
                        return misc;
                    }
                    const T& operator()() const
                    {
                        return misc;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
    } // namespace ZoneSettings_

    struct ZoneSettings : sqlpp::table_t<ZoneSettings,
                                         ZoneSettings_::Zoneid,
                                         ZoneSettings_::Zonetype,
                                         ZoneSettings_::Zoneip,
                                         ZoneSettings_::Zoneport,
                                         ZoneSettings_::Name,
                                         ZoneSettings_::MusicDay,
                                         ZoneSettings_::MusicNight,
                                         ZoneSettings_::Battlesolo,
                                         ZoneSettings_::Battlemulti,
                                         ZoneSettings_::Restriction,
                                         ZoneSettings_::Tax,
                                         ZoneSettings_::Misc>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "zone_settings";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  zoneSettings;
                T& operator()()
                {
                    return zoneSettings;
                }
                const T& operator()() const
                {
                    return zoneSettings;
                }
            };
        };
    };
    namespace ZoneWeather_
    {
        struct Zone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zone;
                    T& operator()()
                    {
                        return zone;
                    }
                    const T& operator()() const
                    {
                        return zone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
        };
        struct Weather
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "weather";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  weather;
                    T& operator()()
                    {
                        return weather;
                    }
                    const T& operator()() const
                    {
                        return weather;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
        };
    } // namespace ZoneWeather_

    struct ZoneWeather : sqlpp::table_t<ZoneWeather,
                                        ZoneWeather_::Zone,
                                        ZoneWeather_::Weather>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "zone_weather";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  zoneWeather;
                T& operator()()
                {
                    return zoneWeather;
                }
                const T& operator()() const
                {
                    return zoneWeather;
                }
            };
        };
    };
    namespace Zonelines_
    {
        struct Zoneline
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "zoneline";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  zoneline;
                    T& operator()()
                    {
                        return zoneline;
                    }
                    const T& operator()() const
                    {
                        return zoneline;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
        };
        struct Fromzone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "fromzone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  fromzone;
                    T& operator()()
                    {
                        return fromzone;
                    }
                    const T& operator()() const
                    {
                        return fromzone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Tozone
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "tozone";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  tozone;
                    T& operator()()
                    {
                        return tozone;
                    }
                    const T& operator()() const
                    {
                        return tozone;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
        };
        struct Tox
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "tox";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  tox;
                    T& operator()()
                    {
                        return tox;
                    }
                    const T& operator()() const
                    {
                        return tox;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct Toy
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "toy";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  toy;
                    T& operator()()
                    {
                        return toy;
                    }
                    const T& operator()() const
                    {
                        return toy;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct Toz
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "toz";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  toz;
                    T& operator()()
                    {
                        return toz;
                    }
                    const T& operator()() const
                    {
                        return toz;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::floating_point>;
        };
        struct Rotation
        {
            struct _alias_t
            {
                static constexpr const char _literal[] = "rotation";
                using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t
                {
                    T  rotation;
                    T& operator()()
                    {
                        return rotation;
                    }
                    const T& operator()() const
                    {
                        return rotation;
                    }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
        };
    } // namespace Zonelines_

    struct Zonelines : sqlpp::table_t<Zonelines,
                                      Zonelines_::Zoneline,
                                      Zonelines_::Fromzone,
                                      Zonelines_::Tozone,
                                      Zonelines_::Tox,
                                      Zonelines_::Toy,
                                      Zonelines_::Toz,
                                      Zonelines_::Rotation>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] = "zonelines";
            using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t
            {
                T  zonelines;
                T& operator()()
                {
                    return zonelines;
                }
                const T& operator()() const
                {
                    return zonelines;
                }
            };
        };
    };
} // namespace xidb
#endif
