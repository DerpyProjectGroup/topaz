// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_ZONE_SETTINGS_H
#define XIDB_ZONE_SETTINGS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace zone_settings_
  {
    struct zoneid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zoneid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zoneid;
            T& operator()() { return zoneid; }
            const T& operator()() const { return zoneid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct zonetype
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zonetype";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zonetype;
            T& operator()() { return zonetype; }
            const T& operator()() const { return zonetype; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct zoneip
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zoneip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zoneip;
            T& operator()() { return zoneip; }
            const T& operator()() const { return zoneip; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct zoneport
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zoneport";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zoneport;
            T& operator()() { return zoneport; }
            const T& operator()() const { return zoneport; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct music_day
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "music_day";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T music_day;
            T& operator()() { return music_day; }
            const T& operator()() const { return music_day; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct music_night
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "music_night";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T music_night;
            T& operator()() { return music_night; }
            const T& operator()() const { return music_night; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct battlesolo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battlesolo";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlesolo;
            T& operator()() { return battlesolo; }
            const T& operator()() const { return battlesolo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct battlemulti
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battlemulti";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlemulti;
            T& operator()() { return battlemulti; }
            const T& operator()() const { return battlemulti; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct restriction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "restriction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T restriction;
            T& operator()() { return restriction; }
            const T& operator()() const { return restriction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct tax
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tax";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tax;
            T& operator()() { return tax; }
            const T& operator()() const { return tax; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct misc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "misc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T misc;
            T& operator()() { return misc; }
            const T& operator()() const { return misc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace zone_settings_

  struct zone_settings: sqlpp::table_t<zone_settings,
               zone_settings_::zoneid,
               zone_settings_::zonetype,
               zone_settings_::zoneip,
               zone_settings_::zoneport,
               zone_settings_::name,
               zone_settings_::music_day,
               zone_settings_::music_night,
               zone_settings_::battlesolo,
               zone_settings_::battlemulti,
               zone_settings_::restriction,
               zone_settings_::tax,
               zone_settings_::misc>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "zone_settings";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T zone_settings;
        T& operator()() { return zone_settings; }
        const T& operator()() const { return zone_settings; }
      };
    };
  };
} // namespace xidb
#endif
