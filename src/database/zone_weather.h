// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse -identity-naming xidb.sql ../src/database xidb
#ifndef XIDB_ZONE_WEATHER_H
#define XIDB_ZONE_WEATHER_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace zone_weather_
  {
    struct zone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zone;
            T& operator()() { return zone; }
            const T& operator()() const { return zone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct weather
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "weather";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T weather;
            T& operator()() { return weather; }
            const T& operator()() const { return weather; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
  } // namespace zone_weather_

  struct zone_weather: sqlpp::table_t<zone_weather,
               zone_weather_::zone,
               zone_weather_::weather>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "zone_weather";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T zone_weather;
        T& operator()() { return zone_weather; }
        const T& operator()() const { return zone_weather; }
      };
    };
  };
} // namespace xidb
#endif
